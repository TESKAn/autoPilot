   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	RTC_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	RTC_DeInit:
  24              	.LFB110:
  25              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0RC1
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    25-August-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  26              		.loc 1 368 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 84B0     		sub	sp, sp, #16
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 24
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  41              		.loc 1 369 0
  42 0006 4FF00003 		mov	r3, #0
  43 000a 7B60     		str	r3, [r7, #4]
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  44              		.loc 1 370 0
  45 000c 4FF00003 		mov	r3, #0
  46 0010 BB60     		str	r3, [r7, #8]
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  47              		.loc 1 371 0
  48 0012 4FF00003 		mov	r3, #0
  49 0016 FB73     		strb	r3, [r7, #15]
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  50              		.loc 1 374 0
  51 0018 4FF42053 		mov	r3, #10240
  52 001c C4F20003 		movt	r3, 16384
  53 0020 4FF0CA02 		mov	r2, #202
  54 0024 5A62     		str	r2, [r3, #36]
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  55              		.loc 1 375 0
  56 0026 4FF42053 		mov	r3, #10240
  57 002a C4F20003 		movt	r3, 16384
  58 002e 4FF05302 		mov	r2, #83
  59 0032 5A62     		str	r2, [r3, #36]
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  60              		.loc 1 378 0
  61 0034 FFF7FEFF 		bl	RTC_EnterInitMode
  62 0038 0346     		mov	r3, r0
  63 003a 002B     		cmp	r3, #0
  64 003c 03D1     		bne	.L2
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  65              		.loc 1 380 0
  66 003e 4FF00003 		mov	r3, #0
  67 0042 FB73     		strb	r3, [r7, #15]
  68 0044 84E0     		b	.L3
  69              	.L2:
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  70              		.loc 1 385 0
  71 0046 4FF42053 		mov	r3, #10240
  72 004a C4F20003 		movt	r3, 16384
  73 004e 4FF00002 		mov	r2, #0
  74 0052 1A60     		str	r2, [r3, #0]
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  75              		.loc 1 386 0
  76 0054 4FF42053 		mov	r3, #10240
  77 0058 C4F20003 		movt	r3, 16384
  78 005c 42F20112 		movw	r2, #8449
  79 0060 5A60     		str	r2, [r3, #4]
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  80              		.loc 1 388 0
  81 0062 4FF42053 		mov	r3, #10240
  82 0066 C4F20003 		movt	r3, 16384
  83 006a 4FF42052 		mov	r2, #10240
  84 006e C4F20002 		movt	r2, 16384
  85 0072 9268     		ldr	r2, [r2, #8]
  86 0074 02F00702 		and	r2, r2, #7
  87 0078 9A60     		str	r2, [r3, #8]
  88              	.L5:
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  89              		.loc 1 393 0 discriminator 1
  90 007a 4FF42053 		mov	r3, #10240
  91 007e C4F20003 		movt	r3, 16384
  92 0082 DB68     		ldr	r3, [r3, #12]
  93 0084 03F00403 		and	r3, r3, #4
  94 0088 BB60     		str	r3, [r7, #8]
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  95              		.loc 1 394 0 discriminator 1
  96 008a 7B68     		ldr	r3, [r7, #4]
  97 008c 03F10103 		add	r3, r3, #1
  98 0090 7B60     		str	r3, [r7, #4]
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
  99              		.loc 1 395 0 discriminator 1
 100 0092 7B68     		ldr	r3, [r7, #4]
 101 0094 B3F5803F 		cmp	r3, #65536
 102 0098 02D0     		beq	.L4
 103 009a BB68     		ldr	r3, [r7, #8]
 104 009c 002B     		cmp	r3, #0
 105 009e ECD0     		beq	.L5
 106              	.L4:
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 107              		.loc 1 397 0
 108 00a0 4FF42053 		mov	r3, #10240
 109 00a4 C4F20003 		movt	r3, 16384
 110 00a8 DB68     		ldr	r3, [r3, #12]
 111 00aa 03F00403 		and	r3, r3, #4
 112 00ae 002B     		cmp	r3, #0
 113 00b0 03D1     		bne	.L6
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 114              		.loc 1 399 0
 115 00b2 4FF00003 		mov	r3, #0
 116 00b6 FB73     		strb	r3, [r7, #15]
 117 00b8 4AE0     		b	.L3
 118              	.L6:
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 119              		.loc 1 404 0
 120 00ba 4FF42053 		mov	r3, #10240
 121 00be C4F20003 		movt	r3, 16384
 122 00c2 9B68     		ldr	r3, [r3, #8]
 123 00c4 4FF42053 		mov	r3, #10240
 124 00c8 C4F20003 		movt	r3, 16384
 125 00cc 4FF00002 		mov	r2, #0
 126 00d0 9A60     		str	r2, [r3, #8]
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 127              		.loc 1 405 0
 128 00d2 4FF42053 		mov	r3, #10240
 129 00d6 C4F20003 		movt	r3, 16384
 130 00da 4FF6FF72 		movw	r2, #65535
 131 00de 5A61     		str	r2, [r3, #20]
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 132              		.loc 1 406 0
 133 00e0 4FF42053 		mov	r3, #10240
 134 00e4 C4F20003 		movt	r3, 16384
 135 00e8 4FF0FF02 		mov	r2, #255
 136 00ec C0F27F02 		movt	r2, 127
 137 00f0 1A61     		str	r2, [r3, #16]
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 138              		.loc 1 407 0
 139 00f2 4FF42053 		mov	r3, #10240
 140 00f6 C4F20003 		movt	r3, 16384
 141 00fa 4FF00002 		mov	r2, #0
 142 00fe 9A61     		str	r2, [r3, #24]
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 143              		.loc 1 408 0
 144 0100 4FF42053 		mov	r3, #10240
 145 0104 C4F20003 		movt	r3, 16384
 146 0108 4FF00002 		mov	r2, #0
 147 010c DA61     		str	r2, [r3, #28]
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 148              		.loc 1 409 0
 149 010e 4FF42053 		mov	r3, #10240
 150 0112 C4F20003 		movt	r3, 16384
 151 0116 4FF00002 		mov	r2, #0
 152 011a 1A62     		str	r2, [r3, #32]
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 153              		.loc 1 412 0
 154 011c 4FF42053 		mov	r3, #10240
 155 0120 C4F20003 		movt	r3, 16384
 156 0124 4FF00002 		mov	r2, #0
 157 0128 DA60     		str	r2, [r3, #12]
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 158              		.loc 1 415 0
 159 012a 4FF42053 		mov	r3, #10240
 160 012e C4F20003 		movt	r3, 16384
 161 0132 4FF00002 		mov	r2, #0
 162 0136 1A64     		str	r2, [r3, #64]
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 163              		.loc 1 417 0
 164 0138 FFF7FEFF 		bl	RTC_WaitForSynchro
 165 013c 0346     		mov	r3, r0
 166 013e 002B     		cmp	r3, #0
 167 0140 03D1     		bne	.L7
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 168              		.loc 1 419 0
 169 0142 4FF00003 		mov	r3, #0
 170 0146 FB73     		strb	r3, [r7, #15]
 171 0148 02E0     		b	.L3
 172              	.L7:
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 173              		.loc 1 423 0
 174 014a 4FF00103 		mov	r3, #1
 175 014e FB73     		strb	r3, [r7, #15]
 176              	.L3:
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 177              		.loc 1 429 0
 178 0150 4FF42053 		mov	r3, #10240
 179 0154 C4F20003 		movt	r3, 16384
 180 0158 4FF0FF02 		mov	r2, #255
 181 015c 5A62     		str	r2, [r3, #36]
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 182              		.loc 1 431 0
 183 015e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 184              		.loc 1 432 0
 185 0160 1846     		mov	r0, r3
 186 0162 07F11007 		add	r7, r7, #16
 187 0166 BD46     		mov	sp, r7
 188 0168 80BD     		pop	{r7, pc}
 189              		.cfi_endproc
 190              	.LFE110:
 192 016a 00BF     		.align	2
 193              		.global	RTC_Init
 194              		.thumb
 195              		.thumb_func
 197              	RTC_Init:
 198              	.LFB111:
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 199              		.loc 1 446 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 16
 202              		@ frame_needed = 1, uses_anonymous_args = 0
 203 016c 80B5     		push	{r7, lr}
 204              	.LCFI3:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 14, -4
 207              		.cfi_offset 7, -8
 208 016e 84B0     		sub	sp, sp, #16
 209              	.LCFI4:
 210              		.cfi_def_cfa_offset 24
 211 0170 00AF     		add	r7, sp, #0
 212              	.LCFI5:
 213              		.cfi_def_cfa_register 7
 214 0172 7860     		str	r0, [r7, #4]
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 215              		.loc 1 447 0
 216 0174 4FF00003 		mov	r3, #0
 217 0178 FB73     		strb	r3, [r7, #15]
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 218              		.loc 1 455 0
 219 017a 4FF42053 		mov	r3, #10240
 220 017e C4F20003 		movt	r3, 16384
 221 0182 4FF0CA02 		mov	r2, #202
 222 0186 5A62     		str	r2, [r3, #36]
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 223              		.loc 1 456 0
 224 0188 4FF42053 		mov	r3, #10240
 225 018c C4F20003 		movt	r3, 16384
 226 0190 4FF05302 		mov	r2, #83
 227 0194 5A62     		str	r2, [r3, #36]
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 228              		.loc 1 459 0
 229 0196 FFF7FEFF 		bl	RTC_EnterInitMode
 230 019a 0346     		mov	r3, r0
 231 019c 002B     		cmp	r3, #0
 232 019e 03D1     		bne	.L9
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 233              		.loc 1 461 0
 234 01a0 4FF00003 		mov	r3, #0
 235 01a4 FB73     		strb	r3, [r7, #15]
 236 01a6 33E0     		b	.L10
 237              	.L9:
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 238              		.loc 1 466 0
 239 01a8 4FF42053 		mov	r3, #10240
 240 01ac C4F20003 		movt	r3, 16384
 241 01b0 4FF42052 		mov	r2, #10240
 242 01b4 C4F20002 		movt	r2, 16384
 243 01b8 9268     		ldr	r2, [r2, #8]
 244 01ba 22F04002 		bic	r2, r2, #64
 245 01be 9A60     		str	r2, [r3, #8]
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 246              		.loc 1 468 0
 247 01c0 4FF42053 		mov	r3, #10240
 248 01c4 C4F20003 		movt	r3, 16384
 249 01c8 4FF42052 		mov	r2, #10240
 250 01cc C4F20002 		movt	r2, 16384
 251 01d0 9168     		ldr	r1, [r2, #8]
 252 01d2 7A68     		ldr	r2, [r7, #4]
 253 01d4 1268     		ldr	r2, [r2, #0]
 254 01d6 0A43     		orrs	r2, r2, r1
 255 01d8 9A60     		str	r2, [r3, #8]
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 256              		.loc 1 471 0
 257 01da 4FF42053 		mov	r3, #10240
 258 01de C4F20003 		movt	r3, 16384
 259 01e2 7A68     		ldr	r2, [r7, #4]
 260 01e4 9268     		ldr	r2, [r2, #8]
 261 01e6 1A61     		str	r2, [r3, #16]
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 262              		.loc 1 472 0
 263 01e8 4FF42053 		mov	r3, #10240
 264 01ec C4F20003 		movt	r3, 16384
 265 01f0 4FF42052 		mov	r2, #10240
 266 01f4 C4F20002 		movt	r2, 16384
 267 01f8 1169     		ldr	r1, [r2, #16]
 268 01fa 7A68     		ldr	r2, [r7, #4]
 269 01fc 5268     		ldr	r2, [r2, #4]
 270 01fe 4FEA0242 		lsl	r2, r2, #16
 271 0202 0A43     		orrs	r2, r2, r1
 272 0204 1A61     		str	r2, [r3, #16]
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 273              		.loc 1 475 0
 274 0206 FFF7FEFF 		bl	RTC_ExitInitMode
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 275              		.loc 1 477 0
 276 020a 4FF00103 		mov	r3, #1
 277 020e FB73     		strb	r3, [r7, #15]
 278              	.L10:
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 279              		.loc 1 480 0
 280 0210 4FF42053 		mov	r3, #10240
 281 0214 C4F20003 		movt	r3, 16384
 282 0218 4FF0FF02 		mov	r2, #255
 283 021c 5A62     		str	r2, [r3, #36]
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 284              		.loc 1 482 0
 285 021e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 286              		.loc 1 483 0
 287 0220 1846     		mov	r0, r3
 288 0222 07F11007 		add	r7, r7, #16
 289 0226 BD46     		mov	sp, r7
 290 0228 80BD     		pop	{r7, pc}
 291              		.cfi_endproc
 292              	.LFE111:
 294 022a 00BF     		.align	2
 295              		.global	RTC_StructInit
 296              		.thumb
 297              		.thumb_func
 299              	RTC_StructInit:
 300              	.LFB112:
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 301              		.loc 1 492 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 8
 304              		@ frame_needed = 1, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 306 022c 80B4     		push	{r7}
 307              	.LCFI6:
 308              		.cfi_def_cfa_offset 4
 309              		.cfi_offset 7, -4
 310 022e 83B0     		sub	sp, sp, #12
 311              	.LCFI7:
 312              		.cfi_def_cfa_offset 16
 313 0230 00AF     		add	r7, sp, #0
 314              	.LCFI8:
 315              		.cfi_def_cfa_register 7
 316 0232 7860     		str	r0, [r7, #4]
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 317              		.loc 1 494 0
 318 0234 7B68     		ldr	r3, [r7, #4]
 319 0236 4FF00002 		mov	r2, #0
 320 023a 1A60     		str	r2, [r3, #0]
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 321              		.loc 1 497 0
 322 023c 7B68     		ldr	r3, [r7, #4]
 323 023e 4FF07F02 		mov	r2, #127
 324 0242 5A60     		str	r2, [r3, #4]
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 325              		.loc 1 500 0
 326 0244 7B68     		ldr	r3, [r7, #4]
 327 0246 4FF0FF02 		mov	r2, #255
 328 024a 9A60     		str	r2, [r3, #8]
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 329              		.loc 1 501 0
 330 024c 07F10C07 		add	r7, r7, #12
 331 0250 BD46     		mov	sp, r7
 332 0252 80BC     		pop	{r7}
 333 0254 7047     		bx	lr
 334              		.cfi_endproc
 335              	.LFE112:
 337 0256 00BF     		.align	2
 338              		.global	RTC_WriteProtectionCmd
 339              		.thumb
 340              		.thumb_func
 342              	RTC_WriteProtectionCmd:
 343              	.LFB113:
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 344              		.loc 1 514 0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 8
 347              		@ frame_needed = 1, uses_anonymous_args = 0
 348              		@ link register save eliminated.
 349 0258 80B4     		push	{r7}
 350              	.LCFI9:
 351              		.cfi_def_cfa_offset 4
 352              		.cfi_offset 7, -4
 353 025a 83B0     		sub	sp, sp, #12
 354              	.LCFI10:
 355              		.cfi_def_cfa_offset 16
 356 025c 00AF     		add	r7, sp, #0
 357              	.LCFI11:
 358              		.cfi_def_cfa_register 7
 359 025e 0346     		mov	r3, r0
 360 0260 FB71     		strb	r3, [r7, #7]
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 361              		.loc 1 518 0
 362 0262 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 363 0264 002B     		cmp	r3, #0
 364 0266 07D0     		beq	.L13
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 365              		.loc 1 521 0
 366 0268 4FF42053 		mov	r3, #10240
 367 026c C4F20003 		movt	r3, 16384
 368 0270 4FF0FF02 		mov	r2, #255
 369 0274 5A62     		str	r2, [r3, #36]
 370 0276 0DE0     		b	.L12
 371              	.L13:
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 372              		.loc 1 526 0
 373 0278 4FF42053 		mov	r3, #10240
 374 027c C4F20003 		movt	r3, 16384
 375 0280 4FF0CA02 		mov	r2, #202
 376 0284 5A62     		str	r2, [r3, #36]
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 377              		.loc 1 527 0
 378 0286 4FF42053 		mov	r3, #10240
 379 028a C4F20003 		movt	r3, 16384
 380 028e 4FF05302 		mov	r2, #83
 381 0292 5A62     		str	r2, [r3, #36]
 382              	.L12:
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 383              		.loc 1 529 0
 384 0294 07F10C07 		add	r7, r7, #12
 385 0298 BD46     		mov	sp, r7
 386 029a 80BC     		pop	{r7}
 387 029c 7047     		bx	lr
 388              		.cfi_endproc
 389              	.LFE113:
 391 029e 00BF     		.align	2
 392              		.global	RTC_EnterInitMode
 393              		.thumb
 394              		.thumb_func
 396              	RTC_EnterInitMode:
 397              	.LFB114:
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 398              		.loc 1 541 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 16
 401              		@ frame_needed = 1, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 403 02a0 80B4     		push	{r7}
 404              	.LCFI12:
 405              		.cfi_def_cfa_offset 4
 406              		.cfi_offset 7, -4
 407 02a2 85B0     		sub	sp, sp, #20
 408              	.LCFI13:
 409              		.cfi_def_cfa_offset 24
 410 02a4 00AF     		add	r7, sp, #0
 411              	.LCFI14:
 412              		.cfi_def_cfa_register 7
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 413              		.loc 1 542 0
 414 02a6 4FF00003 		mov	r3, #0
 415 02aa 7B60     		str	r3, [r7, #4]
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 416              		.loc 1 543 0
 417 02ac 4FF00003 		mov	r3, #0
 418 02b0 FB73     		strb	r3, [r7, #15]
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 419              		.loc 1 544 0
 420 02b2 4FF00003 		mov	r3, #0
 421 02b6 BB60     		str	r3, [r7, #8]
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 422              		.loc 1 547 0
 423 02b8 4FF42053 		mov	r3, #10240
 424 02bc C4F20003 		movt	r3, 16384
 425 02c0 DB68     		ldr	r3, [r3, #12]
 426 02c2 03F04003 		and	r3, r3, #64
 427 02c6 002B     		cmp	r3, #0
 428 02c8 2AD1     		bne	.L16
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 429              		.loc 1 550 0
 430 02ca 4FF42053 		mov	r3, #10240
 431 02ce C4F20003 		movt	r3, 16384
 432 02d2 4FF0FF32 		mov	r2, #-1
 433 02d6 DA60     		str	r2, [r3, #12]
 434              	.L18:
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 435              		.loc 1 555 0 discriminator 1
 436 02d8 4FF42053 		mov	r3, #10240
 437 02dc C4F20003 		movt	r3, 16384
 438 02e0 DB68     		ldr	r3, [r3, #12]
 439 02e2 03F04003 		and	r3, r3, #64
 440 02e6 BB60     		str	r3, [r7, #8]
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 441              		.loc 1 556 0 discriminator 1
 442 02e8 7B68     		ldr	r3, [r7, #4]
 443 02ea 03F10103 		add	r3, r3, #1
 444 02ee 7B60     		str	r3, [r7, #4]
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 445              		.loc 1 557 0 discriminator 1
 446 02f0 7B68     		ldr	r3, [r7, #4]
 447 02f2 B3F5803F 		cmp	r3, #65536
 448 02f6 02D0     		beq	.L17
 449 02f8 BB68     		ldr	r3, [r7, #8]
 450 02fa 002B     		cmp	r3, #0
 451 02fc ECD0     		beq	.L18
 452              	.L17:
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 453              		.loc 1 559 0
 454 02fe 4FF42053 		mov	r3, #10240
 455 0302 C4F20003 		movt	r3, 16384
 456 0306 DB68     		ldr	r3, [r3, #12]
 457 0308 03F04003 		and	r3, r3, #64
 458 030c 002B     		cmp	r3, #0
 459 030e 03D0     		beq	.L19
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 460              		.loc 1 561 0
 461 0310 4FF00103 		mov	r3, #1
 462 0314 FB73     		strb	r3, [r7, #15]
 463 0316 06E0     		b	.L20
 464              	.L19:
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 465              		.loc 1 565 0
 466 0318 4FF00003 		mov	r3, #0
 467 031c FB73     		strb	r3, [r7, #15]
 468 031e 02E0     		b	.L20
 469              	.L16:
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 470              		.loc 1 570 0
 471 0320 4FF00103 		mov	r3, #1
 472 0324 FB73     		strb	r3, [r7, #15]
 473              	.L20:
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 474              		.loc 1 573 0
 475 0326 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 476              		.loc 1 574 0
 477 0328 1846     		mov	r0, r3
 478 032a 07F11407 		add	r7, r7, #20
 479 032e BD46     		mov	sp, r7
 480 0330 80BC     		pop	{r7}
 481 0332 7047     		bx	lr
 482              		.cfi_endproc
 483              	.LFE114:
 485              		.align	2
 486              		.global	RTC_ExitInitMode
 487              		.thumb
 488              		.thumb_func
 490              	RTC_ExitInitMode:
 491              	.LFB115:
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 492              		.loc 1 586 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 0
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496              		@ link register save eliminated.
 497 0334 80B4     		push	{r7}
 498              	.LCFI15:
 499              		.cfi_def_cfa_offset 4
 500              		.cfi_offset 7, -4
 501 0336 00AF     		add	r7, sp, #0
 502              	.LCFI16:
 503              		.cfi_def_cfa_register 7
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 504              		.loc 1 588 0
 505 0338 4FF42053 		mov	r3, #10240
 506 033c C4F20003 		movt	r3, 16384
 507 0340 4FF42052 		mov	r2, #10240
 508 0344 C4F20002 		movt	r2, 16384
 509 0348 D268     		ldr	r2, [r2, #12]
 510 034a 22F08002 		bic	r2, r2, #128
 511 034e DA60     		str	r2, [r3, #12]
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 512              		.loc 1 589 0
 513 0350 BD46     		mov	sp, r7
 514 0352 80BC     		pop	{r7}
 515 0354 7047     		bx	lr
 516              		.cfi_endproc
 517              	.LFE115:
 519 0356 00BF     		.align	2
 520              		.global	RTC_WaitForSynchro
 521              		.thumb
 522              		.thumb_func
 524              	RTC_WaitForSynchro:
 525              	.LFB116:
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 526              		.loc 1 608 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 16
 529              		@ frame_needed = 1, uses_anonymous_args = 0
 530              		@ link register save eliminated.
 531 0358 80B4     		push	{r7}
 532              	.LCFI17:
 533              		.cfi_def_cfa_offset 4
 534              		.cfi_offset 7, -4
 535 035a 85B0     		sub	sp, sp, #20
 536              	.LCFI18:
 537              		.cfi_def_cfa_offset 24
 538 035c 00AF     		add	r7, sp, #0
 539              	.LCFI19:
 540              		.cfi_def_cfa_register 7
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 541              		.loc 1 609 0
 542 035e 4FF00003 		mov	r3, #0
 543 0362 7B60     		str	r3, [r7, #4]
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 544              		.loc 1 610 0
 545 0364 4FF00003 		mov	r3, #0
 546 0368 FB73     		strb	r3, [r7, #15]
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 547              		.loc 1 611 0
 548 036a 4FF00003 		mov	r3, #0
 549 036e BB60     		str	r3, [r7, #8]
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 550              		.loc 1 614 0
 551 0370 4FF42053 		mov	r3, #10240
 552 0374 C4F20003 		movt	r3, 16384
 553 0378 4FF0CA02 		mov	r2, #202
 554 037c 5A62     		str	r2, [r3, #36]
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 555              		.loc 1 615 0
 556 037e 4FF42053 		mov	r3, #10240
 557 0382 C4F20003 		movt	r3, 16384
 558 0386 4FF05302 		mov	r2, #83
 559 038a 5A62     		str	r2, [r3, #36]
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 560              		.loc 1 618 0
 561 038c 4FF42053 		mov	r3, #10240
 562 0390 C4F20003 		movt	r3, 16384
 563 0394 4FF42052 		mov	r2, #10240
 564 0398 C4F20002 		movt	r2, 16384
 565 039c D268     		ldr	r2, [r2, #12]
 566 039e 22F0A002 		bic	r2, r2, #160
 567 03a2 DA60     		str	r2, [r3, #12]
 568              	.L24:
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 569              		.loc 1 623 0 discriminator 1
 570 03a4 4FF42053 		mov	r3, #10240
 571 03a8 C4F20003 		movt	r3, 16384
 572 03ac DB68     		ldr	r3, [r3, #12]
 573 03ae 03F02003 		and	r3, r3, #32
 574 03b2 BB60     		str	r3, [r7, #8]
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 575              		.loc 1 624 0 discriminator 1
 576 03b4 7B68     		ldr	r3, [r7, #4]
 577 03b6 03F10103 		add	r3, r3, #1
 578 03ba 7B60     		str	r3, [r7, #4]
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 579              		.loc 1 625 0 discriminator 1
 580 03bc 7B68     		ldr	r3, [r7, #4]
 581 03be B3F5003F 		cmp	r3, #131072
 582 03c2 02D0     		beq	.L23
 583 03c4 BB68     		ldr	r3, [r7, #8]
 584 03c6 002B     		cmp	r3, #0
 585 03c8 ECD0     		beq	.L24
 586              	.L23:
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 587              		.loc 1 627 0
 588 03ca 4FF42053 		mov	r3, #10240
 589 03ce C4F20003 		movt	r3, 16384
 590 03d2 DB68     		ldr	r3, [r3, #12]
 591 03d4 03F02003 		and	r3, r3, #32
 592 03d8 002B     		cmp	r3, #0
 593 03da 03D0     		beq	.L25
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 594              		.loc 1 629 0
 595 03dc 4FF00103 		mov	r3, #1
 596 03e0 FB73     		strb	r3, [r7, #15]
 597 03e2 02E0     		b	.L26
 598              	.L25:
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 599              		.loc 1 633 0
 600 03e4 4FF00003 		mov	r3, #0
 601 03e8 FB73     		strb	r3, [r7, #15]
 602              	.L26:
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 603              		.loc 1 637 0
 604 03ea 4FF42053 		mov	r3, #10240
 605 03ee C4F20003 		movt	r3, 16384
 606 03f2 4FF0FF02 		mov	r2, #255
 607 03f6 5A62     		str	r2, [r3, #36]
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 608              		.loc 1 639 0
 609 03f8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 610              		.loc 1 640 0
 611 03fa 1846     		mov	r0, r3
 612 03fc 07F11407 		add	r7, r7, #20
 613 0400 BD46     		mov	sp, r7
 614 0402 80BC     		pop	{r7}
 615 0404 7047     		bx	lr
 616              		.cfi_endproc
 617              	.LFE116:
 619 0406 00BF     		.align	2
 620              		.global	RTC_RefClockCmd
 621              		.thumb
 622              		.thumb_func
 624              	RTC_RefClockCmd:
 625              	.LFB117:
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 626              		.loc 1 651 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 16
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630 0408 80B5     		push	{r7, lr}
 631              	.LCFI20:
 632              		.cfi_def_cfa_offset 8
 633              		.cfi_offset 14, -4
 634              		.cfi_offset 7, -8
 635 040a 84B0     		sub	sp, sp, #16
 636              	.LCFI21:
 637              		.cfi_def_cfa_offset 24
 638 040c 00AF     		add	r7, sp, #0
 639              	.LCFI22:
 640              		.cfi_def_cfa_register 7
 641 040e 0346     		mov	r3, r0
 642 0410 FB71     		strb	r3, [r7, #7]
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 643              		.loc 1 652 0
 644 0412 4FF00003 		mov	r3, #0
 645 0416 FB73     		strb	r3, [r7, #15]
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 646              		.loc 1 658 0
 647 0418 4FF42053 		mov	r3, #10240
 648 041c C4F20003 		movt	r3, 16384
 649 0420 4FF0CA02 		mov	r2, #202
 650 0424 5A62     		str	r2, [r3, #36]
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 651              		.loc 1 659 0
 652 0426 4FF42053 		mov	r3, #10240
 653 042a C4F20003 		movt	r3, 16384
 654 042e 4FF05302 		mov	r2, #83
 655 0432 5A62     		str	r2, [r3, #36]
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 656              		.loc 1 662 0
 657 0434 FFF7FEFF 		bl	RTC_EnterInitMode
 658 0438 0346     		mov	r3, r0
 659 043a 002B     		cmp	r3, #0
 660 043c 03D1     		bne	.L28
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 661              		.loc 1 664 0
 662 043e 4FF00003 		mov	r3, #0
 663 0442 FB73     		strb	r3, [r7, #15]
 664 0444 20E0     		b	.L29
 665              	.L28:
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 666              		.loc 1 668 0
 667 0446 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 668 0448 002B     		cmp	r3, #0
 669 044a 0CD0     		beq	.L30
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 670              		.loc 1 671 0
 671 044c 4FF42053 		mov	r3, #10240
 672 0450 C4F20003 		movt	r3, 16384
 673 0454 4FF42052 		mov	r2, #10240
 674 0458 C4F20002 		movt	r2, 16384
 675 045c 9268     		ldr	r2, [r2, #8]
 676 045e 42F01002 		orr	r2, r2, #16
 677 0462 9A60     		str	r2, [r3, #8]
 678 0464 0BE0     		b	.L31
 679              	.L30:
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 680              		.loc 1 676 0
 681 0466 4FF42053 		mov	r3, #10240
 682 046a C4F20003 		movt	r3, 16384
 683 046e 4FF42052 		mov	r2, #10240
 684 0472 C4F20002 		movt	r2, 16384
 685 0476 9268     		ldr	r2, [r2, #8]
 686 0478 22F01002 		bic	r2, r2, #16
 687 047c 9A60     		str	r2, [r3, #8]
 688              	.L31:
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 689              		.loc 1 679 0
 690 047e FFF7FEFF 		bl	RTC_ExitInitMode
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 691              		.loc 1 681 0
 692 0482 4FF00103 		mov	r3, #1
 693 0486 FB73     		strb	r3, [r7, #15]
 694              	.L29:
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 695              		.loc 1 685 0
 696 0488 4FF42053 		mov	r3, #10240
 697 048c C4F20003 		movt	r3, 16384
 698 0490 4FF0FF02 		mov	r2, #255
 699 0494 5A62     		str	r2, [r3, #36]
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 700              		.loc 1 687 0
 701 0496 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 702              		.loc 1 688 0
 703 0498 1846     		mov	r0, r3
 704 049a 07F11007 		add	r7, r7, #16
 705 049e BD46     		mov	sp, r7
 706 04a0 80BD     		pop	{r7, pc}
 707              		.cfi_endproc
 708              	.LFE117:
 710 04a2 00BF     		.align	2
 711              		.global	RTC_BypassShadowCmd
 712              		.thumb
 713              		.thumb_func
 715              	RTC_BypassShadowCmd:
 716              	.LFB118:
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 717              		.loc 1 699 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 8
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721              		@ link register save eliminated.
 722 04a4 80B4     		push	{r7}
 723              	.LCFI23:
 724              		.cfi_def_cfa_offset 4
 725              		.cfi_offset 7, -4
 726 04a6 83B0     		sub	sp, sp, #12
 727              	.LCFI24:
 728              		.cfi_def_cfa_offset 16
 729 04a8 00AF     		add	r7, sp, #0
 730              	.LCFI25:
 731              		.cfi_def_cfa_register 7
 732 04aa 0346     		mov	r3, r0
 733 04ac FB71     		strb	r3, [r7, #7]
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 734              		.loc 1 704 0
 735 04ae 4FF42053 		mov	r3, #10240
 736 04b2 C4F20003 		movt	r3, 16384
 737 04b6 4FF0CA02 		mov	r2, #202
 738 04ba 5A62     		str	r2, [r3, #36]
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 739              		.loc 1 705 0
 740 04bc 4FF42053 		mov	r3, #10240
 741 04c0 C4F20003 		movt	r3, 16384
 742 04c4 4FF05302 		mov	r2, #83
 743 04c8 5A62     		str	r2, [r3, #36]
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 744              		.loc 1 707 0
 745 04ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 746 04cc 002B     		cmp	r3, #0
 747 04ce 0CD0     		beq	.L33
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 748              		.loc 1 710 0
 749 04d0 4FF42053 		mov	r3, #10240
 750 04d4 C4F20003 		movt	r3, 16384
 751 04d8 4FF42052 		mov	r2, #10240
 752 04dc C4F20002 		movt	r2, 16384
 753 04e0 9268     		ldr	r2, [r2, #8]
 754 04e2 42F02002 		orr	r2, r2, #32
 755 04e6 9A60     		str	r2, [r3, #8]
 756 04e8 0BE0     		b	.L34
 757              	.L33:
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 758              		.loc 1 715 0
 759 04ea 4FF42053 		mov	r3, #10240
 760 04ee C4F20003 		movt	r3, 16384
 761 04f2 4FF42052 		mov	r2, #10240
 762 04f6 C4F20002 		movt	r2, 16384
 763 04fa 9268     		ldr	r2, [r2, #8]
 764 04fc 02F0DF02 		and	r2, r2, #223
 765 0500 9A60     		str	r2, [r3, #8]
 766              	.L34:
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 767              		.loc 1 719 0
 768 0502 4FF42053 		mov	r3, #10240
 769 0506 C4F20003 		movt	r3, 16384
 770 050a 4FF0FF02 		mov	r2, #255
 771 050e 5A62     		str	r2, [r3, #36]
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 772              		.loc 1 720 0
 773 0510 07F10C07 		add	r7, r7, #12
 774 0514 BD46     		mov	sp, r7
 775 0516 80BC     		pop	{r7}
 776 0518 7047     		bx	lr
 777              		.cfi_endproc
 778              	.LFE118:
 780 051a 00BF     		.align	2
 781              		.global	RTC_SetTime
 782              		.thumb
 783              		.thumb_func
 785              	RTC_SetTime:
 786              	.LFB119:
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 787              		.loc 1 754 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 16
 790              		@ frame_needed = 1, uses_anonymous_args = 0
 791 051c 90B5     		push	{r4, r7, lr}
 792              	.LCFI26:
 793              		.cfi_def_cfa_offset 12
 794              		.cfi_offset 14, -4
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 4, -12
 797 051e 85B0     		sub	sp, sp, #20
 798              	.LCFI27:
 799              		.cfi_def_cfa_offset 32
 800 0520 00AF     		add	r7, sp, #0
 801              	.LCFI28:
 802              		.cfi_def_cfa_register 7
 803 0522 7860     		str	r0, [r7, #4]
 804 0524 3960     		str	r1, [r7, #0]
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 805              		.loc 1 755 0
 806 0526 4FF00003 		mov	r3, #0
 807 052a FB60     		str	r3, [r7, #12]
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 808              		.loc 1 756 0
 809 052c 4FF00003 		mov	r3, #0
 810 0530 FB72     		strb	r3, [r7, #11]
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 811              		.loc 1 761 0
 812 0532 7B68     		ldr	r3, [r7, #4]
 813 0534 002B     		cmp	r3, #0
 814 0536 0DD1     		bne	.L36
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 815              		.loc 1 763 0
 816 0538 4FF42053 		mov	r3, #10240
 817 053c C4F20003 		movt	r3, 16384
 818 0540 9B68     		ldr	r3, [r3, #8]
 819 0542 03F04003 		and	r3, r3, #64
 820 0546 002B     		cmp	r3, #0
 821 0548 19D1     		bne	.L37
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 822              		.loc 1 770 0
 823 054a 3B68     		ldr	r3, [r7, #0]
 824 054c 4FF00002 		mov	r2, #0
 825 0550 DA70     		strb	r2, [r3, #3]
 826 0552 14E0     		b	.L37
 827              	.L36:
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 828              		.loc 1 778 0
 829 0554 4FF42053 		mov	r3, #10240
 830 0558 C4F20003 		movt	r3, 16384
 831 055c 9B68     		ldr	r3, [r3, #8]
 832 055e 03F04003 		and	r3, r3, #64
 833 0562 002B     		cmp	r3, #0
 834 0564 07D0     		beq	.L38
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 835              		.loc 1 780 0
 836 0566 3B68     		ldr	r3, [r7, #0]
 837 0568 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 838 056a 1846     		mov	r0, r3
 839 056c 01F01EFB 		bl	RTC_Bcd2ToByte
 840 0570 0346     		mov	r3, r0
 841 0572 FB60     		str	r3, [r7, #12]
 842 0574 03E0     		b	.L37
 843              	.L38:
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 844              		.loc 1 786 0
 845 0576 3B68     		ldr	r3, [r7, #0]
 846 0578 4FF00002 		mov	r2, #0
 847 057c DA70     		strb	r2, [r3, #3]
 848              	.L37:
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 849              		.loc 1 794 0
 850 057e 7B68     		ldr	r3, [r7, #4]
 851 0580 002B     		cmp	r3, #0
 852 0582 12D0     		beq	.L39
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 853              		.loc 1 796 0
 854 0584 3B68     		ldr	r3, [r7, #0]
 855 0586 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 856 0588 4FEA0342 		lsl	r2, r3, #16
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 857              		.loc 1 797 0
 858 058c 3B68     		ldr	r3, [r7, #0]
 859 058e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 860 0590 4FEA0323 		lsl	r3, r3, #8
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 861              		.loc 1 796 0
 862 0594 1A43     		orrs	r2, r2, r3
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 863              		.loc 1 798 0
 864 0596 3B68     		ldr	r3, [r7, #0]
 865 0598 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 866              		.loc 1 797 0
 867 059a 1A43     		orrs	r2, r2, r3
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 868              		.loc 1 799 0
 869 059c 3B68     		ldr	r3, [r7, #0]
 870 059e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 871 05a0 4FEA0343 		lsl	r3, r3, #16
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 872              		.loc 1 796 0
 873 05a4 1343     		orrs	r3, r3, r2
 874 05a6 FB60     		str	r3, [r7, #12]
 875 05a8 1EE0     		b	.L40
 876              	.L39:
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 877              		.loc 1 803 0
 878 05aa 3B68     		ldr	r3, [r7, #0]
 879 05ac 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 880 05ae 1846     		mov	r0, r3
 881 05b0 01F0DAFA 		bl	RTC_ByteToBcd2
 882 05b4 0346     		mov	r3, r0
 883 05b6 4FEA0344 		lsl	r4, r3, #16
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 884              		.loc 1 804 0
 885 05ba 3B68     		ldr	r3, [r7, #0]
 886 05bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 887 05be 1846     		mov	r0, r3
 888 05c0 01F0D2FA 		bl	RTC_ByteToBcd2
 889 05c4 0346     		mov	r3, r0
 890 05c6 4FEA0323 		lsl	r3, r3, #8
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 891              		.loc 1 803 0
 892 05ca 1C43     		orrs	r4, r4, r3
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 893              		.loc 1 805 0
 894 05cc 3B68     		ldr	r3, [r7, #0]
 895 05ce 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 896 05d0 1846     		mov	r0, r3
 897 05d2 01F0C9FA 		bl	RTC_ByteToBcd2
 898 05d6 0346     		mov	r3, r0
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 899              		.loc 1 804 0
 900 05d8 44EA0302 		orr	r2, r4, r3
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 901              		.loc 1 806 0
 902 05dc 3B68     		ldr	r3, [r7, #0]
 903 05de DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 904 05e0 4FEA0343 		lsl	r3, r3, #16
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 905              		.loc 1 803 0
 906 05e4 1343     		orrs	r3, r3, r2
 907 05e6 FB60     		str	r3, [r7, #12]
 908              	.L40:
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 909              		.loc 1 810 0
 910 05e8 4FF42053 		mov	r3, #10240
 911 05ec C4F20003 		movt	r3, 16384
 912 05f0 4FF0CA02 		mov	r2, #202
 913 05f4 5A62     		str	r2, [r3, #36]
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 914              		.loc 1 811 0
 915 05f6 4FF42053 		mov	r3, #10240
 916 05fa C4F20003 		movt	r3, 16384
 917 05fe 4FF05302 		mov	r2, #83
 918 0602 5A62     		str	r2, [r3, #36]
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 919              		.loc 1 814 0
 920 0604 FFF7FEFF 		bl	RTC_EnterInitMode
 921 0608 0346     		mov	r3, r0
 922 060a 002B     		cmp	r3, #0
 923 060c 03D1     		bne	.L41
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 924              		.loc 1 816 0
 925 060e 4FF00003 		mov	r3, #0
 926 0612 FB72     		strb	r3, [r7, #11]
 927 0614 18E0     		b	.L42
 928              	.L41:
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 929              		.loc 1 821 0
 930 0616 4FF42052 		mov	r2, #10240
 931 061a C4F20002 		movt	r2, 16384
 932 061e F968     		ldr	r1, [r7, #12]
 933 0620 47F67F73 		movw	r3, #32639
 934 0624 C0F27F03 		movt	r3, 127
 935 0628 0B40     		ands	r3, r3, r1
 936 062a 1360     		str	r3, [r2, #0]
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 937              		.loc 1 824 0
 938 062c FFF7FEFF 		bl	RTC_ExitInitMode
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 939              		.loc 1 826 0
 940 0630 FFF7FEFF 		bl	RTC_WaitForSynchro
 941 0634 0346     		mov	r3, r0
 942 0636 002B     		cmp	r3, #0
 943 0638 03D1     		bne	.L43
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 944              		.loc 1 828 0
 945 063a 4FF00003 		mov	r3, #0
 946 063e FB72     		strb	r3, [r7, #11]
 947 0640 02E0     		b	.L42
 948              	.L43:
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 949              		.loc 1 832 0
 950 0642 4FF00103 		mov	r3, #1
 951 0646 FB72     		strb	r3, [r7, #11]
 952              	.L42:
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 953              		.loc 1 837 0
 954 0648 4FF42053 		mov	r3, #10240
 955 064c C4F20003 		movt	r3, 16384
 956 0650 4FF0FF02 		mov	r2, #255
 957 0654 5A62     		str	r2, [r3, #36]
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 958              		.loc 1 839 0
 959 0656 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 960              		.loc 1 840 0
 961 0658 1846     		mov	r0, r3
 962 065a 07F11407 		add	r7, r7, #20
 963 065e BD46     		mov	sp, r7
 964 0660 90BD     		pop	{r4, r7, pc}
 965              		.cfi_endproc
 966              	.LFE119:
 968 0662 00BF     		.align	2
 969              		.global	RTC_TimeStructInit
 970              		.thumb
 971              		.thumb_func
 973              	RTC_TimeStructInit:
 974              	.LFB120:
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 975              		.loc 1 850 0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 8
 978              		@ frame_needed = 1, uses_anonymous_args = 0
 979              		@ link register save eliminated.
 980 0664 80B4     		push	{r7}
 981              	.LCFI29:
 982              		.cfi_def_cfa_offset 4
 983              		.cfi_offset 7, -4
 984 0666 83B0     		sub	sp, sp, #12
 985              	.LCFI30:
 986              		.cfi_def_cfa_offset 16
 987 0668 00AF     		add	r7, sp, #0
 988              	.LCFI31:
 989              		.cfi_def_cfa_register 7
 990 066a 7860     		str	r0, [r7, #4]
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 991              		.loc 1 852 0
 992 066c 7B68     		ldr	r3, [r7, #4]
 993 066e 4FF00002 		mov	r2, #0
 994 0672 DA70     		strb	r2, [r3, #3]
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 995              		.loc 1 853 0
 996 0674 7B68     		ldr	r3, [r7, #4]
 997 0676 4FF00002 		mov	r2, #0
 998 067a 1A70     		strb	r2, [r3, #0]
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 999              		.loc 1 854 0
 1000 067c 7B68     		ldr	r3, [r7, #4]
 1001 067e 4FF00002 		mov	r2, #0
 1002 0682 5A70     		strb	r2, [r3, #1]
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1003              		.loc 1 855 0
 1004 0684 7B68     		ldr	r3, [r7, #4]
 1005 0686 4FF00002 		mov	r2, #0
 1006 068a 9A70     		strb	r2, [r3, #2]
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1007              		.loc 1 856 0
 1008 068c 07F10C07 		add	r7, r7, #12
 1009 0690 BD46     		mov	sp, r7
 1010 0692 80BC     		pop	{r7}
 1011 0694 7047     		bx	lr
 1012              		.cfi_endproc
 1013              	.LFE120:
 1015 0696 00BF     		.align	2
 1016              		.global	RTC_GetTime
 1017              		.thumb
 1018              		.thumb_func
 1020              	RTC_GetTime:
 1021              	.LFB121:
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1022              		.loc 1 869 0
 1023              		.cfi_startproc
 1024              		@ args = 0, pretend = 0, frame = 16
 1025              		@ frame_needed = 1, uses_anonymous_args = 0
 1026 0698 80B5     		push	{r7, lr}
 1027              	.LCFI32:
 1028              		.cfi_def_cfa_offset 8
 1029              		.cfi_offset 14, -4
 1030              		.cfi_offset 7, -8
 1031 069a 84B0     		sub	sp, sp, #16
 1032              	.LCFI33:
 1033              		.cfi_def_cfa_offset 24
 1034 069c 00AF     		add	r7, sp, #0
 1035              	.LCFI34:
 1036              		.cfi_def_cfa_register 7
 1037 069e 7860     		str	r0, [r7, #4]
 1038 06a0 3960     		str	r1, [r7, #0]
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1039              		.loc 1 870 0
 1040 06a2 4FF00003 		mov	r3, #0
 1041 06a6 FB60     		str	r3, [r7, #12]
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1042              		.loc 1 876 0
 1043 06a8 4FF42053 		mov	r3, #10240
 1044 06ac C4F20003 		movt	r3, 16384
 1045 06b0 1A68     		ldr	r2, [r3, #0]
 1046 06b2 47F67F73 		movw	r3, #32639
 1047 06b6 C0F27F03 		movt	r3, 127
 1048 06ba 1340     		ands	r3, r3, r2
 1049 06bc FB60     		str	r3, [r7, #12]
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1050              		.loc 1 879 0
 1051 06be FB68     		ldr	r3, [r7, #12]
 1052 06c0 03F47C13 		and	r3, r3, #4128768
 1053 06c4 4FEA1343 		lsr	r3, r3, #16
 1054 06c8 DAB2     		uxtb	r2, r3
 1055 06ca 3B68     		ldr	r3, [r7, #0]
 1056 06cc 1A70     		strb	r2, [r3, #0]
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1057              		.loc 1 880 0
 1058 06ce FB68     		ldr	r3, [r7, #12]
 1059 06d0 03F4FE43 		and	r3, r3, #32512
 1060 06d4 4FEA1323 		lsr	r3, r3, #8
 1061 06d8 DAB2     		uxtb	r2, r3
 1062 06da 3B68     		ldr	r3, [r7, #0]
 1063 06dc 5A70     		strb	r2, [r3, #1]
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1064              		.loc 1 881 0
 1065 06de FB68     		ldr	r3, [r7, #12]
 1066 06e0 DBB2     		uxtb	r3, r3
 1067 06e2 03F07F03 		and	r3, r3, #127
 1068 06e6 DAB2     		uxtb	r2, r3
 1069 06e8 3B68     		ldr	r3, [r7, #0]
 1070 06ea 9A70     		strb	r2, [r3, #2]
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1071              		.loc 1 882 0
 1072 06ec FB68     		ldr	r3, [r7, #12]
 1073 06ee 03F48003 		and	r3, r3, #4194304
 1074 06f2 4FEA1343 		lsr	r3, r3, #16
 1075 06f6 DAB2     		uxtb	r2, r3
 1076 06f8 3B68     		ldr	r3, [r7, #0]
 1077 06fa DA70     		strb	r2, [r3, #3]
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1078              		.loc 1 885 0
 1079 06fc 7B68     		ldr	r3, [r7, #4]
 1080 06fe 002B     		cmp	r3, #0
 1081 0700 1AD1     		bne	.L45
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1082              		.loc 1 888 0
 1083 0702 3B68     		ldr	r3, [r7, #0]
 1084 0704 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1085 0706 1846     		mov	r0, r3
 1086 0708 01F050FA 		bl	RTC_Bcd2ToByte
 1087 070c 0346     		mov	r3, r0
 1088 070e 1A46     		mov	r2, r3
 1089 0710 3B68     		ldr	r3, [r7, #0]
 1090 0712 1A70     		strb	r2, [r3, #0]
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1091              		.loc 1 889 0
 1092 0714 3B68     		ldr	r3, [r7, #0]
 1093 0716 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1094 0718 1846     		mov	r0, r3
 1095 071a 01F047FA 		bl	RTC_Bcd2ToByte
 1096 071e 0346     		mov	r3, r0
 1097 0720 1A46     		mov	r2, r3
 1098 0722 3B68     		ldr	r3, [r7, #0]
 1099 0724 5A70     		strb	r2, [r3, #1]
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1100              		.loc 1 890 0
 1101 0726 3B68     		ldr	r3, [r7, #0]
 1102 0728 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1103 072a 1846     		mov	r0, r3
 1104 072c 01F03EFA 		bl	RTC_Bcd2ToByte
 1105 0730 0346     		mov	r3, r0
 1106 0732 1A46     		mov	r2, r3
 1107 0734 3B68     		ldr	r3, [r7, #0]
 1108 0736 9A70     		strb	r2, [r3, #2]
 1109              	.L45:
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1110              		.loc 1 892 0
 1111 0738 07F11007 		add	r7, r7, #16
 1112 073c BD46     		mov	sp, r7
 1113 073e 80BD     		pop	{r7, pc}
 1114              		.cfi_endproc
 1115              	.LFE121:
 1117              		.align	2
 1118              		.global	RTC_GetSubSecond
 1119              		.thumb
 1120              		.thumb_func
 1122              	RTC_GetSubSecond:
 1123              	.LFB122:
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1124              		.loc 1 902 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 8
 1127              		@ frame_needed = 1, uses_anonymous_args = 0
 1128              		@ link register save eliminated.
 1129 0740 80B4     		push	{r7}
 1130              	.LCFI35:
 1131              		.cfi_def_cfa_offset 4
 1132              		.cfi_offset 7, -4
 1133 0742 83B0     		sub	sp, sp, #12
 1134              	.LCFI36:
 1135              		.cfi_def_cfa_offset 16
 1136 0744 00AF     		add	r7, sp, #0
 1137              	.LCFI37:
 1138              		.cfi_def_cfa_register 7
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1139              		.loc 1 903 0
 1140 0746 4FF00003 		mov	r3, #0
 1141 074a 7B60     		str	r3, [r7, #4]
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1142              		.loc 1 906 0
 1143 074c 4FF42053 		mov	r3, #10240
 1144 0750 C4F20003 		movt	r3, 16384
 1145 0754 9B6A     		ldr	r3, [r3, #40]
 1146 0756 7B60     		str	r3, [r7, #4]
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1147              		.loc 1 909 0
 1148 0758 4FF42053 		mov	r3, #10240
 1149 075c C4F20003 		movt	r3, 16384
 1150 0760 5B68     		ldr	r3, [r3, #4]
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1151              		.loc 1 911 0
 1152 0762 7B68     		ldr	r3, [r7, #4]
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1153              		.loc 1 912 0
 1154 0764 1846     		mov	r0, r3
 1155 0766 07F10C07 		add	r7, r7, #12
 1156 076a BD46     		mov	sp, r7
 1157 076c 80BC     		pop	{r7}
 1158 076e 7047     		bx	lr
 1159              		.cfi_endproc
 1160              	.LFE122:
 1162              		.align	2
 1163              		.global	RTC_SetDate
 1164              		.thumb
 1165              		.thumb_func
 1167              	RTC_SetDate:
 1168              	.LFB123:
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1169              		.loc 1 927 0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 16
 1172              		@ frame_needed = 1, uses_anonymous_args = 0
 1173 0770 90B5     		push	{r4, r7, lr}
 1174              	.LCFI38:
 1175              		.cfi_def_cfa_offset 12
 1176              		.cfi_offset 14, -4
 1177              		.cfi_offset 7, -8
 1178              		.cfi_offset 4, -12
 1179 0772 85B0     		sub	sp, sp, #20
 1180              	.LCFI39:
 1181              		.cfi_def_cfa_offset 32
 1182 0774 00AF     		add	r7, sp, #0
 1183              	.LCFI40:
 1184              		.cfi_def_cfa_register 7
 1185 0776 7860     		str	r0, [r7, #4]
 1186 0778 3960     		str	r1, [r7, #0]
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1187              		.loc 1 928 0
 1188 077a 4FF00003 		mov	r3, #0
 1189 077e FB60     		str	r3, [r7, #12]
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1190              		.loc 1 929 0
 1191 0780 4FF00003 		mov	r3, #0
 1192 0784 FB72     		strb	r3, [r7, #11]
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1193              		.loc 1 934 0
 1194 0786 7B68     		ldr	r3, [r7, #4]
 1195 0788 002B     		cmp	r3, #0
 1196 078a 0FD1     		bne	.L49
 1197              		.loc 1 934 0 is_stmt 0 discriminator 1
 1198 078c 3B68     		ldr	r3, [r7, #0]
 1199 078e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1200 0790 03F01003 		and	r3, r3, #16
 1201 0794 002B     		cmp	r3, #0
 1202 0796 09D0     		beq	.L49
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1203              		.loc 1 936 0 is_stmt 1
 1204 0798 3B68     		ldr	r3, [r7, #0]
 1205 079a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1206 079c 23F01003 		bic	r3, r3, #16
 1207 07a0 DBB2     		uxtb	r3, r3
 1208 07a2 03F10A03 		add	r3, r3, #10
 1209 07a6 DAB2     		uxtb	r2, r3
 1210 07a8 3B68     		ldr	r3, [r7, #0]
 1211 07aa 5A70     		strb	r2, [r3, #1]
 1212              	.L49:
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1213              		.loc 1 938 0
 1214 07ac 7B68     		ldr	r3, [r7, #4]
 1215 07ae 002B     		cmp	r3, #0
 1216 07b0 0DD0     		beq	.L50
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1217              		.loc 1 947 0
 1218 07b2 3B68     		ldr	r3, [r7, #0]
 1219 07b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1220 07b6 1846     		mov	r0, r3
 1221 07b8 01F0F8F9 		bl	RTC_Bcd2ToByte
 1222 07bc 0346     		mov	r3, r0
 1223 07be FB60     		str	r3, [r7, #12]
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1224              		.loc 1 949 0
 1225 07c0 3B68     		ldr	r3, [r7, #0]
 1226 07c2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1227 07c4 1846     		mov	r0, r3
 1228 07c6 01F0F1F9 		bl	RTC_Bcd2ToByte
 1229 07ca 0346     		mov	r3, r0
 1230 07cc FB60     		str	r3, [r7, #12]
 1231              	.L50:
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1232              		.loc 1 955 0
 1233 07ce 7B68     		ldr	r3, [r7, #4]
 1234 07d0 002B     		cmp	r3, #0
 1235 07d2 12D0     		beq	.L51
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1236              		.loc 1 957 0
 1237 07d4 3B68     		ldr	r3, [r7, #0]
 1238 07d6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1239 07d8 4FEA0342 		lsl	r2, r3, #16
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1240              		.loc 1 958 0
 1241 07dc 3B68     		ldr	r3, [r7, #0]
 1242 07de 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1243 07e0 4FEA0323 		lsl	r3, r3, #8
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1244              		.loc 1 957 0
 1245 07e4 1A43     		orrs	r2, r2, r3
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1246              		.loc 1 959 0
 1247 07e6 3B68     		ldr	r3, [r7, #0]
 1248 07e8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1249              		.loc 1 958 0
 1250 07ea 1A43     		orrs	r2, r2, r3
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1251              		.loc 1 960 0
 1252 07ec 3B68     		ldr	r3, [r7, #0]
 1253 07ee 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1254 07f0 4FEA4333 		lsl	r3, r3, #13
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1255              		.loc 1 957 0
 1256 07f4 1343     		orrs	r3, r3, r2
 1257 07f6 FB60     		str	r3, [r7, #12]
 1258 07f8 1EE0     		b	.L52
 1259              	.L51:
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1260              		.loc 1 964 0
 1261 07fa 3B68     		ldr	r3, [r7, #0]
 1262 07fc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1263 07fe 1846     		mov	r0, r3
 1264 0800 01F0B2F9 		bl	RTC_ByteToBcd2
 1265 0804 0346     		mov	r3, r0
 1266 0806 4FEA0344 		lsl	r4, r3, #16
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1267              		.loc 1 965 0
 1268 080a 3B68     		ldr	r3, [r7, #0]
 1269 080c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1270 080e 1846     		mov	r0, r3
 1271 0810 01F0AAF9 		bl	RTC_ByteToBcd2
 1272 0814 0346     		mov	r3, r0
 1273 0816 4FEA0323 		lsl	r3, r3, #8
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1274              		.loc 1 964 0
 1275 081a 1C43     		orrs	r4, r4, r3
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1276              		.loc 1 966 0
 1277 081c 3B68     		ldr	r3, [r7, #0]
 1278 081e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1279 0820 1846     		mov	r0, r3
 1280 0822 01F0A1F9 		bl	RTC_ByteToBcd2
 1281 0826 0346     		mov	r3, r0
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1282              		.loc 1 965 0
 1283 0828 44EA0302 		orr	r2, r4, r3
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1284              		.loc 1 967 0
 1285 082c 3B68     		ldr	r3, [r7, #0]
 1286 082e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1287 0830 4FEA4333 		lsl	r3, r3, #13
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1288              		.loc 1 964 0
 1289 0834 1343     		orrs	r3, r3, r2
 1290 0836 FB60     		str	r3, [r7, #12]
 1291              	.L52:
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1292              		.loc 1 971 0
 1293 0838 4FF42053 		mov	r3, #10240
 1294 083c C4F20003 		movt	r3, 16384
 1295 0840 4FF0CA02 		mov	r2, #202
 1296 0844 5A62     		str	r2, [r3, #36]
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1297              		.loc 1 972 0
 1298 0846 4FF42053 		mov	r3, #10240
 1299 084a C4F20003 		movt	r3, 16384
 1300 084e 4FF05302 		mov	r2, #83
 1301 0852 5A62     		str	r2, [r3, #36]
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1302              		.loc 1 975 0
 1303 0854 FFF7FEFF 		bl	RTC_EnterInitMode
 1304 0858 0346     		mov	r3, r0
 1305 085a 002B     		cmp	r3, #0
 1306 085c 03D1     		bne	.L53
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1307              		.loc 1 977 0
 1308 085e 4FF00003 		mov	r3, #0
 1309 0862 FB72     		strb	r3, [r7, #11]
 1310 0864 17E0     		b	.L54
 1311              	.L53:
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1312              		.loc 1 982 0
 1313 0866 4FF42053 		mov	r3, #10240
 1314 086a C4F20003 		movt	r3, 16384
 1315 086e FA68     		ldr	r2, [r7, #12]
 1316 0870 22F07F42 		bic	r2, r2, #-16777216
 1317 0874 22F0C002 		bic	r2, r2, #192
 1318 0878 5A60     		str	r2, [r3, #4]
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1319              		.loc 1 985 0
 1320 087a FFF7FEFF 		bl	RTC_ExitInitMode
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1321              		.loc 1 987 0
 1322 087e FFF7FEFF 		bl	RTC_WaitForSynchro
 1323 0882 0346     		mov	r3, r0
 1324 0884 002B     		cmp	r3, #0
 1325 0886 03D1     		bne	.L55
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1326              		.loc 1 989 0
 1327 0888 4FF00003 		mov	r3, #0
 1328 088c FB72     		strb	r3, [r7, #11]
 1329 088e 02E0     		b	.L54
 1330              	.L55:
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1331              		.loc 1 993 0
 1332 0890 4FF00103 		mov	r3, #1
 1333 0894 FB72     		strb	r3, [r7, #11]
 1334              	.L54:
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1335              		.loc 1 997 0
 1336 0896 4FF42053 		mov	r3, #10240
 1337 089a C4F20003 		movt	r3, 16384
 1338 089e 4FF0FF02 		mov	r2, #255
 1339 08a2 5A62     		str	r2, [r3, #36]
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1340              		.loc 1 999 0
 1341 08a4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1342              		.loc 1 1000 0
 1343 08a6 1846     		mov	r0, r3
 1344 08a8 07F11407 		add	r7, r7, #20
 1345 08ac BD46     		mov	sp, r7
 1346 08ae 90BD     		pop	{r4, r7, pc}
 1347              		.cfi_endproc
 1348              	.LFE123:
 1350              		.align	2
 1351              		.global	RTC_DateStructInit
 1352              		.thumb
 1353              		.thumb_func
 1355              	RTC_DateStructInit:
 1356              	.LFB124:
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1357              		.loc 1 1010 0
 1358              		.cfi_startproc
 1359              		@ args = 0, pretend = 0, frame = 8
 1360              		@ frame_needed = 1, uses_anonymous_args = 0
 1361              		@ link register save eliminated.
 1362 08b0 80B4     		push	{r7}
 1363              	.LCFI41:
 1364              		.cfi_def_cfa_offset 4
 1365              		.cfi_offset 7, -4
 1366 08b2 83B0     		sub	sp, sp, #12
 1367              	.LCFI42:
 1368              		.cfi_def_cfa_offset 16
 1369 08b4 00AF     		add	r7, sp, #0
 1370              	.LCFI43:
 1371              		.cfi_def_cfa_register 7
 1372 08b6 7860     		str	r0, [r7, #4]
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1373              		.loc 1 1012 0
 1374 08b8 7B68     		ldr	r3, [r7, #4]
 1375 08ba 4FF00102 		mov	r2, #1
 1376 08be 1A70     		strb	r2, [r3, #0]
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1377              		.loc 1 1013 0
 1378 08c0 7B68     		ldr	r3, [r7, #4]
 1379 08c2 4FF00102 		mov	r2, #1
 1380 08c6 9A70     		strb	r2, [r3, #2]
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1381              		.loc 1 1014 0
 1382 08c8 7B68     		ldr	r3, [r7, #4]
 1383 08ca 4FF00102 		mov	r2, #1
 1384 08ce 5A70     		strb	r2, [r3, #1]
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1385              		.loc 1 1015 0
 1386 08d0 7B68     		ldr	r3, [r7, #4]
 1387 08d2 4FF00002 		mov	r2, #0
 1388 08d6 DA70     		strb	r2, [r3, #3]
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1389              		.loc 1 1016 0
 1390 08d8 07F10C07 		add	r7, r7, #12
 1391 08dc BD46     		mov	sp, r7
 1392 08de 80BC     		pop	{r7}
 1393 08e0 7047     		bx	lr
 1394              		.cfi_endproc
 1395              	.LFE124:
 1397 08e2 00BF     		.align	2
 1398              		.global	RTC_GetDate
 1399              		.thumb
 1400              		.thumb_func
 1402              	RTC_GetDate:
 1403              	.LFB125:
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1404              		.loc 1 1029 0
 1405              		.cfi_startproc
 1406              		@ args = 0, pretend = 0, frame = 16
 1407              		@ frame_needed = 1, uses_anonymous_args = 0
 1408 08e4 80B5     		push	{r7, lr}
 1409              	.LCFI44:
 1410              		.cfi_def_cfa_offset 8
 1411              		.cfi_offset 14, -4
 1412              		.cfi_offset 7, -8
 1413 08e6 84B0     		sub	sp, sp, #16
 1414              	.LCFI45:
 1415              		.cfi_def_cfa_offset 24
 1416 08e8 00AF     		add	r7, sp, #0
 1417              	.LCFI46:
 1418              		.cfi_def_cfa_register 7
 1419 08ea 7860     		str	r0, [r7, #4]
 1420 08ec 3960     		str	r1, [r7, #0]
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1421              		.loc 1 1030 0
 1422 08ee 4FF00003 		mov	r3, #0
 1423 08f2 FB60     		str	r3, [r7, #12]
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1424              		.loc 1 1036 0
 1425 08f4 4FF42053 		mov	r3, #10240
 1426 08f8 C4F20003 		movt	r3, 16384
 1427 08fc 5B68     		ldr	r3, [r3, #4]
 1428 08fe 23F07F43 		bic	r3, r3, #-16777216
 1429 0902 23F0C003 		bic	r3, r3, #192
 1430 0906 FB60     		str	r3, [r7, #12]
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1431              		.loc 1 1039 0
 1432 0908 FB68     		ldr	r3, [r7, #12]
 1433 090a 03F47F03 		and	r3, r3, #16711680
 1434 090e 4FEA1343 		lsr	r3, r3, #16
 1435 0912 DAB2     		uxtb	r2, r3
 1436 0914 3B68     		ldr	r3, [r7, #0]
 1437 0916 DA70     		strb	r2, [r3, #3]
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1438              		.loc 1 1040 0
 1439 0918 FB68     		ldr	r3, [r7, #12]
 1440 091a 03F4F853 		and	r3, r3, #7936
 1441 091e 4FEA1323 		lsr	r3, r3, #8
 1442 0922 DAB2     		uxtb	r2, r3
 1443 0924 3B68     		ldr	r3, [r7, #0]
 1444 0926 5A70     		strb	r2, [r3, #1]
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1445              		.loc 1 1041 0
 1446 0928 FB68     		ldr	r3, [r7, #12]
 1447 092a DBB2     		uxtb	r3, r3
 1448 092c 03F03F03 		and	r3, r3, #63
 1449 0930 DAB2     		uxtb	r2, r3
 1450 0932 3B68     		ldr	r3, [r7, #0]
 1451 0934 9A70     		strb	r2, [r3, #2]
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1452              		.loc 1 1042 0
 1453 0936 FB68     		ldr	r3, [r7, #12]
 1454 0938 03F46043 		and	r3, r3, #57344
 1455 093c 4FEA5333 		lsr	r3, r3, #13
 1456 0940 DAB2     		uxtb	r2, r3
 1457 0942 3B68     		ldr	r3, [r7, #0]
 1458 0944 1A70     		strb	r2, [r3, #0]
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1459              		.loc 1 1045 0
 1460 0946 7B68     		ldr	r3, [r7, #4]
 1461 0948 002B     		cmp	r3, #0
 1462 094a 1ED1     		bne	.L57
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1463              		.loc 1 1048 0
 1464 094c 3B68     		ldr	r3, [r7, #0]
 1465 094e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1466 0950 1846     		mov	r0, r3
 1467 0952 01F02BF9 		bl	RTC_Bcd2ToByte
 1468 0956 0346     		mov	r3, r0
 1469 0958 1A46     		mov	r2, r3
 1470 095a 3B68     		ldr	r3, [r7, #0]
 1471 095c DA70     		strb	r2, [r3, #3]
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1472              		.loc 1 1049 0
 1473 095e 3B68     		ldr	r3, [r7, #0]
 1474 0960 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1475 0962 1846     		mov	r0, r3
 1476 0964 01F022F9 		bl	RTC_Bcd2ToByte
 1477 0968 0346     		mov	r3, r0
 1478 096a 1A46     		mov	r2, r3
 1479 096c 3B68     		ldr	r3, [r7, #0]
 1480 096e 5A70     		strb	r2, [r3, #1]
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1481              		.loc 1 1050 0
 1482 0970 3B68     		ldr	r3, [r7, #0]
 1483 0972 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1484 0974 1846     		mov	r0, r3
 1485 0976 01F019F9 		bl	RTC_Bcd2ToByte
 1486 097a 0346     		mov	r3, r0
 1487 097c 1A46     		mov	r2, r3
 1488 097e 3B68     		ldr	r3, [r7, #0]
 1489 0980 9A70     		strb	r2, [r3, #2]
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 1490              		.loc 1 1051 0
 1491 0982 3B68     		ldr	r3, [r7, #0]
 1492 0984 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1493 0986 3B68     		ldr	r3, [r7, #0]
 1494 0988 1A70     		strb	r2, [r3, #0]
 1495              	.L57:
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1496              		.loc 1 1053 0
 1497 098a 07F11007 		add	r7, r7, #16
 1498 098e BD46     		mov	sp, r7
 1499 0990 80BD     		pop	{r7, pc}
 1500              		.cfi_endproc
 1501              	.LFE125:
 1503 0992 00BF     		.align	2
 1504              		.global	RTC_SetAlarm
 1505              		.thumb
 1506              		.thumb_func
 1508              	RTC_SetAlarm:
 1509              	.LFB126:
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1510              		.loc 1 1090 0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 24
 1513              		@ frame_needed = 1, uses_anonymous_args = 0
 1514 0994 90B5     		push	{r4, r7, lr}
 1515              	.LCFI47:
 1516              		.cfi_def_cfa_offset 12
 1517              		.cfi_offset 14, -4
 1518              		.cfi_offset 7, -8
 1519              		.cfi_offset 4, -12
 1520 0996 87B0     		sub	sp, sp, #28
 1521              	.LCFI48:
 1522              		.cfi_def_cfa_offset 40
 1523 0998 00AF     		add	r7, sp, #0
 1524              	.LCFI49:
 1525              		.cfi_def_cfa_register 7
 1526 099a F860     		str	r0, [r7, #12]
 1527 099c B960     		str	r1, [r7, #8]
 1528 099e 7A60     		str	r2, [r7, #4]
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1529              		.loc 1 1091 0
 1530 09a0 4FF00003 		mov	r3, #0
 1531 09a4 7B61     		str	r3, [r7, #20]
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1532              		.loc 1 1099 0
 1533 09a6 FB68     		ldr	r3, [r7, #12]
 1534 09a8 002B     		cmp	r3, #0
 1535 09aa 0DD1     		bne	.L60
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1536              		.loc 1 1101 0
 1537 09ac 4FF42053 		mov	r3, #10240
 1538 09b0 C4F20003 		movt	r3, 16384
 1539 09b4 9B68     		ldr	r3, [r3, #8]
 1540 09b6 03F04003 		and	r3, r3, #64
 1541 09ba 002B     		cmp	r3, #0
 1542 09bc 2CD1     		bne	.L62
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1543              		.loc 1 1108 0
 1544 09be 7B68     		ldr	r3, [r7, #4]
 1545 09c0 4FF00002 		mov	r2, #0
 1546 09c4 DA70     		strb	r2, [r3, #3]
 1547 09c6 27E0     		b	.L62
 1548              	.L60:
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1549              		.loc 1 1125 0
 1550 09c8 4FF42053 		mov	r3, #10240
 1551 09cc C4F20003 		movt	r3, 16384
 1552 09d0 9B68     		ldr	r3, [r3, #8]
 1553 09d2 03F04003 		and	r3, r3, #64
 1554 09d6 002B     		cmp	r3, #0
 1555 09d8 07D0     		beq	.L63
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1556              		.loc 1 1127 0
 1557 09da 7B68     		ldr	r3, [r7, #4]
 1558 09dc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1559 09de 1846     		mov	r0, r3
 1560 09e0 01F0E4F8 		bl	RTC_Bcd2ToByte
 1561 09e4 0346     		mov	r3, r0
 1562 09e6 7B61     		str	r3, [r7, #20]
 1563 09e8 03E0     		b	.L64
 1564              	.L63:
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1565              		.loc 1 1133 0
 1566 09ea 7B68     		ldr	r3, [r7, #4]
 1567 09ec 4FF00002 		mov	r2, #0
 1568 09f0 DA70     		strb	r2, [r3, #3]
 1569              	.L64:
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1570              		.loc 1 1140 0
 1571 09f2 7B68     		ldr	r3, [r7, #4]
 1572 09f4 9B68     		ldr	r3, [r3, #8]
 1573 09f6 002B     		cmp	r3, #0
 1574 09f8 07D1     		bne	.L65
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1575              		.loc 1 1142 0
 1576 09fa 7B68     		ldr	r3, [r7, #4]
 1577 09fc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1578 09fe 1846     		mov	r0, r3
 1579 0a00 01F0D4F8 		bl	RTC_Bcd2ToByte
 1580 0a04 0346     		mov	r3, r0
 1581 0a06 7B61     		str	r3, [r7, #20]
 1582 0a08 06E0     		b	.L62
 1583              	.L65:
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1584              		.loc 1 1147 0
 1585 0a0a 7B68     		ldr	r3, [r7, #4]
 1586 0a0c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1587 0a0e 1846     		mov	r0, r3
 1588 0a10 01F0CCF8 		bl	RTC_Bcd2ToByte
 1589 0a14 0346     		mov	r3, r0
 1590 0a16 7B61     		str	r3, [r7, #20]
 1591              	.L62:
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1592              		.loc 1 1153 0
 1593 0a18 FB68     		ldr	r3, [r7, #12]
 1594 0a1a 002B     		cmp	r3, #0
 1595 0a1c 1DD0     		beq	.L66
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1596              		.loc 1 1155 0
 1597 0a1e 7B68     		ldr	r3, [r7, #4]
 1598 0a20 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1599 0a22 4FEA0342 		lsl	r2, r3, #16
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1600              		.loc 1 1156 0
 1601 0a26 7B68     		ldr	r3, [r7, #4]
 1602 0a28 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1603 0a2a 4FEA0323 		lsl	r3, r3, #8
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1604              		.loc 1 1155 0
 1605 0a2e 1A43     		orrs	r2, r2, r3
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1606              		.loc 1 1157 0
 1607 0a30 7B68     		ldr	r3, [r7, #4]
 1608 0a32 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1609              		.loc 1 1156 0
 1610 0a34 1A43     		orrs	r2, r2, r3
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1611              		.loc 1 1158 0
 1612 0a36 7B68     		ldr	r3, [r7, #4]
 1613 0a38 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1614 0a3a 4FEA0343 		lsl	r3, r3, #16
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1615              		.loc 1 1157 0
 1616 0a3e 1A43     		orrs	r2, r2, r3
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1617              		.loc 1 1159 0
 1618 0a40 7B68     		ldr	r3, [r7, #4]
 1619 0a42 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1620 0a44 4FEA0363 		lsl	r3, r3, #24
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1621              		.loc 1 1158 0
 1622 0a48 1A43     		orrs	r2, r2, r3
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1623              		.loc 1 1160 0
 1624 0a4a 7B68     		ldr	r3, [r7, #4]
 1625 0a4c 9B68     		ldr	r3, [r3, #8]
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1626              		.loc 1 1159 0
 1627 0a4e 1A43     		orrs	r2, r2, r3
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1628              		.loc 1 1161 0
 1629 0a50 7B68     		ldr	r3, [r7, #4]
 1630 0a52 5B68     		ldr	r3, [r3, #4]
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1631              		.loc 1 1155 0
 1632 0a54 1343     		orrs	r3, r3, r2
 1633 0a56 7B61     		str	r3, [r7, #20]
 1634 0a58 2FE0     		b	.L67
 1635              	.L66:
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1636              		.loc 1 1165 0
 1637 0a5a 7B68     		ldr	r3, [r7, #4]
 1638 0a5c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1639 0a5e 1846     		mov	r0, r3
 1640 0a60 01F082F8 		bl	RTC_ByteToBcd2
 1641 0a64 0346     		mov	r3, r0
 1642 0a66 4FEA0344 		lsl	r4, r3, #16
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1643              		.loc 1 1166 0
 1644 0a6a 7B68     		ldr	r3, [r7, #4]
 1645 0a6c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1646 0a6e 1846     		mov	r0, r3
 1647 0a70 01F07AF8 		bl	RTC_ByteToBcd2
 1648 0a74 0346     		mov	r3, r0
 1649 0a76 4FEA0323 		lsl	r3, r3, #8
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1650              		.loc 1 1165 0
 1651 0a7a 1C43     		orrs	r4, r4, r3
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1652              		.loc 1 1167 0
 1653 0a7c 7B68     		ldr	r3, [r7, #4]
 1654 0a7e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1655 0a80 1846     		mov	r0, r3
 1656 0a82 01F071F8 		bl	RTC_ByteToBcd2
 1657 0a86 0346     		mov	r3, r0
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1658              		.loc 1 1166 0
 1659 0a88 44EA0302 		orr	r2, r4, r3
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1660              		.loc 1 1168 0
 1661 0a8c 7B68     		ldr	r3, [r7, #4]
 1662 0a8e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1663 0a90 4FEA0343 		lsl	r3, r3, #16
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1664              		.loc 1 1167 0
 1665 0a94 42EA0304 		orr	r4, r2, r3
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1666              		.loc 1 1169 0
 1667 0a98 7B68     		ldr	r3, [r7, #4]
 1668 0a9a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1669 0a9c 1846     		mov	r0, r3
 1670 0a9e 01F063F8 		bl	RTC_ByteToBcd2
 1671 0aa2 0346     		mov	r3, r0
 1672 0aa4 4FEA0363 		lsl	r3, r3, #24
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1673              		.loc 1 1168 0
 1674 0aa8 44EA0302 		orr	r2, r4, r3
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1675              		.loc 1 1170 0
 1676 0aac 7B68     		ldr	r3, [r7, #4]
 1677 0aae 9B68     		ldr	r3, [r3, #8]
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1678              		.loc 1 1169 0
 1679 0ab0 1A43     		orrs	r2, r2, r3
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1680              		.loc 1 1171 0
 1681 0ab2 7B68     		ldr	r3, [r7, #4]
 1682 0ab4 5B68     		ldr	r3, [r3, #4]
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1683              		.loc 1 1165 0
 1684 0ab6 1343     		orrs	r3, r3, r2
 1685 0ab8 7B61     		str	r3, [r7, #20]
 1686              	.L67:
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1687              		.loc 1 1175 0
 1688 0aba 4FF42053 		mov	r3, #10240
 1689 0abe C4F20003 		movt	r3, 16384
 1690 0ac2 4FF0CA02 		mov	r2, #202
 1691 0ac6 5A62     		str	r2, [r3, #36]
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1692              		.loc 1 1176 0
 1693 0ac8 4FF42053 		mov	r3, #10240
 1694 0acc C4F20003 		movt	r3, 16384
 1695 0ad0 4FF05302 		mov	r2, #83
 1696 0ad4 5A62     		str	r2, [r3, #36]
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1697              		.loc 1 1179 0
 1698 0ad6 BB68     		ldr	r3, [r7, #8]
 1699 0ad8 B3F5807F 		cmp	r3, #256
 1700 0adc 06D1     		bne	.L68
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1701              		.loc 1 1181 0
 1702 0ade 4FF42053 		mov	r3, #10240
 1703 0ae2 C4F20003 		movt	r3, 16384
 1704 0ae6 7A69     		ldr	r2, [r7, #20]
 1705 0ae8 DA61     		str	r2, [r3, #28]
 1706 0aea 05E0     		b	.L69
 1707              	.L68:
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1708              		.loc 1 1185 0
 1709 0aec 4FF42053 		mov	r3, #10240
 1710 0af0 C4F20003 		movt	r3, 16384
 1711 0af4 7A69     		ldr	r2, [r7, #20]
 1712 0af6 1A62     		str	r2, [r3, #32]
 1713              	.L69:
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1714              		.loc 1 1189 0
 1715 0af8 4FF42053 		mov	r3, #10240
 1716 0afc C4F20003 		movt	r3, 16384
 1717 0b00 4FF0FF02 		mov	r2, #255
 1718 0b04 5A62     		str	r2, [r3, #36]
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1719              		.loc 1 1190 0
 1720 0b06 07F11C07 		add	r7, r7, #28
 1721 0b0a BD46     		mov	sp, r7
 1722 0b0c 90BD     		pop	{r4, r7, pc}
 1723              		.cfi_endproc
 1724              	.LFE126:
 1726 0b0e 00BF     		.align	2
 1727              		.global	RTC_AlarmStructInit
 1728              		.thumb
 1729              		.thumb_func
 1731              	RTC_AlarmStructInit:
 1732              	.LFB127:
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1733              		.loc 1 1201 0
 1734              		.cfi_startproc
 1735              		@ args = 0, pretend = 0, frame = 8
 1736              		@ frame_needed = 1, uses_anonymous_args = 0
 1737              		@ link register save eliminated.
 1738 0b10 80B4     		push	{r7}
 1739              	.LCFI50:
 1740              		.cfi_def_cfa_offset 4
 1741              		.cfi_offset 7, -4
 1742 0b12 83B0     		sub	sp, sp, #12
 1743              	.LCFI51:
 1744              		.cfi_def_cfa_offset 16
 1745 0b14 00AF     		add	r7, sp, #0
 1746              	.LCFI52:
 1747              		.cfi_def_cfa_register 7
 1748 0b16 7860     		str	r0, [r7, #4]
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1749              		.loc 1 1203 0
 1750 0b18 7B68     		ldr	r3, [r7, #4]
 1751 0b1a 4FF00002 		mov	r2, #0
 1752 0b1e DA70     		strb	r2, [r3, #3]
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1753              		.loc 1 1204 0
 1754 0b20 7B68     		ldr	r3, [r7, #4]
 1755 0b22 4FF00002 		mov	r2, #0
 1756 0b26 1A70     		strb	r2, [r3, #0]
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1757              		.loc 1 1205 0
 1758 0b28 7B68     		ldr	r3, [r7, #4]
 1759 0b2a 4FF00002 		mov	r2, #0
 1760 0b2e 5A70     		strb	r2, [r3, #1]
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1761              		.loc 1 1206 0
 1762 0b30 7B68     		ldr	r3, [r7, #4]
 1763 0b32 4FF00002 		mov	r2, #0
 1764 0b36 9A70     		strb	r2, [r3, #2]
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1765              		.loc 1 1209 0
 1766 0b38 7B68     		ldr	r3, [r7, #4]
 1767 0b3a 4FF00002 		mov	r2, #0
 1768 0b3e 9A60     		str	r2, [r3, #8]
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1769              		.loc 1 1210 0
 1770 0b40 7B68     		ldr	r3, [r7, #4]
 1771 0b42 4FF00102 		mov	r2, #1
 1772 0b46 1A73     		strb	r2, [r3, #12]
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1773              		.loc 1 1213 0
 1774 0b48 7B68     		ldr	r3, [r7, #4]
 1775 0b4a 4FF00002 		mov	r2, #0
 1776 0b4e 5A60     		str	r2, [r3, #4]
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1777              		.loc 1 1214 0
 1778 0b50 07F10C07 		add	r7, r7, #12
 1779 0b54 BD46     		mov	sp, r7
 1780 0b56 80BC     		pop	{r7}
 1781 0b58 7047     		bx	lr
 1782              		.cfi_endproc
 1783              	.LFE127:
 1785 0b5a 00BF     		.align	2
 1786              		.global	RTC_GetAlarm
 1787              		.thumb
 1788              		.thumb_func
 1790              	RTC_GetAlarm:
 1791              	.LFB128:
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1792              		.loc 1 1231 0
 1793              		.cfi_startproc
 1794              		@ args = 0, pretend = 0, frame = 24
 1795              		@ frame_needed = 1, uses_anonymous_args = 0
 1796 0b5c 80B5     		push	{r7, lr}
 1797              	.LCFI53:
 1798              		.cfi_def_cfa_offset 8
 1799              		.cfi_offset 14, -4
 1800              		.cfi_offset 7, -8
 1801 0b5e 86B0     		sub	sp, sp, #24
 1802              	.LCFI54:
 1803              		.cfi_def_cfa_offset 32
 1804 0b60 00AF     		add	r7, sp, #0
 1805              	.LCFI55:
 1806              		.cfi_def_cfa_register 7
 1807 0b62 F860     		str	r0, [r7, #12]
 1808 0b64 B960     		str	r1, [r7, #8]
 1809 0b66 7A60     		str	r2, [r7, #4]
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1810              		.loc 1 1232 0
 1811 0b68 4FF00003 		mov	r3, #0
 1812 0b6c 7B61     		str	r3, [r7, #20]
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1813              		.loc 1 1239 0
 1814 0b6e BB68     		ldr	r3, [r7, #8]
 1815 0b70 B3F5807F 		cmp	r3, #256
 1816 0b74 06D1     		bne	.L72
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1817              		.loc 1 1241 0
 1818 0b76 4FF42053 		mov	r3, #10240
 1819 0b7a C4F20003 		movt	r3, 16384
 1820 0b7e DB69     		ldr	r3, [r3, #28]
 1821 0b80 7B61     		str	r3, [r7, #20]
 1822 0b82 05E0     		b	.L73
 1823              	.L72:
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1824              		.loc 1 1245 0
 1825 0b84 4FF42053 		mov	r3, #10240
 1826 0b88 C4F20003 		movt	r3, 16384
 1827 0b8c 1B6A     		ldr	r3, [r3, #32]
 1828 0b8e 7B61     		str	r3, [r7, #20]
 1829              	.L73:
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1830              		.loc 1 1249 0
 1831 0b90 7B69     		ldr	r3, [r7, #20]
 1832 0b92 03F47C13 		and	r3, r3, #4128768
 1833 0b96 4FEA1343 		lsr	r3, r3, #16
 1834 0b9a DAB2     		uxtb	r2, r3
 1835 0b9c 7B68     		ldr	r3, [r7, #4]
 1836 0b9e 1A70     		strb	r2, [r3, #0]
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1837              		.loc 1 1251 0
 1838 0ba0 7B69     		ldr	r3, [r7, #20]
 1839 0ba2 03F4FE43 		and	r3, r3, #32512
 1840 0ba6 4FEA1323 		lsr	r3, r3, #8
 1841 0baa DAB2     		uxtb	r2, r3
 1842 0bac 7B68     		ldr	r3, [r7, #4]
 1843 0bae 5A70     		strb	r2, [r3, #1]
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1844              		.loc 1 1253 0
 1845 0bb0 7B69     		ldr	r3, [r7, #20]
 1846 0bb2 DBB2     		uxtb	r3, r3
 1847 0bb4 03F07F03 		and	r3, r3, #127
 1848 0bb8 DAB2     		uxtb	r2, r3
 1849 0bba 7B68     		ldr	r3, [r7, #4]
 1850 0bbc 9A70     		strb	r2, [r3, #2]
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1851              		.loc 1 1255 0
 1852 0bbe 7B69     		ldr	r3, [r7, #20]
 1853 0bc0 03F48003 		and	r3, r3, #4194304
 1854 0bc4 4FEA1343 		lsr	r3, r3, #16
 1855 0bc8 DAB2     		uxtb	r2, r3
 1856 0bca 7B68     		ldr	r3, [r7, #4]
 1857 0bcc DA70     		strb	r2, [r3, #3]
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1858              		.loc 1 1256 0
 1859 0bce 7B69     		ldr	r3, [r7, #20]
 1860 0bd0 03F07C53 		and	r3, r3, #1056964608
 1861 0bd4 4FEA1363 		lsr	r3, r3, #24
 1862 0bd8 DAB2     		uxtb	r2, r3
 1863 0bda 7B68     		ldr	r3, [r7, #4]
 1864 0bdc 1A73     		strb	r2, [r3, #12]
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1865              		.loc 1 1257 0
 1866 0bde 7B69     		ldr	r3, [r7, #20]
 1867 0be0 03F08042 		and	r2, r3, #1073741824
 1868 0be4 7B68     		ldr	r3, [r7, #4]
 1869 0be6 9A60     		str	r2, [r3, #8]
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1870              		.loc 1 1258 0
 1871 0be8 7B69     		ldr	r3, [r7, #20]
 1872 0bea 03F08032 		and	r2, r3, #-2139062144
 1873 0bee 7B68     		ldr	r3, [r7, #4]
 1874 0bf0 5A60     		str	r2, [r3, #4]
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1875              		.loc 1 1260 0
 1876 0bf2 FB68     		ldr	r3, [r7, #12]
 1877 0bf4 002B     		cmp	r3, #0
 1878 0bf6 23D1     		bne	.L71
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1879              		.loc 1 1262 0
 1880 0bf8 7B68     		ldr	r3, [r7, #4]
 1881 0bfa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1882 0bfc 1846     		mov	r0, r3
 1883 0bfe 00F0D5FF 		bl	RTC_Bcd2ToByte
 1884 0c02 0346     		mov	r3, r0
 1885 0c04 1A46     		mov	r2, r3
 1886 0c06 7B68     		ldr	r3, [r7, #4]
 1887 0c08 1A70     		strb	r2, [r3, #0]
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1888              		.loc 1 1264 0
 1889 0c0a 7B68     		ldr	r3, [r7, #4]
 1890 0c0c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1891 0c0e 1846     		mov	r0, r3
 1892 0c10 00F0CCFF 		bl	RTC_Bcd2ToByte
 1893 0c14 0346     		mov	r3, r0
 1894 0c16 1A46     		mov	r2, r3
 1895 0c18 7B68     		ldr	r3, [r7, #4]
 1896 0c1a 5A70     		strb	r2, [r3, #1]
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1897              		.loc 1 1266 0
 1898 0c1c 7B68     		ldr	r3, [r7, #4]
 1899 0c1e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1900 0c20 1846     		mov	r0, r3
 1901 0c22 00F0C3FF 		bl	RTC_Bcd2ToByte
 1902 0c26 0346     		mov	r3, r0
 1903 0c28 1A46     		mov	r2, r3
 1904 0c2a 7B68     		ldr	r3, [r7, #4]
 1905 0c2c 9A70     		strb	r2, [r3, #2]
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1906              		.loc 1 1268 0
 1907 0c2e 7B68     		ldr	r3, [r7, #4]
 1908 0c30 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1909 0c32 1846     		mov	r0, r3
 1910 0c34 00F0BAFF 		bl	RTC_Bcd2ToByte
 1911 0c38 0346     		mov	r3, r0
 1912 0c3a 1A46     		mov	r2, r3
 1913 0c3c 7B68     		ldr	r3, [r7, #4]
 1914 0c3e 1A73     		strb	r2, [r3, #12]
 1915              	.L71:
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1916              		.loc 1 1270 0
 1917 0c40 07F11807 		add	r7, r7, #24
 1918 0c44 BD46     		mov	sp, r7
 1919 0c46 80BD     		pop	{r7, pc}
 1920              		.cfi_endproc
 1921              	.LFE128:
 1923              		.align	2
 1924              		.global	RTC_AlarmCmd
 1925              		.thumb
 1926              		.thumb_func
 1928              	RTC_AlarmCmd:
 1929              	.LFB129:
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1930              		.loc 1 1285 0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 24
 1933              		@ frame_needed = 1, uses_anonymous_args = 0
 1934              		@ link register save eliminated.
 1935 0c48 80B4     		push	{r7}
 1936              	.LCFI56:
 1937              		.cfi_def_cfa_offset 4
 1938              		.cfi_offset 7, -4
 1939 0c4a 87B0     		sub	sp, sp, #28
 1940              	.LCFI57:
 1941              		.cfi_def_cfa_offset 32
 1942 0c4c 00AF     		add	r7, sp, #0
 1943              	.LCFI58:
 1944              		.cfi_def_cfa_register 7
 1945 0c4e 7860     		str	r0, [r7, #4]
 1946 0c50 0B46     		mov	r3, r1
 1947 0c52 FB70     		strb	r3, [r7, #3]
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1948              		.loc 1 1286 0
 1949 0c54 4FF00003 		mov	r3, #0
 1950 0c58 FB60     		str	r3, [r7, #12]
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1951              		.loc 1 1287 0
 1952 0c5a 4FF00003 		mov	r3, #0
 1953 0c5e 3B61     		str	r3, [r7, #16]
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1954              		.loc 1 1288 0
 1955 0c60 4FF00003 		mov	r3, #0
 1956 0c64 FB75     		strb	r3, [r7, #23]
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1957              		.loc 1 1295 0
 1958 0c66 4FF42053 		mov	r3, #10240
 1959 0c6a C4F20003 		movt	r3, 16384
 1960 0c6e 4FF0CA02 		mov	r2, #202
 1961 0c72 5A62     		str	r2, [r3, #36]
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1962              		.loc 1 1296 0
 1963 0c74 4FF42053 		mov	r3, #10240
 1964 0c78 C4F20003 		movt	r3, 16384
 1965 0c7c 4FF05302 		mov	r2, #83
 1966 0c80 5A62     		str	r2, [r3, #36]
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1967              		.loc 1 1299 0
 1968 0c82 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1969 0c84 002B     		cmp	r3, #0
 1970 0c86 0FD0     		beq	.L76
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1971              		.loc 1 1301 0
 1972 0c88 4FF42053 		mov	r3, #10240
 1973 0c8c C4F20003 		movt	r3, 16384
 1974 0c90 4FF42052 		mov	r2, #10240
 1975 0c94 C4F20002 		movt	r2, 16384
 1976 0c98 9168     		ldr	r1, [r2, #8]
 1977 0c9a 7A68     		ldr	r2, [r7, #4]
 1978 0c9c 0A43     		orrs	r2, r2, r1
 1979 0c9e 9A60     		str	r2, [r3, #8]
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1980              		.loc 1 1303 0
 1981 0ca0 4FF00103 		mov	r3, #1
 1982 0ca4 FB75     		strb	r3, [r7, #23]
 1983 0ca6 34E0     		b	.L77
 1984              	.L76:
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1985              		.loc 1 1308 0
 1986 0ca8 4FF42053 		mov	r3, #10240
 1987 0cac C4F20003 		movt	r3, 16384
 1988 0cb0 4FF42052 		mov	r2, #10240
 1989 0cb4 C4F20002 		movt	r2, 16384
 1990 0cb8 9168     		ldr	r1, [r2, #8]
 1991 0cba 7A68     		ldr	r2, [r7, #4]
 1992 0cbc 6FEA0202 		mvn	r2, r2
 1993 0cc0 0A40     		ands	r2, r2, r1
 1994 0cc2 9A60     		str	r2, [r3, #8]
 1995              	.L79:
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1996              		.loc 1 1313 0 discriminator 1
 1997 0cc4 4FF42053 		mov	r3, #10240
 1998 0cc8 C4F20003 		movt	r3, 16384
 1999 0ccc DA68     		ldr	r2, [r3, #12]
 2000 0cce 7B68     		ldr	r3, [r7, #4]
 2001 0cd0 4FEA1323 		lsr	r3, r3, #8
 2002 0cd4 1340     		ands	r3, r3, r2
 2003 0cd6 3B61     		str	r3, [r7, #16]
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2004              		.loc 1 1314 0 discriminator 1
 2005 0cd8 FB68     		ldr	r3, [r7, #12]
 2006 0cda 03F10103 		add	r3, r3, #1
 2007 0cde FB60     		str	r3, [r7, #12]
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2008              		.loc 1 1315 0 discriminator 1
 2009 0ce0 FB68     		ldr	r3, [r7, #12]
 2010 0ce2 B3F5803F 		cmp	r3, #65536
 2011 0ce6 02D0     		beq	.L78
 2012 0ce8 3B69     		ldr	r3, [r7, #16]
 2013 0cea 002B     		cmp	r3, #0
 2014 0cec EAD0     		beq	.L79
 2015              	.L78:
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2016              		.loc 1 1317 0
 2017 0cee 4FF42053 		mov	r3, #10240
 2018 0cf2 C4F20003 		movt	r3, 16384
 2019 0cf6 DA68     		ldr	r2, [r3, #12]
 2020 0cf8 7B68     		ldr	r3, [r7, #4]
 2021 0cfa 4FEA1323 		lsr	r3, r3, #8
 2022 0cfe 1340     		ands	r3, r3, r2
 2023 0d00 002B     		cmp	r3, #0
 2024 0d02 03D1     		bne	.L80
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2025              		.loc 1 1319 0
 2026 0d04 4FF00003 		mov	r3, #0
 2027 0d08 FB75     		strb	r3, [r7, #23]
 2028 0d0a 02E0     		b	.L77
 2029              	.L80:
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2030              		.loc 1 1323 0
 2031 0d0c 4FF00103 		mov	r3, #1
 2032 0d10 FB75     		strb	r3, [r7, #23]
 2033              	.L77:
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2034              		.loc 1 1328 0
 2035 0d12 4FF42053 		mov	r3, #10240
 2036 0d16 C4F20003 		movt	r3, 16384
 2037 0d1a 4FF0FF02 		mov	r2, #255
 2038 0d1e 5A62     		str	r2, [r3, #36]
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2039              		.loc 1 1330 0
 2040 0d20 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2041              		.loc 1 1331 0
 2042 0d22 1846     		mov	r0, r3
 2043 0d24 07F11C07 		add	r7, r7, #28
 2044 0d28 BD46     		mov	sp, r7
 2045 0d2a 80BC     		pop	{r7}
 2046 0d2c 7047     		bx	lr
 2047              		.cfi_endproc
 2048              	.LFE129:
 2050 0d2e 00BF     		.align	2
 2051              		.global	RTC_AlarmSubSecondConfig
 2052              		.thumb
 2053              		.thumb_func
 2055              	RTC_AlarmSubSecondConfig:
 2056              	.LFB130:
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2057              		.loc 1 1379 0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 24
 2060              		@ frame_needed = 1, uses_anonymous_args = 0
 2061              		@ link register save eliminated.
 2062 0d30 80B4     		push	{r7}
 2063              	.LCFI59:
 2064              		.cfi_def_cfa_offset 4
 2065              		.cfi_offset 7, -4
 2066 0d32 87B0     		sub	sp, sp, #28
 2067              	.LCFI60:
 2068              		.cfi_def_cfa_offset 32
 2069 0d34 00AF     		add	r7, sp, #0
 2070              	.LCFI61:
 2071              		.cfi_def_cfa_register 7
 2072 0d36 F860     		str	r0, [r7, #12]
 2073 0d38 B960     		str	r1, [r7, #8]
 2074 0d3a 7A60     		str	r2, [r7, #4]
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2075              		.loc 1 1380 0
 2076 0d3c 4FF00003 		mov	r3, #0
 2077 0d40 7B61     		str	r3, [r7, #20]
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2078              		.loc 1 1388 0
 2079 0d42 4FF42053 		mov	r3, #10240
 2080 0d46 C4F20003 		movt	r3, 16384
 2081 0d4a 4FF0CA02 		mov	r2, #202
 2082 0d4e 5A62     		str	r2, [r3, #36]
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2083              		.loc 1 1389 0
 2084 0d50 4FF42053 		mov	r3, #10240
 2085 0d54 C4F20003 		movt	r3, 16384
 2086 0d58 4FF05302 		mov	r2, #83
 2087 0d5c 5A62     		str	r2, [r3, #36]
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2088              		.loc 1 1392 0
 2089 0d5e BA68     		ldr	r2, [r7, #8]
 2090 0d60 7B68     		ldr	r3, [r7, #4]
 2091 0d62 1343     		orrs	r3, r3, r2
 2092 0d64 7B61     		str	r3, [r7, #20]
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2093              		.loc 1 1394 0
 2094 0d66 FB68     		ldr	r3, [r7, #12]
 2095 0d68 B3F5807F 		cmp	r3, #256
 2096 0d6c 06D1     		bne	.L82
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2097              		.loc 1 1397 0
 2098 0d6e 4FF42053 		mov	r3, #10240
 2099 0d72 C4F20003 		movt	r3, 16384
 2100 0d76 7A69     		ldr	r2, [r7, #20]
 2101 0d78 5A64     		str	r2, [r3, #68]
 2102 0d7a 05E0     		b	.L83
 2103              	.L82:
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2104              		.loc 1 1402 0
 2105 0d7c 4FF42053 		mov	r3, #10240
 2106 0d80 C4F20003 		movt	r3, 16384
 2107 0d84 7A69     		ldr	r2, [r7, #20]
 2108 0d86 9A64     		str	r2, [r3, #72]
 2109              	.L83:
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2110              		.loc 1 1406 0
 2111 0d88 4FF42053 		mov	r3, #10240
 2112 0d8c C4F20003 		movt	r3, 16384
 2113 0d90 4FF0FF02 		mov	r2, #255
 2114 0d94 5A62     		str	r2, [r3, #36]
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2115              		.loc 1 1408 0
 2116 0d96 07F11C07 		add	r7, r7, #28
 2117 0d9a BD46     		mov	sp, r7
 2118 0d9c 80BC     		pop	{r7}
 2119 0d9e 7047     		bx	lr
 2120              		.cfi_endproc
 2121              	.LFE130:
 2123              		.align	2
 2124              		.global	RTC_GetAlarmSubSecond
 2125              		.thumb
 2126              		.thumb_func
 2128              	RTC_GetAlarmSubSecond:
 2129              	.LFB131:
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2130              		.loc 1 1420 0
 2131              		.cfi_startproc
 2132              		@ args = 0, pretend = 0, frame = 16
 2133              		@ frame_needed = 1, uses_anonymous_args = 0
 2134              		@ link register save eliminated.
 2135 0da0 80B4     		push	{r7}
 2136              	.LCFI62:
 2137              		.cfi_def_cfa_offset 4
 2138              		.cfi_offset 7, -4
 2139 0da2 85B0     		sub	sp, sp, #20
 2140              	.LCFI63:
 2141              		.cfi_def_cfa_offset 24
 2142 0da4 00AF     		add	r7, sp, #0
 2143              	.LCFI64:
 2144              		.cfi_def_cfa_register 7
 2145 0da6 7860     		str	r0, [r7, #4]
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2146              		.loc 1 1421 0
 2147 0da8 4FF00003 		mov	r3, #0
 2148 0dac FB60     		str	r3, [r7, #12]
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2149              		.loc 1 1424 0
 2150 0dae 7B68     		ldr	r3, [r7, #4]
 2151 0db0 B3F5807F 		cmp	r3, #256
 2152 0db4 0AD1     		bne	.L85
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2153              		.loc 1 1426 0
 2154 0db6 4FF42053 		mov	r3, #10240
 2155 0dba C4F20003 		movt	r3, 16384
 2156 0dbe 5B6C     		ldr	r3, [r3, #68]
 2157 0dc0 4FEA4343 		lsl	r3, r3, #17
 2158 0dc4 4FEA5343 		lsr	r3, r3, #17
 2159 0dc8 FB60     		str	r3, [r7, #12]
 2160 0dca 09E0     		b	.L86
 2161              	.L85:
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2162              		.loc 1 1430 0
 2163 0dcc 4FF42053 		mov	r3, #10240
 2164 0dd0 C4F20003 		movt	r3, 16384
 2165 0dd4 9B6C     		ldr	r3, [r3, #72]
 2166 0dd6 4FEA4343 		lsl	r3, r3, #17
 2167 0dda 4FEA5343 		lsr	r3, r3, #17
 2168 0dde FB60     		str	r3, [r7, #12]
 2169              	.L86:
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2170              		.loc 1 1433 0
 2171 0de0 FB68     		ldr	r3, [r7, #12]
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2172              		.loc 1 1434 0
 2173 0de2 1846     		mov	r0, r3
 2174 0de4 07F11407 		add	r7, r7, #20
 2175 0de8 BD46     		mov	sp, r7
 2176 0dea 80BC     		pop	{r7}
 2177 0dec 7047     		bx	lr
 2178              		.cfi_endproc
 2179              	.LFE131:
 2181 0dee 00BF     		.align	2
 2182              		.global	RTC_WakeUpClockConfig
 2183              		.thumb
 2184              		.thumb_func
 2186              	RTC_WakeUpClockConfig:
 2187              	.LFB132:
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2188              		.loc 1 1469 0
 2189              		.cfi_startproc
 2190              		@ args = 0, pretend = 0, frame = 8
 2191              		@ frame_needed = 1, uses_anonymous_args = 0
 2192              		@ link register save eliminated.
 2193 0df0 80B4     		push	{r7}
 2194              	.LCFI65:
 2195              		.cfi_def_cfa_offset 4
 2196              		.cfi_offset 7, -4
 2197 0df2 83B0     		sub	sp, sp, #12
 2198              	.LCFI66:
 2199              		.cfi_def_cfa_offset 16
 2200 0df4 00AF     		add	r7, sp, #0
 2201              	.LCFI67:
 2202              		.cfi_def_cfa_register 7
 2203 0df6 7860     		str	r0, [r7, #4]
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2204              		.loc 1 1474 0
 2205 0df8 4FF42053 		mov	r3, #10240
 2206 0dfc C4F20003 		movt	r3, 16384
 2207 0e00 4FF0CA02 		mov	r2, #202
 2208 0e04 5A62     		str	r2, [r3, #36]
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2209              		.loc 1 1475 0
 2210 0e06 4FF42053 		mov	r3, #10240
 2211 0e0a C4F20003 		movt	r3, 16384
 2212 0e0e 4FF05302 		mov	r2, #83
 2213 0e12 5A62     		str	r2, [r3, #36]
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2214              		.loc 1 1478 0
 2215 0e14 4FF42053 		mov	r3, #10240
 2216 0e18 C4F20003 		movt	r3, 16384
 2217 0e1c 4FF42052 		mov	r2, #10240
 2218 0e20 C4F20002 		movt	r2, 16384
 2219 0e24 9268     		ldr	r2, [r2, #8]
 2220 0e26 22F00702 		bic	r2, r2, #7
 2221 0e2a 9A60     		str	r2, [r3, #8]
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2222              		.loc 1 1481 0
 2223 0e2c 4FF42053 		mov	r3, #10240
 2224 0e30 C4F20003 		movt	r3, 16384
 2225 0e34 4FF42052 		mov	r2, #10240
 2226 0e38 C4F20002 		movt	r2, 16384
 2227 0e3c 9168     		ldr	r1, [r2, #8]
 2228 0e3e 7A68     		ldr	r2, [r7, #4]
 2229 0e40 0A43     		orrs	r2, r2, r1
 2230 0e42 9A60     		str	r2, [r3, #8]
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2231              		.loc 1 1484 0
 2232 0e44 4FF42053 		mov	r3, #10240
 2233 0e48 C4F20003 		movt	r3, 16384
 2234 0e4c 4FF0FF02 		mov	r2, #255
 2235 0e50 5A62     		str	r2, [r3, #36]
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2236              		.loc 1 1485 0
 2237 0e52 07F10C07 		add	r7, r7, #12
 2238 0e56 BD46     		mov	sp, r7
 2239 0e58 80BC     		pop	{r7}
 2240 0e5a 7047     		bx	lr
 2241              		.cfi_endproc
 2242              	.LFE132:
 2244              		.align	2
 2245              		.global	RTC_SetWakeUpCounter
 2246              		.thumb
 2247              		.thumb_func
 2249              	RTC_SetWakeUpCounter:
 2250              	.LFB133:
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2251              		.loc 1 1496 0
 2252              		.cfi_startproc
 2253              		@ args = 0, pretend = 0, frame = 8
 2254              		@ frame_needed = 1, uses_anonymous_args = 0
 2255              		@ link register save eliminated.
 2256 0e5c 80B4     		push	{r7}
 2257              	.LCFI68:
 2258              		.cfi_def_cfa_offset 4
 2259              		.cfi_offset 7, -4
 2260 0e5e 83B0     		sub	sp, sp, #12
 2261              	.LCFI69:
 2262              		.cfi_def_cfa_offset 16
 2263 0e60 00AF     		add	r7, sp, #0
 2264              	.LCFI70:
 2265              		.cfi_def_cfa_register 7
 2266 0e62 7860     		str	r0, [r7, #4]
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2267              		.loc 1 1501 0
 2268 0e64 4FF42053 		mov	r3, #10240
 2269 0e68 C4F20003 		movt	r3, 16384
 2270 0e6c 4FF0CA02 		mov	r2, #202
 2271 0e70 5A62     		str	r2, [r3, #36]
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2272              		.loc 1 1502 0
 2273 0e72 4FF42053 		mov	r3, #10240
 2274 0e76 C4F20003 		movt	r3, 16384
 2275 0e7a 4FF05302 		mov	r2, #83
 2276 0e7e 5A62     		str	r2, [r3, #36]
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2277              		.loc 1 1505 0
 2278 0e80 4FF42053 		mov	r3, #10240
 2279 0e84 C4F20003 		movt	r3, 16384
 2280 0e88 7A68     		ldr	r2, [r7, #4]
 2281 0e8a 5A61     		str	r2, [r3, #20]
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2282              		.loc 1 1508 0
 2283 0e8c 4FF42053 		mov	r3, #10240
 2284 0e90 C4F20003 		movt	r3, 16384
 2285 0e94 4FF0FF02 		mov	r2, #255
 2286 0e98 5A62     		str	r2, [r3, #36]
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2287              		.loc 1 1509 0
 2288 0e9a 07F10C07 		add	r7, r7, #12
 2289 0e9e BD46     		mov	sp, r7
 2290 0ea0 80BC     		pop	{r7}
 2291 0ea2 7047     		bx	lr
 2292              		.cfi_endproc
 2293              	.LFE133:
 2295              		.align	2
 2296              		.global	RTC_GetWakeUpCounter
 2297              		.thumb
 2298              		.thumb_func
 2300              	RTC_GetWakeUpCounter:
 2301              	.LFB134:
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2302              		.loc 1 1517 0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 0
 2305              		@ frame_needed = 1, uses_anonymous_args = 0
 2306              		@ link register save eliminated.
 2307 0ea4 80B4     		push	{r7}
 2308              	.LCFI71:
 2309              		.cfi_def_cfa_offset 4
 2310              		.cfi_offset 7, -4
 2311 0ea6 00AF     		add	r7, sp, #0
 2312              	.LCFI72:
 2313              		.cfi_def_cfa_register 7
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2314              		.loc 1 1519 0
 2315 0ea8 4FF42053 		mov	r3, #10240
 2316 0eac C4F20003 		movt	r3, 16384
 2317 0eb0 5B69     		ldr	r3, [r3, #20]
 2318 0eb2 4FEA0343 		lsl	r3, r3, #16
 2319 0eb6 4FEA1343 		lsr	r3, r3, #16
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2320              		.loc 1 1520 0
 2321 0eba 1846     		mov	r0, r3
 2322 0ebc BD46     		mov	sp, r7
 2323 0ebe 80BC     		pop	{r7}
 2324 0ec0 7047     		bx	lr
 2325              		.cfi_endproc
 2326              	.LFE134:
 2328 0ec2 00BF     		.align	2
 2329              		.global	RTC_WakeUpCmd
 2330              		.thumb
 2331              		.thumb_func
 2333              	RTC_WakeUpCmd:
 2334              	.LFB135:
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2335              		.loc 1 1529 0
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 24
 2338              		@ frame_needed = 1, uses_anonymous_args = 0
 2339              		@ link register save eliminated.
 2340 0ec4 80B4     		push	{r7}
 2341              	.LCFI73:
 2342              		.cfi_def_cfa_offset 4
 2343              		.cfi_offset 7, -4
 2344 0ec6 87B0     		sub	sp, sp, #28
 2345              	.LCFI74:
 2346              		.cfi_def_cfa_offset 32
 2347 0ec8 00AF     		add	r7, sp, #0
 2348              	.LCFI75:
 2349              		.cfi_def_cfa_register 7
 2350 0eca 0346     		mov	r3, r0
 2351 0ecc FB71     		strb	r3, [r7, #7]
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2352              		.loc 1 1530 0
 2353 0ece 4FF00003 		mov	r3, #0
 2354 0ed2 FB60     		str	r3, [r7, #12]
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2355              		.loc 1 1531 0
 2356 0ed4 4FF00003 		mov	r3, #0
 2357 0ed8 3B61     		str	r3, [r7, #16]
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2358              		.loc 1 1532 0
 2359 0eda 4FF00003 		mov	r3, #0
 2360 0ede FB75     		strb	r3, [r7, #23]
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2361              		.loc 1 1538 0
 2362 0ee0 4FF42053 		mov	r3, #10240
 2363 0ee4 C4F20003 		movt	r3, 16384
 2364 0ee8 4FF0CA02 		mov	r2, #202
 2365 0eec 5A62     		str	r2, [r3, #36]
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2366              		.loc 1 1539 0
 2367 0eee 4FF42053 		mov	r3, #10240
 2368 0ef2 C4F20003 		movt	r3, 16384
 2369 0ef6 4FF05302 		mov	r2, #83
 2370 0efa 5A62     		str	r2, [r3, #36]
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2371              		.loc 1 1541 0
 2372 0efc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2373 0efe 002B     		cmp	r3, #0
 2374 0f00 0FD0     		beq	.L91
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2375              		.loc 1 1544 0
 2376 0f02 4FF42053 		mov	r3, #10240
 2377 0f06 C4F20003 		movt	r3, 16384
 2378 0f0a 4FF42052 		mov	r2, #10240
 2379 0f0e C4F20002 		movt	r2, 16384
 2380 0f12 9268     		ldr	r2, [r2, #8]
 2381 0f14 42F48062 		orr	r2, r2, #1024
 2382 0f18 9A60     		str	r2, [r3, #8]
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2383              		.loc 1 1545 0
 2384 0f1a 4FF00103 		mov	r3, #1
 2385 0f1e FB75     		strb	r3, [r7, #23]
 2386 0f20 2EE0     		b	.L92
 2387              	.L91:
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2388              		.loc 1 1550 0
 2389 0f22 4FF42053 		mov	r3, #10240
 2390 0f26 C4F20003 		movt	r3, 16384
 2391 0f2a 4FF42052 		mov	r2, #10240
 2392 0f2e C4F20002 		movt	r2, 16384
 2393 0f32 9268     		ldr	r2, [r2, #8]
 2394 0f34 22F48062 		bic	r2, r2, #1024
 2395 0f38 9A60     		str	r2, [r3, #8]
 2396              	.L94:
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2397              		.loc 1 1554 0 discriminator 1
 2398 0f3a 4FF42053 		mov	r3, #10240
 2399 0f3e C4F20003 		movt	r3, 16384
 2400 0f42 DB68     		ldr	r3, [r3, #12]
 2401 0f44 03F00403 		and	r3, r3, #4
 2402 0f48 3B61     		str	r3, [r7, #16]
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2403              		.loc 1 1555 0 discriminator 1
 2404 0f4a FB68     		ldr	r3, [r7, #12]
 2405 0f4c 03F10103 		add	r3, r3, #1
 2406 0f50 FB60     		str	r3, [r7, #12]
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2407              		.loc 1 1556 0 discriminator 1
 2408 0f52 FB68     		ldr	r3, [r7, #12]
 2409 0f54 B3F5803F 		cmp	r3, #65536
 2410 0f58 02D0     		beq	.L93
 2411 0f5a 3B69     		ldr	r3, [r7, #16]
 2412 0f5c 002B     		cmp	r3, #0
 2413 0f5e ECD0     		beq	.L94
 2414              	.L93:
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2415              		.loc 1 1558 0
 2416 0f60 4FF42053 		mov	r3, #10240
 2417 0f64 C4F20003 		movt	r3, 16384
 2418 0f68 DB68     		ldr	r3, [r3, #12]
 2419 0f6a 03F00403 		and	r3, r3, #4
 2420 0f6e 002B     		cmp	r3, #0
 2421 0f70 03D1     		bne	.L95
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2422              		.loc 1 1560 0
 2423 0f72 4FF00003 		mov	r3, #0
 2424 0f76 FB75     		strb	r3, [r7, #23]
 2425 0f78 02E0     		b	.L92
 2426              	.L95:
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2427              		.loc 1 1564 0
 2428 0f7a 4FF00103 		mov	r3, #1
 2429 0f7e FB75     		strb	r3, [r7, #23]
 2430              	.L92:
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2431              		.loc 1 1569 0
 2432 0f80 4FF42053 		mov	r3, #10240
 2433 0f84 C4F20003 		movt	r3, 16384
 2434 0f88 4FF0FF02 		mov	r2, #255
 2435 0f8c 5A62     		str	r2, [r3, #36]
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2436              		.loc 1 1571 0
 2437 0f8e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2438              		.loc 1 1572 0
 2439 0f90 1846     		mov	r0, r3
 2440 0f92 07F11C07 		add	r7, r7, #28
 2441 0f96 BD46     		mov	sp, r7
 2442 0f98 80BC     		pop	{r7}
 2443 0f9a 7047     		bx	lr
 2444              		.cfi_endproc
 2445              	.LFE135:
 2447              		.align	2
 2448              		.global	RTC_DayLightSavingConfig
 2449              		.thumb
 2450              		.thumb_func
 2452              	RTC_DayLightSavingConfig:
 2453              	.LFB136:
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2454              		.loc 1 1606 0
 2455              		.cfi_startproc
 2456              		@ args = 0, pretend = 0, frame = 8
 2457              		@ frame_needed = 1, uses_anonymous_args = 0
 2458              		@ link register save eliminated.
 2459 0f9c 80B4     		push	{r7}
 2460              	.LCFI76:
 2461              		.cfi_def_cfa_offset 4
 2462              		.cfi_offset 7, -4
 2463 0f9e 83B0     		sub	sp, sp, #12
 2464              	.LCFI77:
 2465              		.cfi_def_cfa_offset 16
 2466 0fa0 00AF     		add	r7, sp, #0
 2467              	.LCFI78:
 2468              		.cfi_def_cfa_register 7
 2469 0fa2 7860     		str	r0, [r7, #4]
 2470 0fa4 3960     		str	r1, [r7, #0]
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2471              		.loc 1 1612 0
 2472 0fa6 4FF42053 		mov	r3, #10240
 2473 0faa C4F20003 		movt	r3, 16384
 2474 0fae 4FF0CA02 		mov	r2, #202
 2475 0fb2 5A62     		str	r2, [r3, #36]
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2476              		.loc 1 1613 0
 2477 0fb4 4FF42053 		mov	r3, #10240
 2478 0fb8 C4F20003 		movt	r3, 16384
 2479 0fbc 4FF05302 		mov	r2, #83
 2480 0fc0 5A62     		str	r2, [r3, #36]
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2481              		.loc 1 1616 0
 2482 0fc2 4FF42053 		mov	r3, #10240
 2483 0fc6 C4F20003 		movt	r3, 16384
 2484 0fca 4FF42052 		mov	r2, #10240
 2485 0fce C4F20002 		movt	r2, 16384
 2486 0fd2 9268     		ldr	r2, [r2, #8]
 2487 0fd4 22F48022 		bic	r2, r2, #262144
 2488 0fd8 9A60     		str	r2, [r3, #8]
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2489              		.loc 1 1619 0
 2490 0fda 4FF42053 		mov	r3, #10240
 2491 0fde C4F20003 		movt	r3, 16384
 2492 0fe2 4FF42052 		mov	r2, #10240
 2493 0fe6 C4F20002 		movt	r2, 16384
 2494 0fea 9168     		ldr	r1, [r2, #8]
 2495 0fec 7868     		ldr	r0, [r7, #4]
 2496 0fee 3A68     		ldr	r2, [r7, #0]
 2497 0ff0 0243     		orrs	r2, r2, r0
 2498 0ff2 0A43     		orrs	r2, r2, r1
 2499 0ff4 9A60     		str	r2, [r3, #8]
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2500              		.loc 1 1622 0
 2501 0ff6 4FF42053 		mov	r3, #10240
 2502 0ffa C4F20003 		movt	r3, 16384
 2503 0ffe 4FF0FF02 		mov	r2, #255
 2504 1002 5A62     		str	r2, [r3, #36]
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2505              		.loc 1 1623 0
 2506 1004 07F10C07 		add	r7, r7, #12
 2507 1008 BD46     		mov	sp, r7
 2508 100a 80BC     		pop	{r7}
 2509 100c 7047     		bx	lr
 2510              		.cfi_endproc
 2511              	.LFE136:
 2513 100e 00BF     		.align	2
 2514              		.global	RTC_GetStoreOperation
 2515              		.thumb
 2516              		.thumb_func
 2518              	RTC_GetStoreOperation:
 2519              	.LFB137:
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2520              		.loc 1 1633 0
 2521              		.cfi_startproc
 2522              		@ args = 0, pretend = 0, frame = 0
 2523              		@ frame_needed = 1, uses_anonymous_args = 0
 2524              		@ link register save eliminated.
 2525 1010 80B4     		push	{r7}
 2526              	.LCFI79:
 2527              		.cfi_def_cfa_offset 4
 2528              		.cfi_offset 7, -4
 2529 1012 00AF     		add	r7, sp, #0
 2530              	.LCFI80:
 2531              		.cfi_def_cfa_register 7
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2532              		.loc 1 1634 0
 2533 1014 4FF42053 		mov	r3, #10240
 2534 1018 C4F20003 		movt	r3, 16384
 2535 101c 9B68     		ldr	r3, [r3, #8]
 2536 101e 03F48023 		and	r3, r3, #262144
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2537              		.loc 1 1635 0
 2538 1022 1846     		mov	r0, r3
 2539 1024 BD46     		mov	sp, r7
 2540 1026 80BC     		pop	{r7}
 2541 1028 7047     		bx	lr
 2542              		.cfi_endproc
 2543              	.LFE137:
 2545 102a 00BF     		.align	2
 2546              		.global	RTC_OutputConfig
 2547              		.thumb
 2548              		.thumb_func
 2550              	RTC_OutputConfig:
 2551              	.LFB138:
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2552              		.loc 1 1672 0
 2553              		.cfi_startproc
 2554              		@ args = 0, pretend = 0, frame = 8
 2555              		@ frame_needed = 1, uses_anonymous_args = 0
 2556              		@ link register save eliminated.
 2557 102c 80B4     		push	{r7}
 2558              	.LCFI81:
 2559              		.cfi_def_cfa_offset 4
 2560              		.cfi_offset 7, -4
 2561 102e 83B0     		sub	sp, sp, #12
 2562              	.LCFI82:
 2563              		.cfi_def_cfa_offset 16
 2564 1030 00AF     		add	r7, sp, #0
 2565              	.LCFI83:
 2566              		.cfi_def_cfa_register 7
 2567 1032 7860     		str	r0, [r7, #4]
 2568 1034 3960     		str	r1, [r7, #0]
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2569              		.loc 1 1678 0
 2570 1036 4FF42053 		mov	r3, #10240
 2571 103a C4F20003 		movt	r3, 16384
 2572 103e 4FF0CA02 		mov	r2, #202
 2573 1042 5A62     		str	r2, [r3, #36]
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2574              		.loc 1 1679 0
 2575 1044 4FF42053 		mov	r3, #10240
 2576 1048 C4F20003 		movt	r3, 16384
 2577 104c 4FF05302 		mov	r2, #83
 2578 1050 5A62     		str	r2, [r3, #36]
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2579              		.loc 1 1682 0
 2580 1052 4FF42053 		mov	r3, #10240
 2581 1056 C4F20003 		movt	r3, 16384
 2582 105a 4FF42052 		mov	r2, #10240
 2583 105e C4F20002 		movt	r2, 16384
 2584 1062 9268     		ldr	r2, [r2, #8]
 2585 1064 22F4E002 		bic	r2, r2, #7340032
 2586 1068 9A60     		str	r2, [r3, #8]
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2587              		.loc 1 1685 0
 2588 106a 4FF42053 		mov	r3, #10240
 2589 106e C4F20003 		movt	r3, 16384
 2590 1072 4FF42052 		mov	r2, #10240
 2591 1076 C4F20002 		movt	r2, 16384
 2592 107a 9168     		ldr	r1, [r2, #8]
 2593 107c 7868     		ldr	r0, [r7, #4]
 2594 107e 3A68     		ldr	r2, [r7, #0]
 2595 1080 0243     		orrs	r2, r2, r0
 2596 1082 0A43     		orrs	r2, r2, r1
 2597 1084 9A60     		str	r2, [r3, #8]
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2598              		.loc 1 1688 0
 2599 1086 4FF42053 		mov	r3, #10240
 2600 108a C4F20003 		movt	r3, 16384
 2601 108e 4FF0FF02 		mov	r2, #255
 2602 1092 5A62     		str	r2, [r3, #36]
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2603              		.loc 1 1689 0
 2604 1094 07F10C07 		add	r7, r7, #12
 2605 1098 BD46     		mov	sp, r7
 2606 109a 80BC     		pop	{r7}
 2607 109c 7047     		bx	lr
 2608              		.cfi_endproc
 2609              	.LFE138:
 2611 109e 00BF     		.align	2
 2612              		.global	RTC_CoarseCalibConfig
 2613              		.thumb
 2614              		.thumb_func
 2616              	RTC_CoarseCalibConfig:
 2617              	.LFB139:
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2618              		.loc 1 1726 0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 16
 2621              		@ frame_needed = 1, uses_anonymous_args = 0
 2622 10a0 80B5     		push	{r7, lr}
 2623              	.LCFI84:
 2624              		.cfi_def_cfa_offset 8
 2625              		.cfi_offset 14, -4
 2626              		.cfi_offset 7, -8
 2627 10a2 84B0     		sub	sp, sp, #16
 2628              	.LCFI85:
 2629              		.cfi_def_cfa_offset 24
 2630 10a4 00AF     		add	r7, sp, #0
 2631              	.LCFI86:
 2632              		.cfi_def_cfa_register 7
 2633 10a6 7860     		str	r0, [r7, #4]
 2634 10a8 3960     		str	r1, [r7, #0]
1727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2635              		.loc 1 1727 0
 2636 10aa 4FF00003 		mov	r3, #0
 2637 10ae FB73     		strb	r3, [r7, #15]
1728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2638              		.loc 1 1734 0
 2639 10b0 4FF42053 		mov	r3, #10240
 2640 10b4 C4F20003 		movt	r3, 16384
 2641 10b8 4FF0CA02 		mov	r2, #202
 2642 10bc 5A62     		str	r2, [r3, #36]
1735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2643              		.loc 1 1735 0
 2644 10be 4FF42053 		mov	r3, #10240
 2645 10c2 C4F20003 		movt	r3, 16384
 2646 10c6 4FF05302 		mov	r2, #83
 2647 10ca 5A62     		str	r2, [r3, #36]
1736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2648              		.loc 1 1738 0
 2649 10cc FFF7FEFF 		bl	RTC_EnterInitMode
 2650 10d0 0346     		mov	r3, r0
 2651 10d2 002B     		cmp	r3, #0
 2652 10d4 03D1     		bne	.L100
1739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2653              		.loc 1 1740 0
 2654 10d6 4FF00003 		mov	r3, #0
 2655 10da FB73     		strb	r3, [r7, #15]
 2656 10dc 0CE0     		b	.L101
 2657              	.L100:
1741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2658              		.loc 1 1745 0
 2659 10de 4FF42053 		mov	r3, #10240
 2660 10e2 C4F20003 		movt	r3, 16384
 2661 10e6 7968     		ldr	r1, [r7, #4]
 2662 10e8 3A68     		ldr	r2, [r7, #0]
 2663 10ea 0A43     		orrs	r2, r2, r1
 2664 10ec 9A61     		str	r2, [r3, #24]
1746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2665              		.loc 1 1747 0
 2666 10ee FFF7FEFF 		bl	RTC_ExitInitMode
1748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2667              		.loc 1 1749 0
 2668 10f2 4FF00103 		mov	r3, #1
 2669 10f6 FB73     		strb	r3, [r7, #15]
 2670              	.L101:
1750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2671              		.loc 1 1753 0
 2672 10f8 4FF42053 		mov	r3, #10240
 2673 10fc C4F20003 		movt	r3, 16384
 2674 1100 4FF0FF02 		mov	r2, #255
 2675 1104 5A62     		str	r2, [r3, #36]
1754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2676              		.loc 1 1755 0
 2677 1106 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2678              		.loc 1 1756 0
 2679 1108 1846     		mov	r0, r3
 2680 110a 07F11007 		add	r7, r7, #16
 2681 110e BD46     		mov	sp, r7
 2682 1110 80BD     		pop	{r7, pc}
 2683              		.cfi_endproc
 2684              	.LFE139:
 2686 1112 00BF     		.align	2
 2687              		.global	RTC_CoarseCalibCmd
 2688              		.thumb
 2689              		.thumb_func
 2691              	RTC_CoarseCalibCmd:
 2692              	.LFB140:
1757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2693              		.loc 1 1767 0
 2694              		.cfi_startproc
 2695              		@ args = 0, pretend = 0, frame = 16
 2696              		@ frame_needed = 1, uses_anonymous_args = 0
 2697 1114 80B5     		push	{r7, lr}
 2698              	.LCFI87:
 2699              		.cfi_def_cfa_offset 8
 2700              		.cfi_offset 14, -4
 2701              		.cfi_offset 7, -8
 2702 1116 84B0     		sub	sp, sp, #16
 2703              	.LCFI88:
 2704              		.cfi_def_cfa_offset 24
 2705 1118 00AF     		add	r7, sp, #0
 2706              	.LCFI89:
 2707              		.cfi_def_cfa_register 7
 2708 111a 0346     		mov	r3, r0
 2709 111c FB71     		strb	r3, [r7, #7]
1768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2710              		.loc 1 1768 0
 2711 111e 4FF00003 		mov	r3, #0
 2712 1122 FB73     		strb	r3, [r7, #15]
1769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2713              		.loc 1 1774 0
 2714 1124 4FF42053 		mov	r3, #10240
 2715 1128 C4F20003 		movt	r3, 16384
 2716 112c 4FF0CA02 		mov	r2, #202
 2717 1130 5A62     		str	r2, [r3, #36]
1775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2718              		.loc 1 1775 0
 2719 1132 4FF42053 		mov	r3, #10240
 2720 1136 C4F20003 		movt	r3, 16384
 2721 113a 4FF05302 		mov	r2, #83
 2722 113e 5A62     		str	r2, [r3, #36]
1776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2723              		.loc 1 1778 0
 2724 1140 FFF7FEFF 		bl	RTC_EnterInitMode
 2725 1144 0346     		mov	r3, r0
 2726 1146 002B     		cmp	r3, #0
 2727 1148 03D1     		bne	.L103
1779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2728              		.loc 1 1780 0
 2729 114a 4FF00003 		mov	r3, #0
 2730 114e FB73     		strb	r3, [r7, #15]
 2731 1150 20E0     		b	.L104
 2732              	.L103:
1781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2733              		.loc 1 1784 0
 2734 1152 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2735 1154 002B     		cmp	r3, #0
 2736 1156 0CD0     		beq	.L105
1785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2737              		.loc 1 1787 0
 2738 1158 4FF42053 		mov	r3, #10240
 2739 115c C4F20003 		movt	r3, 16384
 2740 1160 4FF42052 		mov	r2, #10240
 2741 1164 C4F20002 		movt	r2, 16384
 2742 1168 9268     		ldr	r2, [r2, #8]
 2743 116a 42F08002 		orr	r2, r2, #128
 2744 116e 9A60     		str	r2, [r3, #8]
 2745 1170 0BE0     		b	.L106
 2746              	.L105:
1788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2747              		.loc 1 1792 0
 2748 1172 4FF42053 		mov	r3, #10240
 2749 1176 C4F20003 		movt	r3, 16384
 2750 117a 4FF42052 		mov	r2, #10240
 2751 117e C4F20002 		movt	r2, 16384
 2752 1182 9268     		ldr	r2, [r2, #8]
 2753 1184 22F08002 		bic	r2, r2, #128
 2754 1188 9A60     		str	r2, [r3, #8]
 2755              	.L106:
1793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2756              		.loc 1 1795 0
 2757 118a FFF7FEFF 		bl	RTC_ExitInitMode
1796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2758              		.loc 1 1797 0
 2759 118e 4FF00103 		mov	r3, #1
 2760 1192 FB73     		strb	r3, [r7, #15]
 2761              	.L104:
1798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2762              		.loc 1 1801 0
 2763 1194 4FF42053 		mov	r3, #10240
 2764 1198 C4F20003 		movt	r3, 16384
 2765 119c 4FF0FF02 		mov	r2, #255
 2766 11a0 5A62     		str	r2, [r3, #36]
1802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2767              		.loc 1 1803 0
 2768 11a2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2769              		.loc 1 1804 0
 2770 11a4 1846     		mov	r0, r3
 2771 11a6 07F11007 		add	r7, r7, #16
 2772 11aa BD46     		mov	sp, r7
 2773 11ac 80BD     		pop	{r7, pc}
 2774              		.cfi_endproc
 2775              	.LFE140:
 2777 11ae 00BF     		.align	2
 2778              		.global	RTC_CalibOutputCmd
 2779              		.thumb
 2780              		.thumb_func
 2782              	RTC_CalibOutputCmd:
 2783              	.LFB141:
1805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2784              		.loc 1 1813 0
 2785              		.cfi_startproc
 2786              		@ args = 0, pretend = 0, frame = 8
 2787              		@ frame_needed = 1, uses_anonymous_args = 0
 2788              		@ link register save eliminated.
 2789 11b0 80B4     		push	{r7}
 2790              	.LCFI90:
 2791              		.cfi_def_cfa_offset 4
 2792              		.cfi_offset 7, -4
 2793 11b2 83B0     		sub	sp, sp, #12
 2794              	.LCFI91:
 2795              		.cfi_def_cfa_offset 16
 2796 11b4 00AF     		add	r7, sp, #0
 2797              	.LCFI92:
 2798              		.cfi_def_cfa_register 7
 2799 11b6 0346     		mov	r3, r0
 2800 11b8 FB71     		strb	r3, [r7, #7]
1814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2801              		.loc 1 1818 0
 2802 11ba 4FF42053 		mov	r3, #10240
 2803 11be C4F20003 		movt	r3, 16384
 2804 11c2 4FF0CA02 		mov	r2, #202
 2805 11c6 5A62     		str	r2, [r3, #36]
1819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2806              		.loc 1 1819 0
 2807 11c8 4FF42053 		mov	r3, #10240
 2808 11cc C4F20003 		movt	r3, 16384
 2809 11d0 4FF05302 		mov	r2, #83
 2810 11d4 5A62     		str	r2, [r3, #36]
1820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2811              		.loc 1 1821 0
 2812 11d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2813 11d8 002B     		cmp	r3, #0
 2814 11da 0CD0     		beq	.L108
1822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2815              		.loc 1 1824 0
 2816 11dc 4FF42053 		mov	r3, #10240
 2817 11e0 C4F20003 		movt	r3, 16384
 2818 11e4 4FF42052 		mov	r2, #10240
 2819 11e8 C4F20002 		movt	r2, 16384
 2820 11ec 9268     		ldr	r2, [r2, #8]
 2821 11ee 42F40002 		orr	r2, r2, #8388608
 2822 11f2 9A60     		str	r2, [r3, #8]
 2823 11f4 0BE0     		b	.L109
 2824              	.L108:
1825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2825              		.loc 1 1829 0
 2826 11f6 4FF42053 		mov	r3, #10240
 2827 11fa C4F20003 		movt	r3, 16384
 2828 11fe 4FF42052 		mov	r2, #10240
 2829 1202 C4F20002 		movt	r2, 16384
 2830 1206 9268     		ldr	r2, [r2, #8]
 2831 1208 22F40002 		bic	r2, r2, #8388608
 2832 120c 9A60     		str	r2, [r3, #8]
 2833              	.L109:
1830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2834              		.loc 1 1833 0
 2835 120e 4FF42053 		mov	r3, #10240
 2836 1212 C4F20003 		movt	r3, 16384
 2837 1216 4FF0FF02 		mov	r2, #255
 2838 121a 5A62     		str	r2, [r3, #36]
1834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2839              		.loc 1 1834 0
 2840 121c 07F10C07 		add	r7, r7, #12
 2841 1220 BD46     		mov	sp, r7
 2842 1222 80BC     		pop	{r7}
 2843 1224 7047     		bx	lr
 2844              		.cfi_endproc
 2845              	.LFE141:
 2847 1226 00BF     		.align	2
 2848              		.global	RTC_CalibOutputConfig
 2849              		.thumb
 2850              		.thumb_func
 2852              	RTC_CalibOutputConfig:
 2853              	.LFB142:
1835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2854              		.loc 1 1845 0
 2855              		.cfi_startproc
 2856              		@ args = 0, pretend = 0, frame = 8
 2857              		@ frame_needed = 1, uses_anonymous_args = 0
 2858              		@ link register save eliminated.
 2859 1228 80B4     		push	{r7}
 2860              	.LCFI93:
 2861              		.cfi_def_cfa_offset 4
 2862              		.cfi_offset 7, -4
 2863 122a 83B0     		sub	sp, sp, #12
 2864              	.LCFI94:
 2865              		.cfi_def_cfa_offset 16
 2866 122c 00AF     		add	r7, sp, #0
 2867              	.LCFI95:
 2868              		.cfi_def_cfa_register 7
 2869 122e 7860     		str	r0, [r7, #4]
1846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2870              		.loc 1 1850 0
 2871 1230 4FF42053 		mov	r3, #10240
 2872 1234 C4F20003 		movt	r3, 16384
 2873 1238 4FF0CA02 		mov	r2, #202
 2874 123c 5A62     		str	r2, [r3, #36]
1851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2875              		.loc 1 1851 0
 2876 123e 4FF42053 		mov	r3, #10240
 2877 1242 C4F20003 		movt	r3, 16384
 2878 1246 4FF05302 		mov	r2, #83
 2879 124a 5A62     		str	r2, [r3, #36]
1852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2880              		.loc 1 1854 0
 2881 124c 4FF42053 		mov	r3, #10240
 2882 1250 C4F20003 		movt	r3, 16384
 2883 1254 4FF42052 		mov	r2, #10240
 2884 1258 C4F20002 		movt	r2, 16384
 2885 125c 9268     		ldr	r2, [r2, #8]
 2886 125e 22F40022 		bic	r2, r2, #524288
 2887 1262 9A60     		str	r2, [r3, #8]
1855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2888              		.loc 1 1857 0
 2889 1264 4FF42053 		mov	r3, #10240
 2890 1268 C4F20003 		movt	r3, 16384
 2891 126c 4FF42052 		mov	r2, #10240
 2892 1270 C4F20002 		movt	r2, 16384
 2893 1274 9168     		ldr	r1, [r2, #8]
 2894 1276 7A68     		ldr	r2, [r7, #4]
 2895 1278 0A43     		orrs	r2, r2, r1
 2896 127a 9A60     		str	r2, [r3, #8]
1858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2897              		.loc 1 1860 0
 2898 127c 4FF42053 		mov	r3, #10240
 2899 1280 C4F20003 		movt	r3, 16384
 2900 1284 4FF0FF02 		mov	r2, #255
 2901 1288 5A62     		str	r2, [r3, #36]
1861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2902              		.loc 1 1861 0
 2903 128a 07F10C07 		add	r7, r7, #12
 2904 128e BD46     		mov	sp, r7
 2905 1290 80BC     		pop	{r7}
 2906 1292 7047     		bx	lr
 2907              		.cfi_endproc
 2908              	.LFE142:
 2910              		.align	2
 2911              		.global	RTC_SmoothCalibConfig
 2912              		.thumb
 2913              		.thumb_func
 2915              	RTC_SmoothCalibConfig:
 2916              	.LFB143:
1862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2917              		.loc 1 1883 0
 2918              		.cfi_startproc
 2919              		@ args = 0, pretend = 0, frame = 24
 2920              		@ frame_needed = 1, uses_anonymous_args = 0
 2921              		@ link register save eliminated.
 2922 1294 80B4     		push	{r7}
 2923              	.LCFI96:
 2924              		.cfi_def_cfa_offset 4
 2925              		.cfi_offset 7, -4
 2926 1296 87B0     		sub	sp, sp, #28
 2927              	.LCFI97:
 2928              		.cfi_def_cfa_offset 32
 2929 1298 00AF     		add	r7, sp, #0
 2930              	.LCFI98:
 2931              		.cfi_def_cfa_register 7
 2932 129a F860     		str	r0, [r7, #12]
 2933 129c B960     		str	r1, [r7, #8]
 2934 129e 7A60     		str	r2, [r7, #4]
1884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2935              		.loc 1 1884 0
 2936 12a0 4FF00003 		mov	r3, #0
 2937 12a4 FB75     		strb	r3, [r7, #23]
1885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2938              		.loc 1 1885 0
 2939 12a6 4FF00003 		mov	r3, #0
 2940 12aa 3B61     		str	r3, [r7, #16]
1886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2941              		.loc 1 1893 0
 2942 12ac 4FF42053 		mov	r3, #10240
 2943 12b0 C4F20003 		movt	r3, 16384
 2944 12b4 4FF0CA02 		mov	r2, #202
 2945 12b8 5A62     		str	r2, [r3, #36]
1894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2946              		.loc 1 1894 0
 2947 12ba 4FF42053 		mov	r3, #10240
 2948 12be C4F20003 		movt	r3, 16384
 2949 12c2 4FF05302 		mov	r2, #83
 2950 12c6 5A62     		str	r2, [r3, #36]
1895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2951              		.loc 1 1897 0
 2952 12c8 4FF42053 		mov	r3, #10240
 2953 12cc C4F20003 		movt	r3, 16384
 2954 12d0 DB68     		ldr	r3, [r3, #12]
 2955 12d2 03F48033 		and	r3, r3, #65536
 2956 12d6 002B     		cmp	r3, #0
 2957 12d8 11D0     		beq	.L112
1898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2958              		.loc 1 1900 0
 2959 12da 03E0     		b	.L113
 2960              	.L114:
1901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2961              		.loc 1 1902 0
 2962 12dc 3B69     		ldr	r3, [r7, #16]
 2963 12de 03F10103 		add	r3, r3, #1
 2964 12e2 3B61     		str	r3, [r7, #16]
 2965              	.L113:
1900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2966              		.loc 1 1900 0 discriminator 1
 2967 12e4 4FF42053 		mov	r3, #10240
 2968 12e8 C4F20003 		movt	r3, 16384
 2969 12ec DB68     		ldr	r3, [r3, #12]
 2970 12ee 03F48033 		and	r3, r3, #65536
 2971 12f2 002B     		cmp	r3, #0
 2972 12f4 03D0     		beq	.L112
1900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2973              		.loc 1 1900 0 is_stmt 0 discriminator 2
 2974 12f6 3B69     		ldr	r3, [r7, #16]
 2975 12f8 B3F5003F 		cmp	r3, #131072
 2976 12fc EED1     		bne	.L114
 2977              	.L112:
1903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2978              		.loc 1 1907 0 is_stmt 1
 2979 12fe 4FF42053 		mov	r3, #10240
 2980 1302 C4F20003 		movt	r3, 16384
 2981 1306 DB68     		ldr	r3, [r3, #12]
 2982 1308 03F48033 		and	r3, r3, #65536
 2983 130c 002B     		cmp	r3, #0
 2984 130e 0DD1     		bne	.L115
1908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2985              		.loc 1 1910 0
 2986 1310 4FF42053 		mov	r3, #10240
 2987 1314 C4F20003 		movt	r3, 16384
 2988 1318 F968     		ldr	r1, [r7, #12]
 2989 131a BA68     		ldr	r2, [r7, #8]
 2990 131c 1143     		orrs	r1, r1, r2
 2991 131e 7A68     		ldr	r2, [r7, #4]
 2992 1320 0A43     		orrs	r2, r2, r1
 2993 1322 DA63     		str	r2, [r3, #60]
1911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2994              		.loc 1 1912 0
 2995 1324 4FF00103 		mov	r3, #1
 2996 1328 FB75     		strb	r3, [r7, #23]
 2997 132a 02E0     		b	.L116
 2998              	.L115:
1913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2999              		.loc 1 1916 0
 3000 132c 4FF00003 		mov	r3, #0
 3001 1330 FB75     		strb	r3, [r7, #23]
 3002              	.L116:
1917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3003              		.loc 1 1920 0
 3004 1332 4FF42053 		mov	r3, #10240
 3005 1336 C4F20003 		movt	r3, 16384
 3006 133a 4FF0FF02 		mov	r2, #255
 3007 133e 5A62     		str	r2, [r3, #36]
1921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3008              		.loc 1 1922 0
 3009 1340 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3010              		.loc 1 1923 0
 3011 1342 1846     		mov	r0, r3
 3012 1344 07F11C07 		add	r7, r7, #28
 3013 1348 BD46     		mov	sp, r7
 3014 134a 80BC     		pop	{r7}
 3015 134c 7047     		bx	lr
 3016              		.cfi_endproc
 3017              	.LFE143:
 3019 134e 00BF     		.align	2
 3020              		.global	RTC_TimeStampCmd
 3021              		.thumb
 3022              		.thumb_func
 3024              	RTC_TimeStampCmd:
 3025              	.LFB144:
1924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3026              		.loc 1 1957 0
 3027              		.cfi_startproc
 3028              		@ args = 0, pretend = 0, frame = 16
 3029              		@ frame_needed = 1, uses_anonymous_args = 0
 3030              		@ link register save eliminated.
 3031 1350 80B4     		push	{r7}
 3032              	.LCFI99:
 3033              		.cfi_def_cfa_offset 4
 3034              		.cfi_offset 7, -4
 3035 1352 85B0     		sub	sp, sp, #20
 3036              	.LCFI100:
 3037              		.cfi_def_cfa_offset 24
 3038 1354 00AF     		add	r7, sp, #0
 3039              	.LCFI101:
 3040              		.cfi_def_cfa_register 7
 3041 1356 7860     		str	r0, [r7, #4]
 3042 1358 0B46     		mov	r3, r1
 3043 135a FB70     		strb	r3, [r7, #3]
1958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3044              		.loc 1 1958 0
 3045 135c 4FF00003 		mov	r3, #0
 3046 1360 FB60     		str	r3, [r7, #12]
1959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3047              		.loc 1 1965 0
 3048 1362 4FF42053 		mov	r3, #10240
 3049 1366 C4F20003 		movt	r3, 16384
 3050 136a 9B68     		ldr	r3, [r3, #8]
 3051 136c 23F40063 		bic	r3, r3, #2048
 3052 1370 23F00803 		bic	r3, r3, #8
 3053 1374 FB60     		str	r3, [r7, #12]
1966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3054              		.loc 1 1968 0
 3055 1376 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3056 1378 002B     		cmp	r3, #0
 3057 137a 06D0     		beq	.L118
1969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3058              		.loc 1 1970 0
 3059 137c 7A68     		ldr	r2, [r7, #4]
 3060 137e FB68     		ldr	r3, [r7, #12]
 3061 1380 1343     		orrs	r3, r3, r2
 3062 1382 43F40063 		orr	r3, r3, #2048
 3063 1386 FB60     		str	r3, [r7, #12]
 3064 1388 03E0     		b	.L119
 3065              	.L118:
1971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3066              		.loc 1 1974 0
 3067 138a FA68     		ldr	r2, [r7, #12]
 3068 138c 7B68     		ldr	r3, [r7, #4]
 3069 138e 1343     		orrs	r3, r3, r2
 3070 1390 FB60     		str	r3, [r7, #12]
 3071              	.L119:
1975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3072              		.loc 1 1978 0
 3073 1392 4FF42053 		mov	r3, #10240
 3074 1396 C4F20003 		movt	r3, 16384
 3075 139a 4FF0CA02 		mov	r2, #202
 3076 139e 5A62     		str	r2, [r3, #36]
1979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3077              		.loc 1 1979 0
 3078 13a0 4FF42053 		mov	r3, #10240
 3079 13a4 C4F20003 		movt	r3, 16384
 3080 13a8 4FF05302 		mov	r2, #83
 3081 13ac 5A62     		str	r2, [r3, #36]
1980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3082              		.loc 1 1982 0
 3083 13ae 4FF42053 		mov	r3, #10240
 3084 13b2 C4F20003 		movt	r3, 16384
 3085 13b6 FA68     		ldr	r2, [r7, #12]
 3086 13b8 9A60     		str	r2, [r3, #8]
1983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3087              		.loc 1 1985 0
 3088 13ba 4FF42053 		mov	r3, #10240
 3089 13be C4F20003 		movt	r3, 16384
 3090 13c2 4FF0FF02 		mov	r2, #255
 3091 13c6 5A62     		str	r2, [r3, #36]
1986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3092              		.loc 1 1986 0
 3093 13c8 07F11407 		add	r7, r7, #20
 3094 13cc BD46     		mov	sp, r7
 3095 13ce 80BC     		pop	{r7}
 3096 13d0 7047     		bx	lr
 3097              		.cfi_endproc
 3098              	.LFE144:
 3100 13d2 00BF     		.align	2
 3101              		.global	RTC_GetTimeStamp
 3102              		.thumb
 3103              		.thumb_func
 3105              	RTC_GetTimeStamp:
 3106              	.LFB145:
1987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3107              		.loc 1 2002 0
 3108              		.cfi_startproc
 3109              		@ args = 0, pretend = 0, frame = 24
 3110              		@ frame_needed = 1, uses_anonymous_args = 0
 3111 13d4 80B5     		push	{r7, lr}
 3112              	.LCFI102:
 3113              		.cfi_def_cfa_offset 8
 3114              		.cfi_offset 14, -4
 3115              		.cfi_offset 7, -8
 3116 13d6 86B0     		sub	sp, sp, #24
 3117              	.LCFI103:
 3118              		.cfi_def_cfa_offset 32
 3119 13d8 00AF     		add	r7, sp, #0
 3120              	.LCFI104:
 3121              		.cfi_def_cfa_register 7
 3122 13da F860     		str	r0, [r7, #12]
 3123 13dc B960     		str	r1, [r7, #8]
 3124 13de 7A60     		str	r2, [r7, #4]
2003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3125              		.loc 1 2003 0
 3126 13e0 4FF00003 		mov	r3, #0
 3127 13e4 7B61     		str	r3, [r7, #20]
 3128 13e6 4FF00003 		mov	r3, #0
 3129 13ea 3B61     		str	r3, [r7, #16]
2004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3130              		.loc 1 2009 0
 3131 13ec 4FF42053 		mov	r3, #10240
 3132 13f0 C4F20003 		movt	r3, 16384
 3133 13f4 1A6B     		ldr	r2, [r3, #48]
 3134 13f6 47F67F73 		movw	r3, #32639
 3135 13fa C0F27F03 		movt	r3, 127
 3136 13fe 1340     		ands	r3, r3, r2
 3137 1400 7B61     		str	r3, [r7, #20]
2010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3138              		.loc 1 2010 0
 3139 1402 4FF42053 		mov	r3, #10240
 3140 1406 C4F20003 		movt	r3, 16384
 3141 140a 5B6B     		ldr	r3, [r3, #52]
 3142 140c 23F07F43 		bic	r3, r3, #-16777216
 3143 1410 23F0C003 		bic	r3, r3, #192
 3144 1414 3B61     		str	r3, [r7, #16]
2011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3145              		.loc 1 2013 0
 3146 1416 7B69     		ldr	r3, [r7, #20]
 3147 1418 03F47C13 		and	r3, r3, #4128768
 3148 141c 4FEA1343 		lsr	r3, r3, #16
 3149 1420 DAB2     		uxtb	r2, r3
 3150 1422 BB68     		ldr	r3, [r7, #8]
 3151 1424 1A70     		strb	r2, [r3, #0]
2014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3152              		.loc 1 2014 0
 3153 1426 7B69     		ldr	r3, [r7, #20]
 3154 1428 03F4FE43 		and	r3, r3, #32512
 3155 142c 4FEA1323 		lsr	r3, r3, #8
 3156 1430 DAB2     		uxtb	r2, r3
 3157 1432 BB68     		ldr	r3, [r7, #8]
 3158 1434 5A70     		strb	r2, [r3, #1]
2015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3159              		.loc 1 2015 0
 3160 1436 7B69     		ldr	r3, [r7, #20]
 3161 1438 DBB2     		uxtb	r3, r3
 3162 143a 03F07F03 		and	r3, r3, #127
 3163 143e DAB2     		uxtb	r2, r3
 3164 1440 BB68     		ldr	r3, [r7, #8]
 3165 1442 9A70     		strb	r2, [r3, #2]
2016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3166              		.loc 1 2016 0
 3167 1444 7B69     		ldr	r3, [r7, #20]
 3168 1446 03F48003 		and	r3, r3, #4194304
 3169 144a 4FEA1343 		lsr	r3, r3, #16
 3170 144e DAB2     		uxtb	r2, r3
 3171 1450 BB68     		ldr	r3, [r7, #8]
 3172 1452 DA70     		strb	r2, [r3, #3]
2017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3173              		.loc 1 2019 0
 3174 1454 7B68     		ldr	r3, [r7, #4]
 3175 1456 4FF00002 		mov	r2, #0
 3176 145a DA70     		strb	r2, [r3, #3]
2020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3177              		.loc 1 2020 0
 3178 145c 3B69     		ldr	r3, [r7, #16]
 3179 145e 03F4F853 		and	r3, r3, #7936
 3180 1462 4FEA1323 		lsr	r3, r3, #8
 3181 1466 DAB2     		uxtb	r2, r3
 3182 1468 7B68     		ldr	r3, [r7, #4]
 3183 146a 5A70     		strb	r2, [r3, #1]
2021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3184              		.loc 1 2021 0
 3185 146c 3B69     		ldr	r3, [r7, #16]
 3186 146e DBB2     		uxtb	r3, r3
 3187 1470 03F03F03 		and	r3, r3, #63
 3188 1474 DAB2     		uxtb	r2, r3
 3189 1476 7B68     		ldr	r3, [r7, #4]
 3190 1478 9A70     		strb	r2, [r3, #2]
2022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3191              		.loc 1 2022 0
 3192 147a 3B69     		ldr	r3, [r7, #16]
 3193 147c 03F46043 		and	r3, r3, #57344
 3194 1480 4FEA5333 		lsr	r3, r3, #13
 3195 1484 DAB2     		uxtb	r2, r3
 3196 1486 7B68     		ldr	r3, [r7, #4]
 3197 1488 1A70     		strb	r2, [r3, #0]
2023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3198              		.loc 1 2025 0
 3199 148a FB68     		ldr	r3, [r7, #12]
 3200 148c 002B     		cmp	r3, #0
 3201 148e 35D1     		bne	.L120
2026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3202              		.loc 1 2028 0
 3203 1490 BB68     		ldr	r3, [r7, #8]
 3204 1492 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3205 1494 1846     		mov	r0, r3
 3206 1496 00F089FB 		bl	RTC_Bcd2ToByte
 3207 149a 0346     		mov	r3, r0
 3208 149c 1A46     		mov	r2, r3
 3209 149e BB68     		ldr	r3, [r7, #8]
 3210 14a0 1A70     		strb	r2, [r3, #0]
2029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3211              		.loc 1 2029 0
 3212 14a2 BB68     		ldr	r3, [r7, #8]
 3213 14a4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3214 14a6 1846     		mov	r0, r3
 3215 14a8 00F080FB 		bl	RTC_Bcd2ToByte
 3216 14ac 0346     		mov	r3, r0
 3217 14ae 1A46     		mov	r2, r3
 3218 14b0 BB68     		ldr	r3, [r7, #8]
 3219 14b2 5A70     		strb	r2, [r3, #1]
2030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3220              		.loc 1 2030 0
 3221 14b4 BB68     		ldr	r3, [r7, #8]
 3222 14b6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3223 14b8 1846     		mov	r0, r3
 3224 14ba 00F077FB 		bl	RTC_Bcd2ToByte
 3225 14be 0346     		mov	r3, r0
 3226 14c0 1A46     		mov	r2, r3
 3227 14c2 BB68     		ldr	r3, [r7, #8]
 3228 14c4 9A70     		strb	r2, [r3, #2]
2031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3229              		.loc 1 2033 0
 3230 14c6 7B68     		ldr	r3, [r7, #4]
 3231 14c8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3232 14ca 1846     		mov	r0, r3
 3233 14cc 00F06EFB 		bl	RTC_Bcd2ToByte
 3234 14d0 0346     		mov	r3, r0
 3235 14d2 1A46     		mov	r2, r3
 3236 14d4 7B68     		ldr	r3, [r7, #4]
 3237 14d6 5A70     		strb	r2, [r3, #1]
2034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3238              		.loc 1 2034 0
 3239 14d8 7B68     		ldr	r3, [r7, #4]
 3240 14da 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3241 14dc 1846     		mov	r0, r3
 3242 14de 00F065FB 		bl	RTC_Bcd2ToByte
 3243 14e2 0346     		mov	r3, r0
 3244 14e4 1A46     		mov	r2, r3
 3245 14e6 7B68     		ldr	r3, [r7, #4]
 3246 14e8 9A70     		strb	r2, [r3, #2]
2035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3247              		.loc 1 2035 0
 3248 14ea 7B68     		ldr	r3, [r7, #4]
 3249 14ec 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3250 14ee 1846     		mov	r0, r3
 3251 14f0 00F05CFB 		bl	RTC_Bcd2ToByte
 3252 14f4 0346     		mov	r3, r0
 3253 14f6 1A46     		mov	r2, r3
 3254 14f8 7B68     		ldr	r3, [r7, #4]
 3255 14fa 1A70     		strb	r2, [r3, #0]
 3256              	.L120:
2036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3257              		.loc 1 2037 0
 3258 14fc 07F11807 		add	r7, r7, #24
 3259 1500 BD46     		mov	sp, r7
 3260 1502 80BD     		pop	{r7, pc}
 3261              		.cfi_endproc
 3262              	.LFE145:
 3264              		.align	2
 3265              		.global	RTC_GetTimeStampSubSecond
 3266              		.thumb
 3267              		.thumb_func
 3269              	RTC_GetTimeStampSubSecond:
 3270              	.LFB146:
2038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3271              		.loc 1 2045 0
 3272              		.cfi_startproc
 3273              		@ args = 0, pretend = 0, frame = 0
 3274              		@ frame_needed = 1, uses_anonymous_args = 0
 3275              		@ link register save eliminated.
 3276 1504 80B4     		push	{r7}
 3277              	.LCFI105:
 3278              		.cfi_def_cfa_offset 4
 3279              		.cfi_offset 7, -4
 3280 1506 00AF     		add	r7, sp, #0
 3281              	.LCFI106:
 3282              		.cfi_def_cfa_register 7
2046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3283              		.loc 1 2047 0
 3284 1508 4FF42053 		mov	r3, #10240
 3285 150c C4F20003 		movt	r3, 16384
 3286 1510 9B6B     		ldr	r3, [r3, #56]
2048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3287              		.loc 1 2048 0
 3288 1512 1846     		mov	r0, r3
 3289 1514 BD46     		mov	sp, r7
 3290 1516 80BC     		pop	{r7}
 3291 1518 7047     		bx	lr
 3292              		.cfi_endproc
 3293              	.LFE146:
 3295 151a 00BF     		.align	2
 3296              		.global	RTC_TamperTriggerConfig
 3297              		.thumb
 3298              		.thumb_func
 3300              	RTC_TamperTriggerConfig:
 3301              	.LFB147:
2049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3302              		.loc 1 2080 0
 3303              		.cfi_startproc
 3304              		@ args = 0, pretend = 0, frame = 8
 3305              		@ frame_needed = 1, uses_anonymous_args = 0
 3306              		@ link register save eliminated.
 3307 151c 80B4     		push	{r7}
 3308              	.LCFI107:
 3309              		.cfi_def_cfa_offset 4
 3310              		.cfi_offset 7, -4
 3311 151e 83B0     		sub	sp, sp, #12
 3312              	.LCFI108:
 3313              		.cfi_def_cfa_offset 16
 3314 1520 00AF     		add	r7, sp, #0
 3315              	.LCFI109:
 3316              		.cfi_def_cfa_register 7
 3317 1522 7860     		str	r0, [r7, #4]
 3318 1524 3960     		str	r1, [r7, #0]
2081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3319              		.loc 1 2085 0
 3320 1526 3B68     		ldr	r3, [r7, #0]
 3321 1528 002B     		cmp	r3, #0
 3322 152a 10D1     		bne	.L124
2086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3323              		.loc 1 2088 0
 3324 152c 4FF42053 		mov	r3, #10240
 3325 1530 C4F20003 		movt	r3, 16384
 3326 1534 4FF42052 		mov	r2, #10240
 3327 1538 C4F20002 		movt	r2, 16384
 3328 153c 116C     		ldr	r1, [r2, #64]
 3329 153e 7A68     		ldr	r2, [r7, #4]
 3330 1540 4FEA4202 		lsl	r2, r2, #1
 3331 1544 6FEA0202 		mvn	r2, r2
 3332 1548 0A40     		ands	r2, r2, r1
 3333 154a 1A64     		str	r2, [r3, #64]
 3334 154c 0DE0     		b	.L123
 3335              	.L124:
2089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3336              		.loc 1 2093 0
 3337 154e 4FF42053 		mov	r3, #10240
 3338 1552 C4F20003 		movt	r3, 16384
 3339 1556 4FF42052 		mov	r2, #10240
 3340 155a C4F20002 		movt	r2, 16384
 3341 155e 116C     		ldr	r1, [r2, #64]
 3342 1560 7A68     		ldr	r2, [r7, #4]
 3343 1562 4FEA4202 		lsl	r2, r2, #1
 3344 1566 0A43     		orrs	r2, r2, r1
 3345 1568 1A64     		str	r2, [r3, #64]
 3346              	.L123:
2094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3347              		.loc 1 2095 0
 3348 156a 07F10C07 		add	r7, r7, #12
 3349 156e BD46     		mov	sp, r7
 3350 1570 80BC     		pop	{r7}
 3351 1572 7047     		bx	lr
 3352              		.cfi_endproc
 3353              	.LFE147:
 3355              		.align	2
 3356              		.global	RTC_TamperCmd
 3357              		.thumb
 3358              		.thumb_func
 3360              	RTC_TamperCmd:
 3361              	.LFB148:
2096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3362              		.loc 1 2106 0
 3363              		.cfi_startproc
 3364              		@ args = 0, pretend = 0, frame = 8
 3365              		@ frame_needed = 1, uses_anonymous_args = 0
 3366              		@ link register save eliminated.
 3367 1574 80B4     		push	{r7}
 3368              	.LCFI110:
 3369              		.cfi_def_cfa_offset 4
 3370              		.cfi_offset 7, -4
 3371 1576 83B0     		sub	sp, sp, #12
 3372              	.LCFI111:
 3373              		.cfi_def_cfa_offset 16
 3374 1578 00AF     		add	r7, sp, #0
 3375              	.LCFI112:
 3376              		.cfi_def_cfa_register 7
 3377 157a 7860     		str	r0, [r7, #4]
 3378 157c 0B46     		mov	r3, r1
 3379 157e FB70     		strb	r3, [r7, #3]
2107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3380              		.loc 1 2111 0
 3381 1580 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3382 1582 002B     		cmp	r3, #0
 3383 1584 0CD0     		beq	.L127
2112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3384              		.loc 1 2114 0
 3385 1586 4FF42053 		mov	r3, #10240
 3386 158a C4F20003 		movt	r3, 16384
 3387 158e 4FF42052 		mov	r2, #10240
 3388 1592 C4F20002 		movt	r2, 16384
 3389 1596 116C     		ldr	r1, [r2, #64]
 3390 1598 7A68     		ldr	r2, [r7, #4]
 3391 159a 0A43     		orrs	r2, r2, r1
 3392 159c 1A64     		str	r2, [r3, #64]
 3393 159e 0DE0     		b	.L126
 3394              	.L127:
2115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3395              		.loc 1 2119 0
 3396 15a0 4FF42053 		mov	r3, #10240
 3397 15a4 C4F20003 		movt	r3, 16384
 3398 15a8 4FF42052 		mov	r2, #10240
 3399 15ac C4F20002 		movt	r2, 16384
 3400 15b0 116C     		ldr	r1, [r2, #64]
 3401 15b2 7A68     		ldr	r2, [r7, #4]
 3402 15b4 6FEA0202 		mvn	r2, r2
 3403 15b8 0A40     		ands	r2, r2, r1
 3404 15ba 1A64     		str	r2, [r3, #64]
 3405              	.L126:
2120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3406              		.loc 1 2121 0
 3407 15bc 07F10C07 		add	r7, r7, #12
 3408 15c0 BD46     		mov	sp, r7
 3409 15c2 80BC     		pop	{r7}
 3410 15c4 7047     		bx	lr
 3411              		.cfi_endproc
 3412              	.LFE148:
 3414 15c6 00BF     		.align	2
 3415              		.global	RTC_TamperFilterConfig
 3416              		.thumb
 3417              		.thumb_func
 3419              	RTC_TamperFilterConfig:
 3420              	.LFB149:
2122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3421              		.loc 1 2137 0
 3422              		.cfi_startproc
 3423              		@ args = 0, pretend = 0, frame = 8
 3424              		@ frame_needed = 1, uses_anonymous_args = 0
 3425              		@ link register save eliminated.
 3426 15c8 80B4     		push	{r7}
 3427              	.LCFI113:
 3428              		.cfi_def_cfa_offset 4
 3429              		.cfi_offset 7, -4
 3430 15ca 83B0     		sub	sp, sp, #12
 3431              	.LCFI114:
 3432              		.cfi_def_cfa_offset 16
 3433 15cc 00AF     		add	r7, sp, #0
 3434              	.LCFI115:
 3435              		.cfi_def_cfa_register 7
 3436 15ce 7860     		str	r0, [r7, #4]
2138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3437              		.loc 1 2142 0
 3438 15d0 4FF42053 		mov	r3, #10240
 3439 15d4 C4F20003 		movt	r3, 16384
 3440 15d8 4FF42052 		mov	r2, #10240
 3441 15dc C4F20002 		movt	r2, 16384
 3442 15e0 126C     		ldr	r2, [r2, #64]
 3443 15e2 22F4C052 		bic	r2, r2, #6144
 3444 15e6 1A64     		str	r2, [r3, #64]
2143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3445              		.loc 1 2145 0
 3446 15e8 4FF42053 		mov	r3, #10240
 3447 15ec C4F20003 		movt	r3, 16384
 3448 15f0 4FF42052 		mov	r2, #10240
 3449 15f4 C4F20002 		movt	r2, 16384
 3450 15f8 116C     		ldr	r1, [r2, #64]
 3451 15fa 7A68     		ldr	r2, [r7, #4]
 3452 15fc 0A43     		orrs	r2, r2, r1
 3453 15fe 1A64     		str	r2, [r3, #64]
2146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3454              		.loc 1 2146 0
 3455 1600 07F10C07 		add	r7, r7, #12
 3456 1604 BD46     		mov	sp, r7
 3457 1606 80BC     		pop	{r7}
 3458 1608 7047     		bx	lr
 3459              		.cfi_endproc
 3460              	.LFE149:
 3462 160a 00BF     		.align	2
 3463              		.global	RTC_TamperSamplingFreqConfig
 3464              		.thumb
 3465              		.thumb_func
 3467              	RTC_TamperSamplingFreqConfig:
 3468              	.LFB150:
2147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3469              		.loc 1 2171 0
 3470              		.cfi_startproc
 3471              		@ args = 0, pretend = 0, frame = 8
 3472              		@ frame_needed = 1, uses_anonymous_args = 0
 3473              		@ link register save eliminated.
 3474 160c 80B4     		push	{r7}
 3475              	.LCFI116:
 3476              		.cfi_def_cfa_offset 4
 3477              		.cfi_offset 7, -4
 3478 160e 83B0     		sub	sp, sp, #12
 3479              	.LCFI117:
 3480              		.cfi_def_cfa_offset 16
 3481 1610 00AF     		add	r7, sp, #0
 3482              	.LCFI118:
 3483              		.cfi_def_cfa_register 7
 3484 1612 7860     		str	r0, [r7, #4]
2172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3485              		.loc 1 2176 0
 3486 1614 4FF42053 		mov	r3, #10240
 3487 1618 C4F20003 		movt	r3, 16384
 3488 161c 4FF42052 		mov	r2, #10240
 3489 1620 C4F20002 		movt	r2, 16384
 3490 1624 126C     		ldr	r2, [r2, #64]
 3491 1626 22F4E062 		bic	r2, r2, #1792
 3492 162a 1A64     		str	r2, [r3, #64]
2177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3493              		.loc 1 2179 0
 3494 162c 4FF42053 		mov	r3, #10240
 3495 1630 C4F20003 		movt	r3, 16384
 3496 1634 4FF42052 		mov	r2, #10240
 3497 1638 C4F20002 		movt	r2, 16384
 3498 163c 116C     		ldr	r1, [r2, #64]
 3499 163e 7A68     		ldr	r2, [r7, #4]
 3500 1640 0A43     		orrs	r2, r2, r1
 3501 1642 1A64     		str	r2, [r3, #64]
2180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3502              		.loc 1 2180 0
 3503 1644 07F10C07 		add	r7, r7, #12
 3504 1648 BD46     		mov	sp, r7
 3505 164a 80BC     		pop	{r7}
 3506 164c 7047     		bx	lr
 3507              		.cfi_endproc
 3508              	.LFE150:
 3510 164e 00BF     		.align	2
 3511              		.global	RTC_TamperPinsPrechargeDuration
 3512              		.thumb
 3513              		.thumb_func
 3515              	RTC_TamperPinsPrechargeDuration:
 3516              	.LFB151:
2181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3517              		.loc 1 2194 0
 3518              		.cfi_startproc
 3519              		@ args = 0, pretend = 0, frame = 8
 3520              		@ frame_needed = 1, uses_anonymous_args = 0
 3521              		@ link register save eliminated.
 3522 1650 80B4     		push	{r7}
 3523              	.LCFI119:
 3524              		.cfi_def_cfa_offset 4
 3525              		.cfi_offset 7, -4
 3526 1652 83B0     		sub	sp, sp, #12
 3527              	.LCFI120:
 3528              		.cfi_def_cfa_offset 16
 3529 1654 00AF     		add	r7, sp, #0
 3530              	.LCFI121:
 3531              		.cfi_def_cfa_register 7
 3532 1656 7860     		str	r0, [r7, #4]
2195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3533              		.loc 1 2199 0
 3534 1658 4FF42053 		mov	r3, #10240
 3535 165c C4F20003 		movt	r3, 16384
 3536 1660 4FF42052 		mov	r2, #10240
 3537 1664 C4F20002 		movt	r2, 16384
 3538 1668 126C     		ldr	r2, [r2, #64]
 3539 166a 22F4C042 		bic	r2, r2, #24576
 3540 166e 1A64     		str	r2, [r3, #64]
2200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3541              		.loc 1 2202 0
 3542 1670 4FF42053 		mov	r3, #10240
 3543 1674 C4F20003 		movt	r3, 16384
 3544 1678 4FF42052 		mov	r2, #10240
 3545 167c C4F20002 		movt	r2, 16384
 3546 1680 116C     		ldr	r1, [r2, #64]
 3547 1682 7A68     		ldr	r2, [r7, #4]
 3548 1684 0A43     		orrs	r2, r2, r1
 3549 1686 1A64     		str	r2, [r3, #64]
2203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3550              		.loc 1 2203 0
 3551 1688 07F10C07 		add	r7, r7, #12
 3552 168c BD46     		mov	sp, r7
 3553 168e 80BC     		pop	{r7}
 3554 1690 7047     		bx	lr
 3555              		.cfi_endproc
 3556              	.LFE151:
 3558 1692 00BF     		.align	2
 3559              		.global	RTC_TimeStampOnTamperDetectionCmd
 3560              		.thumb
 3561              		.thumb_func
 3563              	RTC_TimeStampOnTamperDetectionCmd:
 3564              	.LFB152:
2204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3565              		.loc 1 2214 0
 3566              		.cfi_startproc
 3567              		@ args = 0, pretend = 0, frame = 8
 3568              		@ frame_needed = 1, uses_anonymous_args = 0
 3569              		@ link register save eliminated.
 3570 1694 80B4     		push	{r7}
 3571              	.LCFI122:
 3572              		.cfi_def_cfa_offset 4
 3573              		.cfi_offset 7, -4
 3574 1696 83B0     		sub	sp, sp, #12
 3575              	.LCFI123:
 3576              		.cfi_def_cfa_offset 16
 3577 1698 00AF     		add	r7, sp, #0
 3578              	.LCFI124:
 3579              		.cfi_def_cfa_register 7
 3580 169a 0346     		mov	r3, r0
 3581 169c FB71     		strb	r3, [r7, #7]
2215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3582              		.loc 1 2218 0
 3583 169e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3584 16a0 002B     		cmp	r3, #0
 3585 16a2 0CD0     		beq	.L133
2219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3586              		.loc 1 2221 0
 3587 16a4 4FF42053 		mov	r3, #10240
 3588 16a8 C4F20003 		movt	r3, 16384
 3589 16ac 4FF42052 		mov	r2, #10240
 3590 16b0 C4F20002 		movt	r2, 16384
 3591 16b4 126C     		ldr	r2, [r2, #64]
 3592 16b6 42F08002 		orr	r2, r2, #128
 3593 16ba 1A64     		str	r2, [r3, #64]
 3594 16bc 0BE0     		b	.L132
 3595              	.L133:
2222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3596              		.loc 1 2226 0
 3597 16be 4FF42053 		mov	r3, #10240
 3598 16c2 C4F20003 		movt	r3, 16384
 3599 16c6 4FF42052 		mov	r2, #10240
 3600 16ca C4F20002 		movt	r2, 16384
 3601 16ce 126C     		ldr	r2, [r2, #64]
 3602 16d0 22F08002 		bic	r2, r2, #128
 3603 16d4 1A64     		str	r2, [r3, #64]
 3604              	.L132:
2227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3605              		.loc 1 2228 0
 3606 16d6 07F10C07 		add	r7, r7, #12
 3607 16da BD46     		mov	sp, r7
 3608 16dc 80BC     		pop	{r7}
 3609 16de 7047     		bx	lr
 3610              		.cfi_endproc
 3611              	.LFE152:
 3613              		.align	2
 3614              		.global	RTC_TamperPullUpCmd
 3615              		.thumb
 3616              		.thumb_func
 3618              	RTC_TamperPullUpCmd:
 3619              	.LFB153:
2229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3620              		.loc 1 2237 0
 3621              		.cfi_startproc
 3622              		@ args = 0, pretend = 0, frame = 8
 3623              		@ frame_needed = 1, uses_anonymous_args = 0
 3624              		@ link register save eliminated.
 3625 16e0 80B4     		push	{r7}
 3626              	.LCFI125:
 3627              		.cfi_def_cfa_offset 4
 3628              		.cfi_offset 7, -4
 3629 16e2 83B0     		sub	sp, sp, #12
 3630              	.LCFI126:
 3631              		.cfi_def_cfa_offset 16
 3632 16e4 00AF     		add	r7, sp, #0
 3633              	.LCFI127:
 3634              		.cfi_def_cfa_register 7
 3635 16e6 0346     		mov	r3, r0
 3636 16e8 FB71     		strb	r3, [r7, #7]
2238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3637              		.loc 1 2241 0
 3638 16ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3639 16ec 002B     		cmp	r3, #0
 3640 16ee 0CD0     		beq	.L136
2242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3641              		.loc 1 2244 0
 3642 16f0 4FF42053 		mov	r3, #10240
 3643 16f4 C4F20003 		movt	r3, 16384
 3644 16f8 4FF42052 		mov	r2, #10240
 3645 16fc C4F20002 		movt	r2, 16384
 3646 1700 126C     		ldr	r2, [r2, #64]
 3647 1702 22F40042 		bic	r2, r2, #32768
 3648 1706 1A64     		str	r2, [r3, #64]
 3649 1708 0BE0     		b	.L135
 3650              	.L136:
2245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3651              		.loc 1 2249 0
 3652 170a 4FF42053 		mov	r3, #10240
 3653 170e C4F20003 		movt	r3, 16384
 3654 1712 4FF42052 		mov	r2, #10240
 3655 1716 C4F20002 		movt	r2, 16384
 3656 171a 126C     		ldr	r2, [r2, #64]
 3657 171c 42F40042 		orr	r2, r2, #32768
 3658 1720 1A64     		str	r2, [r3, #64]
 3659              	.L135:
2250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3660              		.loc 1 2251 0
 3661 1722 07F10C07 		add	r7, r7, #12
 3662 1726 BD46     		mov	sp, r7
 3663 1728 80BC     		pop	{r7}
 3664 172a 7047     		bx	lr
 3665              		.cfi_endproc
 3666              	.LFE153:
 3668              		.align	2
 3669              		.global	RTC_WriteBackupRegister
 3670              		.thumb
 3671              		.thumb_func
 3673              	RTC_WriteBackupRegister:
 3674              	.LFB154:
2252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3675              		.loc 1 2278 0
 3676              		.cfi_startproc
 3677              		@ args = 0, pretend = 0, frame = 16
 3678              		@ frame_needed = 1, uses_anonymous_args = 0
 3679              		@ link register save eliminated.
 3680 172c 80B4     		push	{r7}
 3681              	.LCFI128:
 3682              		.cfi_def_cfa_offset 4
 3683              		.cfi_offset 7, -4
 3684 172e 85B0     		sub	sp, sp, #20
 3685              	.LCFI129:
 3686              		.cfi_def_cfa_offset 24
 3687 1730 00AF     		add	r7, sp, #0
 3688              	.LCFI130:
 3689              		.cfi_def_cfa_register 7
 3690 1732 7860     		str	r0, [r7, #4]
 3691 1734 3960     		str	r1, [r7, #0]
2279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3692              		.loc 1 2279 0
 3693 1736 4FF00003 		mov	r3, #0
 3694 173a FB60     		str	r3, [r7, #12]
2280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3695              		.loc 1 2284 0
 3696 173c 42F65003 		movw	r3, #10320
 3697 1740 C4F20003 		movt	r3, 16384
 3698 1744 FB60     		str	r3, [r7, #12]
2285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3699              		.loc 1 2285 0
 3700 1746 7B68     		ldr	r3, [r7, #4]
 3701 1748 4FEA8302 		lsl	r2, r3, #2
 3702 174c FB68     		ldr	r3, [r7, #12]
 3703 174e D318     		adds	r3, r2, r3
 3704 1750 FB60     		str	r3, [r7, #12]
2286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3705              		.loc 1 2288 0
 3706 1752 FB68     		ldr	r3, [r7, #12]
 3707 1754 3A68     		ldr	r2, [r7, #0]
 3708 1756 1A60     		str	r2, [r3, #0]
2289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3709              		.loc 1 2289 0
 3710 1758 07F11407 		add	r7, r7, #20
 3711 175c BD46     		mov	sp, r7
 3712 175e 80BC     		pop	{r7}
 3713 1760 7047     		bx	lr
 3714              		.cfi_endproc
 3715              	.LFE154:
 3717 1762 00BF     		.align	2
 3718              		.global	RTC_ReadBackupRegister
 3719              		.thumb
 3720              		.thumb_func
 3722              	RTC_ReadBackupRegister:
 3723              	.LFB155:
2290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3724              		.loc 1 2299 0
 3725              		.cfi_startproc
 3726              		@ args = 0, pretend = 0, frame = 16
 3727              		@ frame_needed = 1, uses_anonymous_args = 0
 3728              		@ link register save eliminated.
 3729 1764 80B4     		push	{r7}
 3730              	.LCFI131:
 3731              		.cfi_def_cfa_offset 4
 3732              		.cfi_offset 7, -4
 3733 1766 85B0     		sub	sp, sp, #20
 3734              	.LCFI132:
 3735              		.cfi_def_cfa_offset 24
 3736 1768 00AF     		add	r7, sp, #0
 3737              	.LCFI133:
 3738              		.cfi_def_cfa_register 7
 3739 176a 7860     		str	r0, [r7, #4]
2300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3740              		.loc 1 2300 0
 3741 176c 4FF00003 		mov	r3, #0
 3742 1770 FB60     		str	r3, [r7, #12]
2301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3743              		.loc 1 2305 0
 3744 1772 42F65003 		movw	r3, #10320
 3745 1776 C4F20003 		movt	r3, 16384
 3746 177a FB60     		str	r3, [r7, #12]
2306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3747              		.loc 1 2306 0
 3748 177c 7B68     		ldr	r3, [r7, #4]
 3749 177e 4FEA8302 		lsl	r2, r3, #2
 3750 1782 FB68     		ldr	r3, [r7, #12]
 3751 1784 D318     		adds	r3, r2, r3
 3752 1786 FB60     		str	r3, [r7, #12]
2307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3753              		.loc 1 2309 0
 3754 1788 FB68     		ldr	r3, [r7, #12]
 3755 178a 1B68     		ldr	r3, [r3, #0]
2310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3756              		.loc 1 2310 0
 3757 178c 1846     		mov	r0, r3
 3758 178e 07F11407 		add	r7, r7, #20
 3759 1792 BD46     		mov	sp, r7
 3760 1794 80BC     		pop	{r7}
 3761 1796 7047     		bx	lr
 3762              		.cfi_endproc
 3763              	.LFE155:
 3765              		.align	2
 3766              		.global	RTC_TamperPinSelection
 3767              		.thumb
 3768              		.thumb_func
 3770              	RTC_TamperPinSelection:
 3771              	.LFB156:
2311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3772              		.loc 1 2339 0
 3773              		.cfi_startproc
 3774              		@ args = 0, pretend = 0, frame = 8
 3775              		@ frame_needed = 1, uses_anonymous_args = 0
 3776              		@ link register save eliminated.
 3777 1798 80B4     		push	{r7}
 3778              	.LCFI134:
 3779              		.cfi_def_cfa_offset 4
 3780              		.cfi_offset 7, -4
 3781 179a 83B0     		sub	sp, sp, #12
 3782              	.LCFI135:
 3783              		.cfi_def_cfa_offset 16
 3784 179c 00AF     		add	r7, sp, #0
 3785              	.LCFI136:
 3786              		.cfi_def_cfa_register 7
 3787 179e 7860     		str	r0, [r7, #4]
2340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3788              		.loc 1 2343 0
 3789 17a0 4FF42053 		mov	r3, #10240
 3790 17a4 C4F20003 		movt	r3, 16384
 3791 17a8 4FF42052 		mov	r2, #10240
 3792 17ac C4F20002 		movt	r2, 16384
 3793 17b0 126C     		ldr	r2, [r2, #64]
 3794 17b2 22F48032 		bic	r2, r2, #65536
 3795 17b6 1A64     		str	r2, [r3, #64]
2344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3796              		.loc 1 2344 0
 3797 17b8 4FF42053 		mov	r3, #10240
 3798 17bc C4F20003 		movt	r3, 16384
 3799 17c0 4FF42052 		mov	r2, #10240
 3800 17c4 C4F20002 		movt	r2, 16384
 3801 17c8 116C     		ldr	r1, [r2, #64]
 3802 17ca 7A68     		ldr	r2, [r7, #4]
 3803 17cc 0A43     		orrs	r2, r2, r1
 3804 17ce 1A64     		str	r2, [r3, #64]
2345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3805              		.loc 1 2345 0
 3806 17d0 07F10C07 		add	r7, r7, #12
 3807 17d4 BD46     		mov	sp, r7
 3808 17d6 80BC     		pop	{r7}
 3809 17d8 7047     		bx	lr
 3810              		.cfi_endproc
 3811              	.LFE156:
 3813 17da 00BF     		.align	2
 3814              		.global	RTC_TimeStampPinSelection
 3815              		.thumb
 3816              		.thumb_func
 3818              	RTC_TimeStampPinSelection:
 3819              	.LFB157:
2346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3820              		.loc 1 2356 0
 3821              		.cfi_startproc
 3822              		@ args = 0, pretend = 0, frame = 8
 3823              		@ frame_needed = 1, uses_anonymous_args = 0
 3824              		@ link register save eliminated.
 3825 17dc 80B4     		push	{r7}
 3826              	.LCFI137:
 3827              		.cfi_def_cfa_offset 4
 3828              		.cfi_offset 7, -4
 3829 17de 83B0     		sub	sp, sp, #12
 3830              	.LCFI138:
 3831              		.cfi_def_cfa_offset 16
 3832 17e0 00AF     		add	r7, sp, #0
 3833              	.LCFI139:
 3834              		.cfi_def_cfa_register 7
 3835 17e2 7860     		str	r0, [r7, #4]
2357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3836              		.loc 1 2360 0
 3837 17e4 4FF42053 		mov	r3, #10240
 3838 17e8 C4F20003 		movt	r3, 16384
 3839 17ec 4FF42052 		mov	r2, #10240
 3840 17f0 C4F20002 		movt	r2, 16384
 3841 17f4 126C     		ldr	r2, [r2, #64]
 3842 17f6 22F40032 		bic	r2, r2, #131072
 3843 17fa 1A64     		str	r2, [r3, #64]
2361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3844              		.loc 1 2361 0
 3845 17fc 4FF42053 		mov	r3, #10240
 3846 1800 C4F20003 		movt	r3, 16384
 3847 1804 4FF42052 		mov	r2, #10240
 3848 1808 C4F20002 		movt	r2, 16384
 3849 180c 116C     		ldr	r1, [r2, #64]
 3850 180e 7A68     		ldr	r2, [r7, #4]
 3851 1810 0A43     		orrs	r2, r2, r1
 3852 1812 1A64     		str	r2, [r3, #64]
2362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3853              		.loc 1 2362 0
 3854 1814 07F10C07 		add	r7, r7, #12
 3855 1818 BD46     		mov	sp, r7
 3856 181a 80BC     		pop	{r7}
 3857 181c 7047     		bx	lr
 3858              		.cfi_endproc
 3859              	.LFE157:
 3861 181e 00BF     		.align	2
 3862              		.global	RTC_OutputTypeConfig
 3863              		.thumb
 3864              		.thumb_func
 3866              	RTC_OutputTypeConfig:
 3867              	.LFB158:
2363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3868              		.loc 1 2375 0
 3869              		.cfi_startproc
 3870              		@ args = 0, pretend = 0, frame = 8
 3871              		@ frame_needed = 1, uses_anonymous_args = 0
 3872              		@ link register save eliminated.
 3873 1820 80B4     		push	{r7}
 3874              	.LCFI140:
 3875              		.cfi_def_cfa_offset 4
 3876              		.cfi_offset 7, -4
 3877 1822 83B0     		sub	sp, sp, #12
 3878              	.LCFI141:
 3879              		.cfi_def_cfa_offset 16
 3880 1824 00AF     		add	r7, sp, #0
 3881              	.LCFI142:
 3882              		.cfi_def_cfa_register 7
 3883 1826 7860     		str	r0, [r7, #4]
2376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3884              		.loc 1 2379 0
 3885 1828 4FF42053 		mov	r3, #10240
 3886 182c C4F20003 		movt	r3, 16384
 3887 1830 4FF42052 		mov	r2, #10240
 3888 1834 C4F20002 		movt	r2, 16384
 3889 1838 126C     		ldr	r2, [r2, #64]
 3890 183a 22F48022 		bic	r2, r2, #262144
 3891 183e 1A64     		str	r2, [r3, #64]
2380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3892              		.loc 1 2380 0
 3893 1840 4FF42053 		mov	r3, #10240
 3894 1844 C4F20003 		movt	r3, 16384
 3895 1848 4FF42052 		mov	r2, #10240
 3896 184c C4F20002 		movt	r2, 16384
 3897 1850 116C     		ldr	r1, [r2, #64]
 3898 1852 7A68     		ldr	r2, [r7, #4]
 3899 1854 0A43     		orrs	r2, r2, r1
 3900 1856 1A64     		str	r2, [r3, #64]
2381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3901              		.loc 1 2381 0
 3902 1858 07F10C07 		add	r7, r7, #12
 3903 185c BD46     		mov	sp, r7
 3904 185e 80BC     		pop	{r7}
 3905 1860 7047     		bx	lr
 3906              		.cfi_endproc
 3907              	.LFE158:
 3909 1862 00BF     		.align	2
 3910              		.global	RTC_SynchroShiftConfig
 3911              		.thumb
 3912              		.thumb_func
 3914              	RTC_SynchroShiftConfig:
 3915              	.LFB159:
2382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3916              		.loc 1 2413 0
 3917              		.cfi_startproc
 3918              		@ args = 0, pretend = 0, frame = 16
 3919              		@ frame_needed = 1, uses_anonymous_args = 0
 3920 1864 80B5     		push	{r7, lr}
 3921              	.LCFI143:
 3922              		.cfi_def_cfa_offset 8
 3923              		.cfi_offset 14, -4
 3924              		.cfi_offset 7, -8
 3925 1866 84B0     		sub	sp, sp, #16
 3926              	.LCFI144:
 3927              		.cfi_def_cfa_offset 24
 3928 1868 00AF     		add	r7, sp, #0
 3929              	.LCFI145:
 3930              		.cfi_def_cfa_register 7
 3931 186a 7860     		str	r0, [r7, #4]
 3932 186c 3960     		str	r1, [r7, #0]
2414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3933              		.loc 1 2414 0
 3934 186e 4FF00003 		mov	r3, #0
 3935 1872 FB73     		strb	r3, [r7, #15]
2415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3936              		.loc 1 2415 0
 3937 1874 4FF00003 		mov	r3, #0
 3938 1878 BB60     		str	r3, [r7, #8]
2416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3939              		.loc 1 2422 0
 3940 187a 4FF42053 		mov	r3, #10240
 3941 187e C4F20003 		movt	r3, 16384
 3942 1882 4FF0CA02 		mov	r2, #202
 3943 1886 5A62     		str	r2, [r3, #36]
2423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3944              		.loc 1 2423 0
 3945 1888 4FF42053 		mov	r3, #10240
 3946 188c C4F20003 		movt	r3, 16384
 3947 1890 4FF05302 		mov	r2, #83
 3948 1894 5A62     		str	r2, [r3, #36]
2424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 3949              		.loc 1 2426 0
 3950 1896 4FF42053 		mov	r3, #10240
 3951 189a C4F20003 		movt	r3, 16384
 3952 189e DB68     		ldr	r3, [r3, #12]
 3953 18a0 03F00803 		and	r3, r3, #8
 3954 18a4 002B     		cmp	r3, #0
 3955 18a6 11D0     		beq	.L144
2427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3956              		.loc 1 2429 0
 3957 18a8 03E0     		b	.L145
 3958              	.L146:
2430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 3959              		.loc 1 2431 0
 3960 18aa BB68     		ldr	r3, [r7, #8]
 3961 18ac 03F10103 		add	r3, r3, #1
 3962 18b0 BB60     		str	r3, [r7, #8]
 3963              	.L145:
2429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3964              		.loc 1 2429 0 discriminator 1
 3965 18b2 4FF42053 		mov	r3, #10240
 3966 18b6 C4F20003 		movt	r3, 16384
 3967 18ba DB68     		ldr	r3, [r3, #12]
 3968 18bc 03F00803 		and	r3, r3, #8
 3969 18c0 002B     		cmp	r3, #0
 3970 18c2 03D0     		beq	.L144
2429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 3971              		.loc 1 2429 0 is_stmt 0 discriminator 2
 3972 18c4 BB68     		ldr	r3, [r7, #8]
 3973 18c6 B3F5805F 		cmp	r3, #4096
 3974 18ca EED1     		bne	.L146
 3975              	.L144:
2432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 3976              		.loc 1 2436 0 is_stmt 1
 3977 18cc 4FF42053 		mov	r3, #10240
 3978 18d0 C4F20003 		movt	r3, 16384
 3979 18d4 DB68     		ldr	r3, [r3, #12]
 3980 18d6 03F00803 		and	r3, r3, #8
 3981 18da 002B     		cmp	r3, #0
 3982 18dc 21D1     		bne	.L147
2437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 3983              		.loc 1 2439 0
 3984 18de 4FF42053 		mov	r3, #10240
 3985 18e2 C4F20003 		movt	r3, 16384
 3986 18e6 9B68     		ldr	r3, [r3, #8]
 3987 18e8 03F01003 		and	r3, r3, #16
 3988 18ec 002B     		cmp	r3, #0
 3989 18ee 14D1     		bne	.L148
2440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 3990              		.loc 1 2442 0
 3991 18f0 4FF42053 		mov	r3, #10240
 3992 18f4 C4F20003 		movt	r3, 16384
 3993 18f8 3968     		ldr	r1, [r7, #0]
 3994 18fa 7A68     		ldr	r2, [r7, #4]
 3995 18fc 0A43     		orrs	r2, r2, r1
 3996 18fe DA62     		str	r2, [r3, #44]
2443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 3997              		.loc 1 2444 0
 3998 1900 FFF7FEFF 		bl	RTC_WaitForSynchro
 3999 1904 0346     		mov	r3, r0
 4000 1906 002B     		cmp	r3, #0
 4001 1908 03D1     		bne	.L149
2445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 4002              		.loc 1 2446 0
 4003 190a 4FF00003 		mov	r3, #0
 4004 190e FB73     		strb	r3, [r7, #15]
 4005 1910 0AE0     		b	.L150
 4006              	.L149:
2447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4007              		.loc 1 2450 0
 4008 1912 4FF00103 		mov	r3, #1
 4009 1916 FB73     		strb	r3, [r7, #15]
 4010 1918 06E0     		b	.L150
 4011              	.L148:
2451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 4012              		.loc 1 2455 0
 4013 191a 4FF00003 		mov	r3, #0
 4014 191e FB73     		strb	r3, [r7, #15]
 4015 1920 02E0     		b	.L150
 4016              	.L147:
2456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4017              		.loc 1 2460 0
 4018 1922 4FF00003 		mov	r3, #0
 4019 1926 FB73     		strb	r3, [r7, #15]
 4020              	.L150:
2461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4021              		.loc 1 2464 0
 4022 1928 4FF42053 		mov	r3, #10240
 4023 192c C4F20003 		movt	r3, 16384
 4024 1930 4FF0FF02 		mov	r2, #255
 4025 1934 5A62     		str	r2, [r3, #36]
2465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4026              		.loc 1 2466 0
 4027 1936 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4028              		.loc 1 2467 0
 4029 1938 1846     		mov	r0, r3
 4030 193a 07F11007 		add	r7, r7, #16
 4031 193e BD46     		mov	sp, r7
 4032 1940 80BD     		pop	{r7, pc}
 4033              		.cfi_endproc
 4034              	.LFE159:
 4036 1942 00BF     		.align	2
 4037              		.global	RTC_ITConfig
 4038              		.thumb
 4039              		.thumb_func
 4041              	RTC_ITConfig:
 4042              	.LFB160:
2468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4043              		.loc 1 2532 0
 4044              		.cfi_startproc
 4045              		@ args = 0, pretend = 0, frame = 8
 4046              		@ frame_needed = 1, uses_anonymous_args = 0
 4047              		@ link register save eliminated.
 4048 1944 80B4     		push	{r7}
 4049              	.LCFI146:
 4050              		.cfi_def_cfa_offset 4
 4051              		.cfi_offset 7, -4
 4052 1946 83B0     		sub	sp, sp, #12
 4053              	.LCFI147:
 4054              		.cfi_def_cfa_offset 16
 4055 1948 00AF     		add	r7, sp, #0
 4056              	.LCFI148:
 4057              		.cfi_def_cfa_register 7
 4058 194a 7860     		str	r0, [r7, #4]
 4059 194c 0B46     		mov	r3, r1
 4060 194e FB70     		strb	r3, [r7, #3]
2533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4061              		.loc 1 2538 0
 4062 1950 4FF42053 		mov	r3, #10240
 4063 1954 C4F20003 		movt	r3, 16384
 4064 1958 4FF0CA02 		mov	r2, #202
 4065 195c 5A62     		str	r2, [r3, #36]
2539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4066              		.loc 1 2539 0
 4067 195e 4FF42053 		mov	r3, #10240
 4068 1962 C4F20003 		movt	r3, 16384
 4069 1966 4FF05302 		mov	r2, #83
 4070 196a 5A62     		str	r2, [r3, #36]
2540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4071              		.loc 1 2541 0
 4072 196c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4073 196e 002B     		cmp	r3, #0
 4074 1970 1CD0     		beq	.L152
2542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4075              		.loc 1 2544 0
 4076 1972 4FF42053 		mov	r3, #10240
 4077 1976 C4F20003 		movt	r3, 16384
 4078 197a 4FF42052 		mov	r2, #10240
 4079 197e C4F20002 		movt	r2, 16384
 4080 1982 9168     		ldr	r1, [r2, #8]
 4081 1984 7A68     		ldr	r2, [r7, #4]
 4082 1986 22F00402 		bic	r2, r2, #4
 4083 198a 0A43     		orrs	r2, r2, r1
 4084 198c 9A60     		str	r2, [r3, #8]
2545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4085              		.loc 1 2546 0
 4086 198e 4FF42053 		mov	r3, #10240
 4087 1992 C4F20003 		movt	r3, 16384
 4088 1996 4FF42052 		mov	r2, #10240
 4089 199a C4F20002 		movt	r2, 16384
 4090 199e 116C     		ldr	r1, [r2, #64]
 4091 19a0 7A68     		ldr	r2, [r7, #4]
 4092 19a2 02F00402 		and	r2, r2, #4
 4093 19a6 0A43     		orrs	r2, r2, r1
 4094 19a8 1A64     		str	r2, [r3, #64]
 4095 19aa 1FE0     		b	.L153
 4096              	.L152:
2547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4097              		.loc 1 2551 0
 4098 19ac 4FF42053 		mov	r3, #10240
 4099 19b0 C4F20003 		movt	r3, 16384
 4100 19b4 4FF42052 		mov	r2, #10240
 4101 19b8 C4F20002 		movt	r2, 16384
 4102 19bc 9168     		ldr	r1, [r2, #8]
 4103 19be 7A68     		ldr	r2, [r7, #4]
 4104 19c0 22F00402 		bic	r2, r2, #4
 4105 19c4 6FEA0202 		mvn	r2, r2
 4106 19c8 0A40     		ands	r2, r2, r1
 4107 19ca 9A60     		str	r2, [r3, #8]
2552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4108              		.loc 1 2553 0
 4109 19cc 4FF42053 		mov	r3, #10240
 4110 19d0 C4F20003 		movt	r3, 16384
 4111 19d4 4FF42052 		mov	r2, #10240
 4112 19d8 C4F20002 		movt	r2, 16384
 4113 19dc 116C     		ldr	r1, [r2, #64]
 4114 19de 7A68     		ldr	r2, [r7, #4]
 4115 19e0 02F00402 		and	r2, r2, #4
 4116 19e4 6FEA0202 		mvn	r2, r2
 4117 19e8 0A40     		ands	r2, r2, r1
 4118 19ea 1A64     		str	r2, [r3, #64]
 4119              	.L153:
2554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4120              		.loc 1 2556 0
 4121 19ec 4FF42053 		mov	r3, #10240
 4122 19f0 C4F20003 		movt	r3, 16384
 4123 19f4 4FF0FF02 		mov	r2, #255
 4124 19f8 5A62     		str	r2, [r3, #36]
2557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4125              		.loc 1 2557 0
 4126 19fa 07F10C07 		add	r7, r7, #12
 4127 19fe BD46     		mov	sp, r7
 4128 1a00 80BC     		pop	{r7}
 4129 1a02 7047     		bx	lr
 4130              		.cfi_endproc
 4131              	.LFE160:
 4133              		.align	2
 4134              		.global	RTC_GetFlagStatus
 4135              		.thumb
 4136              		.thumb_func
 4138              	RTC_GetFlagStatus:
 4139              	.LFB161:
2558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4140              		.loc 1 2578 0
 4141              		.cfi_startproc
 4142              		@ args = 0, pretend = 0, frame = 16
 4143              		@ frame_needed = 1, uses_anonymous_args = 0
 4144              		@ link register save eliminated.
 4145 1a04 80B4     		push	{r7}
 4146              	.LCFI149:
 4147              		.cfi_def_cfa_offset 4
 4148              		.cfi_offset 7, -4
 4149 1a06 85B0     		sub	sp, sp, #20
 4150              	.LCFI150:
 4151              		.cfi_def_cfa_offset 24
 4152 1a08 00AF     		add	r7, sp, #0
 4153              	.LCFI151:
 4154              		.cfi_def_cfa_register 7
 4155 1a0a 7860     		str	r0, [r7, #4]
2579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4156              		.loc 1 2579 0
 4157 1a0c 4FF00003 		mov	r3, #0
 4158 1a10 FB73     		strb	r3, [r7, #15]
2580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4159              		.loc 1 2580 0
 4160 1a12 4FF00003 		mov	r3, #0
 4161 1a16 BB60     		str	r3, [r7, #8]
2581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4162              		.loc 1 2586 0
 4163 1a18 4FF42053 		mov	r3, #10240
 4164 1a1c C4F20003 		movt	r3, 16384
 4165 1a20 DA68     		ldr	r2, [r3, #12]
 4166 1a22 43F67773 		movw	r3, #16247
 4167 1a26 1340     		ands	r3, r3, r2
 4168 1a28 BB60     		str	r3, [r7, #8]
2587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4169              		.loc 1 2589 0
 4170 1a2a BA68     		ldr	r2, [r7, #8]
 4171 1a2c 7B68     		ldr	r3, [r7, #4]
 4172 1a2e 1340     		ands	r3, r3, r2
 4173 1a30 002B     		cmp	r3, #0
 4174 1a32 03D0     		beq	.L155
2590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4175              		.loc 1 2591 0
 4176 1a34 4FF00103 		mov	r3, #1
 4177 1a38 FB73     		strb	r3, [r7, #15]
 4178 1a3a 02E0     		b	.L156
 4179              	.L155:
2592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4180              		.loc 1 2595 0
 4181 1a3c 4FF00003 		mov	r3, #0
 4182 1a40 FB73     		strb	r3, [r7, #15]
 4183              	.L156:
2596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4184              		.loc 1 2597 0
 4185 1a42 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4186              		.loc 1 2598 0
 4187 1a44 1846     		mov	r0, r3
 4188 1a46 07F11407 		add	r7, r7, #20
 4189 1a4a BD46     		mov	sp, r7
 4190 1a4c 80BC     		pop	{r7}
 4191 1a4e 7047     		bx	lr
 4192              		.cfi_endproc
 4193              	.LFE161:
 4195              		.align	2
 4196              		.global	RTC_ClearFlag
 4197              		.thumb
 4198              		.thumb_func
 4200              	RTC_ClearFlag:
 4201              	.LFB162:
2599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4202              		.loc 1 2614 0
 4203              		.cfi_startproc
 4204              		@ args = 0, pretend = 0, frame = 8
 4205              		@ frame_needed = 1, uses_anonymous_args = 0
 4206              		@ link register save eliminated.
 4207 1a50 80B4     		push	{r7}
 4208              	.LCFI152:
 4209              		.cfi_def_cfa_offset 4
 4210              		.cfi_offset 7, -4
 4211 1a52 83B0     		sub	sp, sp, #12
 4212              	.LCFI153:
 4213              		.cfi_def_cfa_offset 16
 4214 1a54 00AF     		add	r7, sp, #0
 4215              	.LCFI154:
 4216              		.cfi_def_cfa_register 7
 4217 1a56 7860     		str	r0, [r7, #4]
2615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4218              		.loc 1 2619 0
 4219 1a58 4FF42053 		mov	r3, #10240
 4220 1a5c C4F20003 		movt	r3, 16384
 4221 1a60 7A68     		ldr	r2, [r7, #4]
 4222 1a62 4FEA0242 		lsl	r2, r2, #16
 4223 1a66 4FEA1242 		lsr	r2, r2, #16
 4224 1a6a 42F08002 		orr	r2, r2, #128
 4225 1a6e 6FEA0201 		mvn	r1, r2
 4226 1a72 4FF42052 		mov	r2, #10240
 4227 1a76 C4F20002 		movt	r2, 16384
 4228 1a7a D268     		ldr	r2, [r2, #12]
 4229 1a7c 02F08002 		and	r2, r2, #128
 4230 1a80 0A43     		orrs	r2, r2, r1
 4231 1a82 DA60     		str	r2, [r3, #12]
2620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4232              		.loc 1 2620 0
 4233 1a84 07F10C07 		add	r7, r7, #12
 4234 1a88 BD46     		mov	sp, r7
 4235 1a8a 80BC     		pop	{r7}
 4236 1a8c 7047     		bx	lr
 4237              		.cfi_endproc
 4238              	.LFE162:
 4240 1a8e 00BF     		.align	2
 4241              		.global	RTC_GetITStatus
 4242              		.thumb
 4243              		.thumb_func
 4245              	RTC_GetITStatus:
 4246              	.LFB163:
2621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4247              		.loc 1 2634 0
 4248              		.cfi_startproc
 4249              		@ args = 0, pretend = 0, frame = 24
 4250              		@ frame_needed = 1, uses_anonymous_args = 0
 4251              		@ link register save eliminated.
 4252 1a90 80B4     		push	{r7}
 4253              	.LCFI155:
 4254              		.cfi_def_cfa_offset 4
 4255              		.cfi_offset 7, -4
 4256 1a92 87B0     		sub	sp, sp, #28
 4257              	.LCFI156:
 4258              		.cfi_def_cfa_offset 32
 4259 1a94 00AF     		add	r7, sp, #0
 4260              	.LCFI157:
 4261              		.cfi_def_cfa_register 7
 4262 1a96 7860     		str	r0, [r7, #4]
2635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4263              		.loc 1 2635 0
 4264 1a98 4FF00003 		mov	r3, #0
 4265 1a9c FB75     		strb	r3, [r7, #23]
2636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4266              		.loc 1 2636 0
 4267 1a9e 4FF00003 		mov	r3, #0
 4268 1aa2 3B61     		str	r3, [r7, #16]
 4269 1aa4 4FF00003 		mov	r3, #0
 4270 1aa8 FB60     		str	r3, [r7, #12]
2637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4271              		.loc 1 2642 0
 4272 1aaa 4FF42053 		mov	r3, #10240
 4273 1aae C4F20003 		movt	r3, 16384
 4274 1ab2 1B6C     		ldr	r3, [r3, #64]
 4275 1ab4 03F00403 		and	r3, r3, #4
 4276 1ab8 3B61     		str	r3, [r7, #16]
2643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4277              		.loc 1 2645 0
 4278 1aba 4FF42053 		mov	r3, #10240
 4279 1abe C4F20003 		movt	r3, 16384
 4280 1ac2 9A68     		ldr	r2, [r3, #8]
 4281 1ac4 7B68     		ldr	r3, [r7, #4]
 4282 1ac6 1A40     		ands	r2, r2, r3
 4283 1ac8 7B68     		ldr	r3, [r7, #4]
 4284 1aca 4FEAD331 		lsr	r1, r3, #15
 4285 1ace 3B69     		ldr	r3, [r7, #16]
 4286 1ad0 0B40     		ands	r3, r3, r1
 4287 1ad2 1343     		orrs	r3, r3, r2
 4288 1ad4 FB60     		str	r3, [r7, #12]
2646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4289              		.loc 1 2648 0
 4290 1ad6 4FF42053 		mov	r3, #10240
 4291 1ada C4F20003 		movt	r3, 16384
 4292 1ade DA68     		ldr	r2, [r3, #12]
 4293 1ae0 7B68     		ldr	r3, [r7, #4]
 4294 1ae2 4FEA1313 		lsr	r3, r3, #4
 4295 1ae6 1340     		ands	r3, r3, r2
 4296 1ae8 3B61     		str	r3, [r7, #16]
2649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4297              		.loc 1 2651 0
 4298 1aea FB68     		ldr	r3, [r7, #12]
 4299 1aec 002B     		cmp	r3, #0
 4300 1aee 0AD0     		beq	.L159
 4301              		.loc 1 2651 0 is_stmt 0 discriminator 1
 4302 1af0 3B69     		ldr	r3, [r7, #16]
 4303 1af2 4FEA0343 		lsl	r3, r3, #16
 4304 1af6 4FEA1343 		lsr	r3, r3, #16
 4305 1afa 002B     		cmp	r3, #0
 4306 1afc 03D0     		beq	.L159
2652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4307              		.loc 1 2653 0 is_stmt 1
 4308 1afe 4FF00103 		mov	r3, #1
 4309 1b02 FB75     		strb	r3, [r7, #23]
 4310 1b04 02E0     		b	.L160
 4311              	.L159:
2654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4312              		.loc 1 2657 0
 4313 1b06 4FF00003 		mov	r3, #0
 4314 1b0a FB75     		strb	r3, [r7, #23]
 4315              	.L160:
2658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4316              		.loc 1 2659 0
 4317 1b0c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4318              		.loc 1 2660 0
 4319 1b0e 1846     		mov	r0, r3
 4320 1b10 07F11C07 		add	r7, r7, #28
 4321 1b14 BD46     		mov	sp, r7
 4322 1b16 80BC     		pop	{r7}
 4323 1b18 7047     		bx	lr
 4324              		.cfi_endproc
 4325              	.LFE163:
 4327 1b1a 00BF     		.align	2
 4328              		.global	RTC_ClearITPendingBit
 4329              		.thumb
 4330              		.thumb_func
 4332              	RTC_ClearITPendingBit:
 4333              	.LFB164:
2661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4334              		.loc 1 2674 0
 4335              		.cfi_startproc
 4336              		@ args = 0, pretend = 0, frame = 16
 4337              		@ frame_needed = 1, uses_anonymous_args = 0
 4338              		@ link register save eliminated.
 4339 1b1c 80B4     		push	{r7}
 4340              	.LCFI158:
 4341              		.cfi_def_cfa_offset 4
 4342              		.cfi_offset 7, -4
 4343 1b1e 85B0     		sub	sp, sp, #20
 4344              	.LCFI159:
 4345              		.cfi_def_cfa_offset 24
 4346 1b20 00AF     		add	r7, sp, #0
 4347              	.LCFI160:
 4348              		.cfi_def_cfa_register 7
 4349 1b22 7860     		str	r0, [r7, #4]
2675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4350              		.loc 1 2675 0
 4351 1b24 4FF00003 		mov	r3, #0
 4352 1b28 FB60     		str	r3, [r7, #12]
2676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4353              		.loc 1 2681 0
 4354 1b2a 7B68     		ldr	r3, [r7, #4]
 4355 1b2c 4FEA1313 		lsr	r3, r3, #4
 4356 1b30 FB60     		str	r3, [r7, #12]
2682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4357              		.loc 1 2684 0
 4358 1b32 4FF42053 		mov	r3, #10240
 4359 1b36 C4F20003 		movt	r3, 16384
 4360 1b3a FA68     		ldr	r2, [r7, #12]
 4361 1b3c 4FEA0242 		lsl	r2, r2, #16
 4362 1b40 4FEA1242 		lsr	r2, r2, #16
 4363 1b44 42F08002 		orr	r2, r2, #128
 4364 1b48 6FEA0201 		mvn	r1, r2
 4365 1b4c 4FF42052 		mov	r2, #10240
 4366 1b50 C4F20002 		movt	r2, 16384
 4367 1b54 D268     		ldr	r2, [r2, #12]
 4368 1b56 02F08002 		and	r2, r2, #128
 4369 1b5a 0A43     		orrs	r2, r2, r1
 4370 1b5c DA60     		str	r2, [r3, #12]
2685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4371              		.loc 1 2685 0
 4372 1b5e 07F11407 		add	r7, r7, #20
 4373 1b62 BD46     		mov	sp, r7
 4374 1b64 80BC     		pop	{r7}
 4375 1b66 7047     		bx	lr
 4376              		.cfi_endproc
 4377              	.LFE164:
 4379              		.align	2
 4380              		.thumb
 4381              		.thumb_func
 4383              	RTC_ByteToBcd2:
 4384              	.LFB165:
2686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4385              		.loc 1 2697 0
 4386              		.cfi_startproc
 4387              		@ args = 0, pretend = 0, frame = 16
 4388              		@ frame_needed = 1, uses_anonymous_args = 0
 4389              		@ link register save eliminated.
 4390 1b68 80B4     		push	{r7}
 4391              	.LCFI161:
 4392              		.cfi_def_cfa_offset 4
 4393              		.cfi_offset 7, -4
 4394 1b6a 85B0     		sub	sp, sp, #20
 4395              	.LCFI162:
 4396              		.cfi_def_cfa_offset 24
 4397 1b6c 00AF     		add	r7, sp, #0
 4398              	.LCFI163:
 4399              		.cfi_def_cfa_register 7
 4400 1b6e 0346     		mov	r3, r0
 4401 1b70 FB71     		strb	r3, [r7, #7]
2698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4402              		.loc 1 2698 0
 4403 1b72 4FF00003 		mov	r3, #0
 4404 1b76 FB73     		strb	r3, [r7, #15]
2699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4405              		.loc 1 2700 0
 4406 1b78 07E0     		b	.L163
 4407              	.L164:
2701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4408              		.loc 1 2702 0
 4409 1b7a FB7B     		ldrb	r3, [r7, #15]
 4410 1b7c 03F10103 		add	r3, r3, #1
 4411 1b80 FB73     		strb	r3, [r7, #15]
2703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4412              		.loc 1 2703 0
 4413 1b82 FB79     		ldrb	r3, [r7, #7]
 4414 1b84 A3F10A03 		sub	r3, r3, #10
 4415 1b88 FB71     		strb	r3, [r7, #7]
 4416              	.L163:
2700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4417              		.loc 1 2700 0 discriminator 1
 4418 1b8a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4419 1b8c 092B     		cmp	r3, #9
 4420 1b8e F4D8     		bhi	.L164
2704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4421              		.loc 1 2706 0
 4422 1b90 FB7B     		ldrb	r3, [r7, #15]
 4423 1b92 4FEA0313 		lsl	r3, r3, #4
 4424 1b96 DAB2     		uxtb	r2, r3
 4425 1b98 FB79     		ldrb	r3, [r7, #7]
 4426 1b9a 1343     		orrs	r3, r3, r2
 4427 1b9c DBB2     		uxtb	r3, r3
2707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4428              		.loc 1 2707 0
 4429 1b9e 1846     		mov	r0, r3
 4430 1ba0 07F11407 		add	r7, r7, #20
 4431 1ba4 BD46     		mov	sp, r7
 4432 1ba6 80BC     		pop	{r7}
 4433 1ba8 7047     		bx	lr
 4434              		.cfi_endproc
 4435              	.LFE165:
 4437 1baa 00BF     		.align	2
 4438              		.thumb
 4439              		.thumb_func
 4441              	RTC_Bcd2ToByte:
 4442              	.LFB166:
2708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4443              		.loc 1 2715 0
 4444              		.cfi_startproc
 4445              		@ args = 0, pretend = 0, frame = 16
 4446              		@ frame_needed = 1, uses_anonymous_args = 0
 4447              		@ link register save eliminated.
 4448 1bac 80B4     		push	{r7}
 4449              	.LCFI164:
 4450              		.cfi_def_cfa_offset 4
 4451              		.cfi_offset 7, -4
 4452 1bae 85B0     		sub	sp, sp, #20
 4453              	.LCFI165:
 4454              		.cfi_def_cfa_offset 24
 4455 1bb0 00AF     		add	r7, sp, #0
 4456              	.LCFI166:
 4457              		.cfi_def_cfa_register 7
 4458 1bb2 0346     		mov	r3, r0
 4459 1bb4 FB71     		strb	r3, [r7, #7]
2716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4460              		.loc 1 2716 0
 4461 1bb6 4FF00003 		mov	r3, #0
 4462 1bba FB73     		strb	r3, [r7, #15]
2717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4463              		.loc 1 2717 0
 4464 1bbc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4465 1bbe 4FEA1313 		lsr	r3, r3, #4
 4466 1bc2 DBB2     		uxtb	r3, r3
 4467 1bc4 1A46     		mov	r2, r3
 4468 1bc6 4FEA8202 		lsl	r2, r2, #2
 4469 1bca D318     		adds	r3, r2, r3
 4470 1bcc 4FEA4303 		lsl	r3, r3, #1
 4471 1bd0 FB73     		strb	r3, [r7, #15]
2718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4472              		.loc 1 2718 0
 4473 1bd2 FB79     		ldrb	r3, [r7, #7]
 4474 1bd4 03F00F03 		and	r3, r3, #15
 4475 1bd8 DAB2     		uxtb	r2, r3
 4476 1bda FB7B     		ldrb	r3, [r7, #15]
 4477 1bdc D318     		adds	r3, r2, r3
 4478 1bde DBB2     		uxtb	r3, r3
2719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4479              		.loc 1 2719 0
 4480 1be0 1846     		mov	r0, r3
 4481 1be2 07F11407 		add	r7, r7, #20
 4482 1be6 BD46     		mov	sp, r7
 4483 1be8 80BC     		pop	{r7}
 4484 1bea 7047     		bx	lr
 4485              		.cfi_endproc
 4486              	.LFE166:
 4488              	.Letext0:
 4489              		.file 2 "c:\\program files (x86)\\codesourcery\\eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../..
 4490              		.file 3 "D:\\Jure\\Projekti\\Git\\AutoPilot\\autopilot_sw\\Libraries\\Device\\STM32F4xx\\Include/s
 4491              		.file 4 "D:\\Jure\\Projekti\\Git\\AutoPilot\\autopilot_sw\\Libraries\\STM32F4xx_StdPeriph_Driver\\
 4492              		.file 5 "D:\\Jure\\Projekti\\Git\\AutoPilot\\autopilot_sw\\Libraries\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:18     .text:00000000 $t
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:23     .text:00000000 RTC_DeInit
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:396    .text:000002a0 RTC_EnterInitMode
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:524    .text:00000358 RTC_WaitForSynchro
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:197    .text:0000016c RTC_Init
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:490    .text:00000334 RTC_ExitInitMode
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:299    .text:0000022c RTC_StructInit
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:342    .text:00000258 RTC_WriteProtectionCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:624    .text:00000408 RTC_RefClockCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:715    .text:000004a4 RTC_BypassShadowCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:785    .text:0000051c RTC_SetTime
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:4441   .text:00001bac RTC_Bcd2ToByte
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:4383   .text:00001b68 RTC_ByteToBcd2
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:973    .text:00000664 RTC_TimeStructInit
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:1020   .text:00000698 RTC_GetTime
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:1122   .text:00000740 RTC_GetSubSecond
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:1167   .text:00000770 RTC_SetDate
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:1355   .text:000008b0 RTC_DateStructInit
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:1402   .text:000008e4 RTC_GetDate
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:1508   .text:00000994 RTC_SetAlarm
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:1731   .text:00000b10 RTC_AlarmStructInit
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:1790   .text:00000b5c RTC_GetAlarm
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:1928   .text:00000c48 RTC_AlarmCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2055   .text:00000d30 RTC_AlarmSubSecondConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2128   .text:00000da0 RTC_GetAlarmSubSecond
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2186   .text:00000df0 RTC_WakeUpClockConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2249   .text:00000e5c RTC_SetWakeUpCounter
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2300   .text:00000ea4 RTC_GetWakeUpCounter
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2333   .text:00000ec4 RTC_WakeUpCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2452   .text:00000f9c RTC_DayLightSavingConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2518   .text:00001010 RTC_GetStoreOperation
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2550   .text:0000102c RTC_OutputConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2616   .text:000010a0 RTC_CoarseCalibConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2691   .text:00001114 RTC_CoarseCalibCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2782   .text:000011b0 RTC_CalibOutputCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2852   .text:00001228 RTC_CalibOutputConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:2915   .text:00001294 RTC_SmoothCalibConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3024   .text:00001350 RTC_TimeStampCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3105   .text:000013d4 RTC_GetTimeStamp
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3269   .text:00001504 RTC_GetTimeStampSubSecond
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3300   .text:0000151c RTC_TamperTriggerConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3360   .text:00001574 RTC_TamperCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3419   .text:000015c8 RTC_TamperFilterConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3467   .text:0000160c RTC_TamperSamplingFreqConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3515   .text:00001650 RTC_TamperPinsPrechargeDuration
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3563   .text:00001694 RTC_TimeStampOnTamperDetectionCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3618   .text:000016e0 RTC_TamperPullUpCmd
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3673   .text:0000172c RTC_WriteBackupRegister
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3722   .text:00001764 RTC_ReadBackupRegister
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3770   .text:00001798 RTC_TamperPinSelection
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3818   .text:000017dc RTC_TimeStampPinSelection
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3866   .text:00001820 RTC_OutputTypeConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:3914   .text:00001864 RTC_SynchroShiftConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:4041   .text:00001944 RTC_ITConfig
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:4138   .text:00001a04 RTC_GetFlagStatus
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:4200   .text:00001a50 RTC_ClearFlag
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:4245   .text:00001a90 RTC_GetITStatus
C:\Users\Jure\AppData\Local\Temp\ccsV4Eb5.s:4332   .text:00001b1c RTC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
