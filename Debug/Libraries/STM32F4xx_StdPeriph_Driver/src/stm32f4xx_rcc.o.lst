   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.data
  19              		.align	2
  22              	APBAHBPrescTable:
  23 0000 00       		.byte	0
  24 0001 00       		.byte	0
  25 0002 00       		.byte	0
  26 0003 00       		.byte	0
  27 0004 01       		.byte	1
  28 0005 02       		.byte	2
  29 0006 03       		.byte	3
  30 0007 04       		.byte	4
  31 0008 01       		.byte	1
  32 0009 02       		.byte	2
  33 000a 03       		.byte	3
  34 000b 04       		.byte	4
  35 000c 06       		.byte	6
  36 000d 07       		.byte	7
  37 000e 08       		.byte	8
  38 000f 09       		.byte	9
  39              		.text
  40              		.align	2
  41              		.global	RCC_DeInit
  42              		.thumb
  43              		.thumb_func
  45              	RCC_DeInit:
  46              	.LFB110:
  47              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.0.0RC1
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    25-August-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Peripheral clocks configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Interrupts and flags management
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @verbatim
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                               RCC specific features
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                        
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @endverbatim
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      the PLL as System clock source.
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock source.
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      exception vector.   
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  48              		.loc 1 197 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 1, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53 0000 80B4     		push	{r7}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 4
  56              		.cfi_offset 7, -4
  57 0002 00AF     		add	r7, sp, #0
  58              	.LCFI1:
  59              		.cfi_def_cfa_register 7
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  60              		.loc 1 199 0
  61 0004 4FF46053 		mov	r3, #14336
  62 0008 C4F20203 		movt	r3, 16386
  63 000c 4FF46052 		mov	r2, #14336
  64 0010 C4F20202 		movt	r2, 16386
  65 0014 1268     		ldr	r2, [r2, #0]
  66 0016 42F00102 		orr	r2, r2, #1
  67 001a 1A60     		str	r2, [r3, #0]
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  68              		.loc 1 202 0
  69 001c 4FF46053 		mov	r3, #14336
  70 0020 C4F20203 		movt	r3, 16386
  71 0024 4FF00002 		mov	r2, #0
  72 0028 9A60     		str	r2, [r3, #8]
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  73              		.loc 1 205 0
  74 002a 4FF46053 		mov	r3, #14336
  75 002e C4F20203 		movt	r3, 16386
  76 0032 4FF46052 		mov	r2, #14336
  77 0036 C4F20202 		movt	r2, 16386
  78 003a 1268     		ldr	r2, [r2, #0]
  79 003c 22F08472 		bic	r2, r2, #17301504
  80 0040 22F48032 		bic	r2, r2, #65536
  81 0044 1A60     		str	r2, [r3, #0]
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  82              		.loc 1 208 0
  83 0046 4FF46053 		mov	r3, #14336
  84 004a C4F20203 		movt	r3, 16386
  85 004e 43F21002 		movw	r2, #12304
  86 0052 C2F20042 		movt	r2, 9216
  87 0056 5A60     		str	r2, [r3, #4]
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  88              		.loc 1 211 0
  89 0058 4FF46053 		mov	r3, #14336
  90 005c C4F20203 		movt	r3, 16386
  91 0060 4FF46052 		mov	r2, #14336
  92 0064 C4F20202 		movt	r2, 16386
  93 0068 1268     		ldr	r2, [r2, #0]
  94 006a 22F48022 		bic	r2, r2, #262144
  95 006e 1A60     		str	r2, [r3, #0]
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  96              		.loc 1 214 0
  97 0070 4FF46053 		mov	r3, #14336
  98 0074 C4F20203 		movt	r3, 16386
  99 0078 4FF00002 		mov	r2, #0
 100 007c DA60     		str	r2, [r3, #12]
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 101              		.loc 1 215 0
 102 007e BD46     		mov	sp, r7
 103 0080 80BC     		pop	{r7}
 104 0082 7047     		bx	lr
 105              		.cfi_endproc
 106              	.LFE110:
 108              		.align	2
 109              		.global	RCC_HSEConfig
 110              		.thumb
 111              		.thumb_func
 113              	RCC_HSEConfig:
 114              	.LFB111:
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 115              		.loc 1 238 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 8
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 0084 80B4     		push	{r7}
 121              	.LCFI2:
 122              		.cfi_def_cfa_offset 4
 123              		.cfi_offset 7, -4
 124 0086 83B0     		sub	sp, sp, #12
 125              	.LCFI3:
 126              		.cfi_def_cfa_offset 16
 127 0088 00AF     		add	r7, sp, #0
 128              	.LCFI4:
 129              		.cfi_def_cfa_register 7
 130 008a 0346     		mov	r3, r0
 131 008c FB71     		strb	r3, [r7, #7]
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 132              		.loc 1 243 0
 133 008e 43F60203 		movw	r3, #14338
 134 0092 C4F20203 		movt	r3, 16386
 135 0096 4FF00002 		mov	r2, #0
 136 009a 1A70     		strb	r2, [r3, #0]
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 137              		.loc 1 246 0
 138 009c 43F60203 		movw	r3, #14338
 139 00a0 C4F20203 		movt	r3, 16386
 140 00a4 FA79     		ldrb	r2, [r7, #7]
 141 00a6 1A70     		strb	r2, [r3, #0]
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 142              		.loc 1 247 0
 143 00a8 07F10C07 		add	r7, r7, #12
 144 00ac BD46     		mov	sp, r7
 145 00ae 80BC     		pop	{r7}
 146 00b0 7047     		bx	lr
 147              		.cfi_endproc
 148              	.LFE111:
 150 00b2 00BF     		.align	2
 151              		.global	RCC_WaitForHSEStartUp
 152              		.thumb
 153              		.thumb_func
 155              	RCC_WaitForHSEStartUp:
 156              	.LFB112:
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 157              		.loc 1 262 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 8
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161 00b4 80B5     		push	{r7, lr}
 162              	.LCFI5:
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 14, -4
 165              		.cfi_offset 7, -8
 166 00b6 82B0     		sub	sp, sp, #8
 167              	.LCFI6:
 168              		.cfi_def_cfa_offset 16
 169 00b8 00AF     		add	r7, sp, #0
 170              	.LCFI7:
 171              		.cfi_def_cfa_register 7
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 172              		.loc 1 263 0
 173 00ba 4FF00003 		mov	r3, #0
 174 00be 3B60     		str	r3, [r7, #0]
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 175              		.loc 1 264 0
 176 00c0 4FF00003 		mov	r3, #0
 177 00c4 FB71     		strb	r3, [r7, #7]
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 178              		.loc 1 265 0
 179 00c6 4FF00003 		mov	r3, #0
 180 00ca BB71     		strb	r3, [r7, #6]
 181              	.L5:
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 182              		.loc 1 269 0 discriminator 1
 183 00cc 4FF03100 		mov	r0, #49
 184 00d0 FFF7FEFF 		bl	RCC_GetFlagStatus
 185 00d4 0346     		mov	r3, r0
 186 00d6 BB71     		strb	r3, [r7, #6]
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 187              		.loc 1 270 0 discriminator 1
 188 00d8 3B68     		ldr	r3, [r7, #0]
 189 00da 03F10103 		add	r3, r3, #1
 190 00de 3B60     		str	r3, [r7, #0]
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 191              		.loc 1 271 0 discriminator 1
 192 00e0 3B68     		ldr	r3, [r7, #0]
 193 00e2 B3F5A06F 		cmp	r3, #1280
 194 00e6 02D0     		beq	.L4
 195 00e8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 196 00ea 002B     		cmp	r3, #0
 197 00ec EED0     		beq	.L5
 198              	.L4:
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 199              		.loc 1 273 0
 200 00ee 4FF03100 		mov	r0, #49
 201 00f2 FFF7FEFF 		bl	RCC_GetFlagStatus
 202 00f6 0346     		mov	r3, r0
 203 00f8 002B     		cmp	r3, #0
 204 00fa 03D0     		beq	.L6
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 205              		.loc 1 275 0
 206 00fc 4FF00103 		mov	r3, #1
 207 0100 FB71     		strb	r3, [r7, #7]
 208 0102 02E0     		b	.L7
 209              	.L6:
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 210              		.loc 1 279 0
 211 0104 4FF00003 		mov	r3, #0
 212 0108 FB71     		strb	r3, [r7, #7]
 213              	.L7:
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 214              		.loc 1 281 0
 215 010a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 216              		.loc 1 282 0
 217 010c 1846     		mov	r0, r3
 218 010e 07F10807 		add	r7, r7, #8
 219 0112 BD46     		mov	sp, r7
 220 0114 80BD     		pop	{r7, pc}
 221              		.cfi_endproc
 222              	.LFE112:
 224 0116 00BF     		.align	2
 225              		.global	RCC_AdjustHSICalibrationValue
 226              		.thumb
 227              		.thumb_func
 229              	RCC_AdjustHSICalibrationValue:
 230              	.LFB113:
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 231              		.loc 1 293 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 16
 234              		@ frame_needed = 1, uses_anonymous_args = 0
 235              		@ link register save eliminated.
 236 0118 80B4     		push	{r7}
 237              	.LCFI8:
 238              		.cfi_def_cfa_offset 4
 239              		.cfi_offset 7, -4
 240 011a 85B0     		sub	sp, sp, #20
 241              	.LCFI9:
 242              		.cfi_def_cfa_offset 24
 243 011c 00AF     		add	r7, sp, #0
 244              	.LCFI10:
 245              		.cfi_def_cfa_register 7
 246 011e 0346     		mov	r3, r0
 247 0120 FB71     		strb	r3, [r7, #7]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 248              		.loc 1 294 0
 249 0122 4FF00003 		mov	r3, #0
 250 0126 FB60     		str	r3, [r7, #12]
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 251              		.loc 1 298 0
 252 0128 4FF46053 		mov	r3, #14336
 253 012c C4F20203 		movt	r3, 16386
 254 0130 1B68     		ldr	r3, [r3, #0]
 255 0132 FB60     		str	r3, [r7, #12]
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 256              		.loc 1 301 0
 257 0134 FB68     		ldr	r3, [r7, #12]
 258 0136 23F0F803 		bic	r3, r3, #248
 259 013a FB60     		str	r3, [r7, #12]
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 260              		.loc 1 304 0
 261 013c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 262 013e 4FEAC303 		lsl	r3, r3, #3
 263 0142 FA68     		ldr	r2, [r7, #12]
 264 0144 1343     		orrs	r3, r3, r2
 265 0146 FB60     		str	r3, [r7, #12]
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 266              		.loc 1 307 0
 267 0148 4FF46053 		mov	r3, #14336
 268 014c C4F20203 		movt	r3, 16386
 269 0150 FA68     		ldr	r2, [r7, #12]
 270 0152 1A60     		str	r2, [r3, #0]
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 271              		.loc 1 308 0
 272 0154 07F11407 		add	r7, r7, #20
 273 0158 BD46     		mov	sp, r7
 274 015a 80BC     		pop	{r7}
 275 015c 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE113:
 279 015e 00BF     		.align	2
 280              		.global	RCC_HSICmd
 281              		.thumb
 282              		.thumb_func
 284              	RCC_HSICmd:
 285              	.LFB114:
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 286              		.loc 1 329 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 8
 289              		@ frame_needed = 1, uses_anonymous_args = 0
 290              		@ link register save eliminated.
 291 0160 80B4     		push	{r7}
 292              	.LCFI11:
 293              		.cfi_def_cfa_offset 4
 294              		.cfi_offset 7, -4
 295 0162 83B0     		sub	sp, sp, #12
 296              	.LCFI12:
 297              		.cfi_def_cfa_offset 16
 298 0164 00AF     		add	r7, sp, #0
 299              	.LCFI13:
 300              		.cfi_def_cfa_register 7
 301 0166 0346     		mov	r3, r0
 302 0168 FB71     		strb	r3, [r7, #7]
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 303              		.loc 1 333 0
 304 016a 4FF00003 		mov	r3, #0
 305 016e C4F24723 		movt	r3, 16967
 306 0172 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 307 0174 1A60     		str	r2, [r3, #0]
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 308              		.loc 1 334 0
 309 0176 07F10C07 		add	r7, r7, #12
 310 017a BD46     		mov	sp, r7
 311 017c 80BC     		pop	{r7}
 312 017e 7047     		bx	lr
 313              		.cfi_endproc
 314              	.LFE114:
 316              		.align	2
 317              		.global	RCC_LSEConfig
 318              		.thumb
 319              		.thumb_func
 321              	RCC_LSEConfig:
 322              	.LFB115:
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 323              		.loc 1 354 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 8
 326              		@ frame_needed = 1, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328 0180 80B4     		push	{r7}
 329              	.LCFI14:
 330              		.cfi_def_cfa_offset 4
 331              		.cfi_offset 7, -4
 332 0182 83B0     		sub	sp, sp, #12
 333              	.LCFI15:
 334              		.cfi_def_cfa_offset 16
 335 0184 00AF     		add	r7, sp, #0
 336              	.LCFI16:
 337              		.cfi_def_cfa_register 7
 338 0186 0346     		mov	r3, r0
 339 0188 FB71     		strb	r3, [r7, #7]
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 340              		.loc 1 360 0
 341 018a 43F67003 		movw	r3, #14448
 342 018e C4F20203 		movt	r3, 16386
 343 0192 4FF00002 		mov	r2, #0
 344 0196 1A70     		strb	r2, [r3, #0]
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 345              		.loc 1 363 0
 346 0198 43F67003 		movw	r3, #14448
 347 019c C4F20203 		movt	r3, 16386
 348 01a0 4FF00002 		mov	r2, #0
 349 01a4 1A70     		strb	r2, [r3, #0]
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 350              		.loc 1 366 0
 351 01a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 352 01a8 012B     		cmp	r3, #1
 353 01aa 02D0     		beq	.L12
 354 01ac 042B     		cmp	r3, #4
 355 01ae 08D0     		beq	.L13
 356 01b0 0FE0     		b	.L15
 357              	.L12:
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 358              		.loc 1 370 0
 359 01b2 43F67003 		movw	r3, #14448
 360 01b6 C4F20203 		movt	r3, 16386
 361 01ba 4FF00102 		mov	r2, #1
 362 01be 1A70     		strb	r2, [r3, #0]
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 363              		.loc 1 371 0
 364 01c0 08E0     		b	.L10
 365              	.L13:
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 366              		.loc 1 374 0
 367 01c2 43F67003 		movw	r3, #14448
 368 01c6 C4F20203 		movt	r3, 16386
 369 01ca 4FF00502 		mov	r2, #5
 370 01ce 1A70     		strb	r2, [r3, #0]
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 371              		.loc 1 375 0
 372 01d0 00E0     		b	.L10
 373              	.L15:
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 374              		.loc 1 377 0
 375 01d2 00BF     		nop
 376              	.L10:
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 377              		.loc 1 379 0
 378 01d4 07F10C07 		add	r7, r7, #12
 379 01d8 BD46     		mov	sp, r7
 380 01da 80BC     		pop	{r7}
 381 01dc 7047     		bx	lr
 382              		.cfi_endproc
 383              	.LFE115:
 385 01de 00BF     		.align	2
 386              		.global	RCC_LSICmd
 387              		.thumb
 388              		.thumb_func
 390              	RCC_LSICmd:
 391              	.LFB116:
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 392              		.loc 1 394 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 8
 395              		@ frame_needed = 1, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 397 01e0 80B4     		push	{r7}
 398              	.LCFI17:
 399              		.cfi_def_cfa_offset 4
 400              		.cfi_offset 7, -4
 401 01e2 83B0     		sub	sp, sp, #12
 402              	.LCFI18:
 403              		.cfi_def_cfa_offset 16
 404 01e4 00AF     		add	r7, sp, #0
 405              	.LCFI19:
 406              		.cfi_def_cfa_register 7
 407 01e6 0346     		mov	r3, r0
 408 01e8 FB71     		strb	r3, [r7, #7]
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 409              		.loc 1 398 0
 410 01ea 4FF46863 		mov	r3, #3712
 411 01ee C4F24723 		movt	r3, 16967
 412 01f2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 413 01f4 1A60     		str	r2, [r3, #0]
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 414              		.loc 1 399 0
 415 01f6 07F10C07 		add	r7, r7, #12
 416 01fa BD46     		mov	sp, r7
 417 01fc 80BC     		pop	{r7}
 418 01fe 7047     		bx	lr
 419              		.cfi_endproc
 420              	.LFE116:
 422              		.align	2
 423              		.global	RCC_PLLConfig
 424              		.thumb
 425              		.thumb_func
 427              	RCC_PLLConfig:
 428              	.LFB117:
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 429              		.loc 1 437 0
 430              		.cfi_startproc
 431              		@ args = 4, pretend = 0, frame = 16
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434 0200 80B4     		push	{r7}
 435              	.LCFI20:
 436              		.cfi_def_cfa_offset 4
 437              		.cfi_offset 7, -4
 438 0202 85B0     		sub	sp, sp, #20
 439              	.LCFI21:
 440              		.cfi_def_cfa_offset 24
 441 0204 00AF     		add	r7, sp, #0
 442              	.LCFI22:
 443              		.cfi_def_cfa_register 7
 444 0206 F860     		str	r0, [r7, #12]
 445 0208 B960     		str	r1, [r7, #8]
 446 020a 7A60     		str	r2, [r7, #4]
 447 020c 3B60     		str	r3, [r7, #0]
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 448              		.loc 1 445 0
 449 020e 4FF46053 		mov	r3, #14336
 450 0212 C4F20203 		movt	r3, 16386
 451 0216 7A68     		ldr	r2, [r7, #4]
 452 0218 4FEA8211 		lsl	r1, r2, #6
 453 021c BA68     		ldr	r2, [r7, #8]
 454 021e 1143     		orrs	r1, r1, r2
 455 0220 3A68     		ldr	r2, [r7, #0]
 456 0222 4FEA5202 		lsr	r2, r2, #1
 457 0226 02F1FF32 		add	r2, r2, #-1
 458 022a 4FEA0242 		lsl	r2, r2, #16
 459 022e 1143     		orrs	r1, r1, r2
 460 0230 FA68     		ldr	r2, [r7, #12]
 461 0232 1143     		orrs	r1, r1, r2
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 462              		.loc 1 446 0
 463 0234 BA69     		ldr	r2, [r7, #24]
 464 0236 4FEA0262 		lsl	r2, r2, #24
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 465              		.loc 1 445 0
 466 023a 0A43     		orrs	r2, r2, r1
 467 023c 5A60     		str	r2, [r3, #4]
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 468              		.loc 1 447 0
 469 023e 07F11407 		add	r7, r7, #20
 470 0242 BD46     		mov	sp, r7
 471 0244 80BC     		pop	{r7}
 472 0246 7047     		bx	lr
 473              		.cfi_endproc
 474              	.LFE117:
 476              		.align	2
 477              		.global	RCC_PLLCmd
 478              		.thumb
 479              		.thumb_func
 481              	RCC_PLLCmd:
 482              	.LFB118:
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 483              		.loc 1 460 0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 8
 486              		@ frame_needed = 1, uses_anonymous_args = 0
 487              		@ link register save eliminated.
 488 0248 80B4     		push	{r7}
 489              	.LCFI23:
 490              		.cfi_def_cfa_offset 4
 491              		.cfi_offset 7, -4
 492 024a 83B0     		sub	sp, sp, #12
 493              	.LCFI24:
 494              		.cfi_def_cfa_offset 16
 495 024c 00AF     		add	r7, sp, #0
 496              	.LCFI25:
 497              		.cfi_def_cfa_register 7
 498 024e 0346     		mov	r3, r0
 499 0250 FB71     		strb	r3, [r7, #7]
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 500              		.loc 1 463 0
 501 0252 4FF06003 		mov	r3, #96
 502 0256 C4F24723 		movt	r3, 16967
 503 025a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 504 025c 1A60     		str	r2, [r3, #0]
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 505              		.loc 1 464 0
 506 025e 07F10C07 		add	r7, r7, #12
 507 0262 BD46     		mov	sp, r7
 508 0264 80BC     		pop	{r7}
 509 0266 7047     		bx	lr
 510              		.cfi_endproc
 511              	.LFE118:
 513              		.align	2
 514              		.global	RCC_PLLI2SConfig
 515              		.thumb
 516              		.thumb_func
 518              	RCC_PLLI2SConfig:
 519              	.LFB119:
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 520              		.loc 1 487 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 8
 523              		@ frame_needed = 1, uses_anonymous_args = 0
 524              		@ link register save eliminated.
 525 0268 80B4     		push	{r7}
 526              	.LCFI26:
 527              		.cfi_def_cfa_offset 4
 528              		.cfi_offset 7, -4
 529 026a 83B0     		sub	sp, sp, #12
 530              	.LCFI27:
 531              		.cfi_def_cfa_offset 16
 532 026c 00AF     		add	r7, sp, #0
 533              	.LCFI28:
 534              		.cfi_def_cfa_register 7
 535 026e 7860     		str	r0, [r7, #4]
 536 0270 3960     		str	r1, [r7, #0]
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 537              		.loc 1 492 0
 538 0272 4FF46053 		mov	r3, #14336
 539 0276 C4F20203 		movt	r3, 16386
 540 027a 7A68     		ldr	r2, [r7, #4]
 541 027c 4FEA8211 		lsl	r1, r2, #6
 542 0280 3A68     		ldr	r2, [r7, #0]
 543 0282 4FEA0272 		lsl	r2, r2, #28
 544 0286 0A43     		orrs	r2, r2, r1
 545 0288 C3F88420 		str	r2, [r3, #132]
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 546              		.loc 1 493 0
 547 028c 07F10C07 		add	r7, r7, #12
 548 0290 BD46     		mov	sp, r7
 549 0292 80BC     		pop	{r7}
 550 0294 7047     		bx	lr
 551              		.cfi_endproc
 552              	.LFE119:
 554 0296 00BF     		.align	2
 555              		.global	RCC_PLLI2SCmd
 556              		.thumb
 557              		.thumb_func
 559              	RCC_PLLI2SCmd:
 560              	.LFB120:
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 561              		.loc 1 503 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 8
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0298 80B4     		push	{r7}
 567              	.LCFI29:
 568              		.cfi_def_cfa_offset 4
 569              		.cfi_offset 7, -4
 570 029a 83B0     		sub	sp, sp, #12
 571              	.LCFI30:
 572              		.cfi_def_cfa_offset 16
 573 029c 00AF     		add	r7, sp, #0
 574              	.LCFI31:
 575              		.cfi_def_cfa_register 7
 576 029e 0346     		mov	r3, r0
 577 02a0 FB71     		strb	r3, [r7, #7]
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 578              		.loc 1 506 0
 579 02a2 4FF06803 		mov	r3, #104
 580 02a6 C4F24723 		movt	r3, 16967
 581 02aa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 582 02ac 1A60     		str	r2, [r3, #0]
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 583              		.loc 1 507 0
 584 02ae 07F10C07 		add	r7, r7, #12
 585 02b2 BD46     		mov	sp, r7
 586 02b4 80BC     		pop	{r7}
 587 02b6 7047     		bx	lr
 588              		.cfi_endproc
 589              	.LFE120:
 591              		.align	2
 592              		.global	RCC_ClockSecuritySystemCmd
 593              		.thumb
 594              		.thumb_func
 596              	RCC_ClockSecuritySystemCmd:
 597              	.LFB121:
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 598              		.loc 1 521 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 8
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603 02b8 80B4     		push	{r7}
 604              	.LCFI32:
 605              		.cfi_def_cfa_offset 4
 606              		.cfi_offset 7, -4
 607 02ba 83B0     		sub	sp, sp, #12
 608              	.LCFI33:
 609              		.cfi_def_cfa_offset 16
 610 02bc 00AF     		add	r7, sp, #0
 611              	.LCFI34:
 612              		.cfi_def_cfa_register 7
 613 02be 0346     		mov	r3, r0
 614 02c0 FB71     		strb	r3, [r7, #7]
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 615              		.loc 1 524 0
 616 02c2 4FF04C03 		mov	r3, #76
 617 02c6 C4F24723 		movt	r3, 16967
 618 02ca FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 619 02cc 1A60     		str	r2, [r3, #0]
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 620              		.loc 1 525 0
 621 02ce 07F10C07 		add	r7, r7, #12
 622 02d2 BD46     		mov	sp, r7
 623 02d4 80BC     		pop	{r7}
 624 02d6 7047     		bx	lr
 625              		.cfi_endproc
 626              	.LFE121:
 628              		.align	2
 629              		.global	RCC_MCO1Config
 630              		.thumb
 631              		.thumb_func
 633              	RCC_MCO1Config:
 634              	.LFB122:
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 635              		.loc 1 546 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 16
 638              		@ frame_needed = 1, uses_anonymous_args = 0
 639              		@ link register save eliminated.
 640 02d8 80B4     		push	{r7}
 641              	.LCFI35:
 642              		.cfi_def_cfa_offset 4
 643              		.cfi_offset 7, -4
 644 02da 85B0     		sub	sp, sp, #20
 645              	.LCFI36:
 646              		.cfi_def_cfa_offset 24
 647 02dc 00AF     		add	r7, sp, #0
 648              	.LCFI37:
 649              		.cfi_def_cfa_register 7
 650 02de 7860     		str	r0, [r7, #4]
 651 02e0 3960     		str	r1, [r7, #0]
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 652              		.loc 1 547 0
 653 02e2 4FF00003 		mov	r3, #0
 654 02e6 FB60     		str	r3, [r7, #12]
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 655              		.loc 1 553 0
 656 02e8 4FF46053 		mov	r3, #14336
 657 02ec C4F20203 		movt	r3, 16386
 658 02f0 9B68     		ldr	r3, [r3, #8]
 659 02f2 FB60     		str	r3, [r7, #12]
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 660              		.loc 1 556 0
 661 02f4 FB68     		ldr	r3, [r7, #12]
 662 02f6 23F0EC63 		bic	r3, r3, #123731968
 663 02fa FB60     		str	r3, [r7, #12]
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 664              		.loc 1 559 0
 665 02fc 7A68     		ldr	r2, [r7, #4]
 666 02fe 3B68     		ldr	r3, [r7, #0]
 667 0300 1343     		orrs	r3, r3, r2
 668 0302 FA68     		ldr	r2, [r7, #12]
 669 0304 1343     		orrs	r3, r3, r2
 670 0306 FB60     		str	r3, [r7, #12]
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 671              		.loc 1 562 0
 672 0308 4FF46053 		mov	r3, #14336
 673 030c C4F20203 		movt	r3, 16386
 674 0310 FA68     		ldr	r2, [r7, #12]
 675 0312 9A60     		str	r2, [r3, #8]
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 676              		.loc 1 563 0
 677 0314 07F11407 		add	r7, r7, #20
 678 0318 BD46     		mov	sp, r7
 679 031a 80BC     		pop	{r7}
 680 031c 7047     		bx	lr
 681              		.cfi_endproc
 682              	.LFE122:
 684 031e 00BF     		.align	2
 685              		.global	RCC_MCO2Config
 686              		.thumb
 687              		.thumb_func
 689              	RCC_MCO2Config:
 690              	.LFB123:
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 691              		.loc 1 584 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 16
 694              		@ frame_needed = 1, uses_anonymous_args = 0
 695              		@ link register save eliminated.
 696 0320 80B4     		push	{r7}
 697              	.LCFI38:
 698              		.cfi_def_cfa_offset 4
 699              		.cfi_offset 7, -4
 700 0322 85B0     		sub	sp, sp, #20
 701              	.LCFI39:
 702              		.cfi_def_cfa_offset 24
 703 0324 00AF     		add	r7, sp, #0
 704              	.LCFI40:
 705              		.cfi_def_cfa_register 7
 706 0326 7860     		str	r0, [r7, #4]
 707 0328 3960     		str	r1, [r7, #0]
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 708              		.loc 1 585 0
 709 032a 4FF00003 		mov	r3, #0
 710 032e FB60     		str	r3, [r7, #12]
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 711              		.loc 1 591 0
 712 0330 4FF46053 		mov	r3, #14336
 713 0334 C4F20203 		movt	r3, 16386
 714 0338 9B68     		ldr	r3, [r3, #8]
 715 033a FB60     		str	r3, [r7, #12]
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 716              		.loc 1 594 0
 717 033c FB68     		ldr	r3, [r7, #12]
 718 033e 23F07843 		bic	r3, r3, #-134217728
 719 0342 FB60     		str	r3, [r7, #12]
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 720              		.loc 1 597 0
 721 0344 7A68     		ldr	r2, [r7, #4]
 722 0346 3B68     		ldr	r3, [r7, #0]
 723 0348 1343     		orrs	r3, r3, r2
 724 034a FA68     		ldr	r2, [r7, #12]
 725 034c 1343     		orrs	r3, r3, r2
 726 034e FB60     		str	r3, [r7, #12]
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 727              		.loc 1 600 0
 728 0350 4FF46053 		mov	r3, #14336
 729 0354 C4F20203 		movt	r3, 16386
 730 0358 FA68     		ldr	r2, [r7, #12]
 731 035a 9A60     		str	r2, [r3, #8]
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 732              		.loc 1 601 0
 733 035c 07F11407 		add	r7, r7, #20
 734 0360 BD46     		mov	sp, r7
 735 0362 80BC     		pop	{r7}
 736 0364 7047     		bx	lr
 737              		.cfi_endproc
 738              	.LFE123:
 740 0366 00BF     		.align	2
 741              		.global	RCC_SYSCLKConfig
 742              		.thumb
 743              		.thumb_func
 745              	RCC_SYSCLKConfig:
 746              	.LFB124:
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   APB2 busses clocks.
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      HSE and PLL.
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           functions to configure this clock. 
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      adapted accordingly:
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 747              		.loc 1 689 0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 16
 750              		@ frame_needed = 1, uses_anonymous_args = 0
 751              		@ link register save eliminated.
 752 0368 80B4     		push	{r7}
 753              	.LCFI41:
 754              		.cfi_def_cfa_offset 4
 755              		.cfi_offset 7, -4
 756 036a 85B0     		sub	sp, sp, #20
 757              	.LCFI42:
 758              		.cfi_def_cfa_offset 24
 759 036c 00AF     		add	r7, sp, #0
 760              	.LCFI43:
 761              		.cfi_def_cfa_register 7
 762 036e 7860     		str	r0, [r7, #4]
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 763              		.loc 1 690 0
 764 0370 4FF00003 		mov	r3, #0
 765 0374 FB60     		str	r3, [r7, #12]
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 766              		.loc 1 695 0
 767 0376 4FF46053 		mov	r3, #14336
 768 037a C4F20203 		movt	r3, 16386
 769 037e 9B68     		ldr	r3, [r3, #8]
 770 0380 FB60     		str	r3, [r7, #12]
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 771              		.loc 1 698 0
 772 0382 FB68     		ldr	r3, [r7, #12]
 773 0384 23F00303 		bic	r3, r3, #3
 774 0388 FB60     		str	r3, [r7, #12]
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 775              		.loc 1 701 0
 776 038a FA68     		ldr	r2, [r7, #12]
 777 038c 7B68     		ldr	r3, [r7, #4]
 778 038e 1343     		orrs	r3, r3, r2
 779 0390 FB60     		str	r3, [r7, #12]
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 780              		.loc 1 704 0
 781 0392 4FF46053 		mov	r3, #14336
 782 0396 C4F20203 		movt	r3, 16386
 783 039a FA68     		ldr	r2, [r7, #12]
 784 039c 9A60     		str	r2, [r3, #8]
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 785              		.loc 1 705 0
 786 039e 07F11407 		add	r7, r7, #20
 787 03a2 BD46     		mov	sp, r7
 788 03a4 80BC     		pop	{r7}
 789 03a6 7047     		bx	lr
 790              		.cfi_endproc
 791              	.LFE124:
 793              		.align	2
 794              		.global	RCC_GetSYSCLKSource
 795              		.thumb
 796              		.thumb_func
 798              	RCC_GetSYSCLKSource:
 799              	.LFB125:
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 800              		.loc 1 717 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 1, uses_anonymous_args = 0
 804              		@ link register save eliminated.
 805 03a8 80B4     		push	{r7}
 806              	.LCFI44:
 807              		.cfi_def_cfa_offset 4
 808              		.cfi_offset 7, -4
 809 03aa 00AF     		add	r7, sp, #0
 810              	.LCFI45:
 811              		.cfi_def_cfa_register 7
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 812              		.loc 1 718 0
 813 03ac 4FF46053 		mov	r3, #14336
 814 03b0 C4F20203 		movt	r3, 16386
 815 03b4 9B68     		ldr	r3, [r3, #8]
 816 03b6 DBB2     		uxtb	r3, r3
 817 03b8 03F00C03 		and	r3, r3, #12
 818 03bc DBB2     		uxtb	r3, r3
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 819              		.loc 1 719 0
 820 03be 1846     		mov	r0, r3
 821 03c0 BD46     		mov	sp, r7
 822 03c2 80BC     		pop	{r7}
 823 03c4 7047     		bx	lr
 824              		.cfi_endproc
 825              	.LFE125:
 827 03c6 00BF     		.align	2
 828              		.global	RCC_HCLKConfig
 829              		.thumb
 830              		.thumb_func
 832              	RCC_HCLKConfig:
 833              	.LFB126:
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 834              		.loc 1 742 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 16
 837              		@ frame_needed = 1, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839 03c8 80B4     		push	{r7}
 840              	.LCFI46:
 841              		.cfi_def_cfa_offset 4
 842              		.cfi_offset 7, -4
 843 03ca 85B0     		sub	sp, sp, #20
 844              	.LCFI47:
 845              		.cfi_def_cfa_offset 24
 846 03cc 00AF     		add	r7, sp, #0
 847              	.LCFI48:
 848              		.cfi_def_cfa_register 7
 849 03ce 7860     		str	r0, [r7, #4]
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 850              		.loc 1 743 0
 851 03d0 4FF00003 		mov	r3, #0
 852 03d4 FB60     		str	r3, [r7, #12]
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 853              		.loc 1 748 0
 854 03d6 4FF46053 		mov	r3, #14336
 855 03da C4F20203 		movt	r3, 16386
 856 03de 9B68     		ldr	r3, [r3, #8]
 857 03e0 FB60     		str	r3, [r7, #12]
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 858              		.loc 1 751 0
 859 03e2 FB68     		ldr	r3, [r7, #12]
 860 03e4 23F0F003 		bic	r3, r3, #240
 861 03e8 FB60     		str	r3, [r7, #12]
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 862              		.loc 1 754 0
 863 03ea FA68     		ldr	r2, [r7, #12]
 864 03ec 7B68     		ldr	r3, [r7, #4]
 865 03ee 1343     		orrs	r3, r3, r2
 866 03f0 FB60     		str	r3, [r7, #12]
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 867              		.loc 1 757 0
 868 03f2 4FF46053 		mov	r3, #14336
 869 03f6 C4F20203 		movt	r3, 16386
 870 03fa FA68     		ldr	r2, [r7, #12]
 871 03fc 9A60     		str	r2, [r3, #8]
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 872              		.loc 1 758 0
 873 03fe 07F11407 		add	r7, r7, #20
 874 0402 BD46     		mov	sp, r7
 875 0404 80BC     		pop	{r7}
 876 0406 7047     		bx	lr
 877              		.cfi_endproc
 878              	.LFE126:
 880              		.align	2
 881              		.global	RCC_PCLK1Config
 882              		.thumb
 883              		.thumb_func
 885              	RCC_PCLK1Config:
 886              	.LFB127:
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 887              		.loc 1 774 0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 16
 890              		@ frame_needed = 1, uses_anonymous_args = 0
 891              		@ link register save eliminated.
 892 0408 80B4     		push	{r7}
 893              	.LCFI49:
 894              		.cfi_def_cfa_offset 4
 895              		.cfi_offset 7, -4
 896 040a 85B0     		sub	sp, sp, #20
 897              	.LCFI50:
 898              		.cfi_def_cfa_offset 24
 899 040c 00AF     		add	r7, sp, #0
 900              	.LCFI51:
 901              		.cfi_def_cfa_register 7
 902 040e 7860     		str	r0, [r7, #4]
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 903              		.loc 1 775 0
 904 0410 4FF00003 		mov	r3, #0
 905 0414 FB60     		str	r3, [r7, #12]
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 906              		.loc 1 780 0
 907 0416 4FF46053 		mov	r3, #14336
 908 041a C4F20203 		movt	r3, 16386
 909 041e 9B68     		ldr	r3, [r3, #8]
 910 0420 FB60     		str	r3, [r7, #12]
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 911              		.loc 1 783 0
 912 0422 FB68     		ldr	r3, [r7, #12]
 913 0424 23F4E053 		bic	r3, r3, #7168
 914 0428 FB60     		str	r3, [r7, #12]
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 915              		.loc 1 786 0
 916 042a FA68     		ldr	r2, [r7, #12]
 917 042c 7B68     		ldr	r3, [r7, #4]
 918 042e 1343     		orrs	r3, r3, r2
 919 0430 FB60     		str	r3, [r7, #12]
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 920              		.loc 1 789 0
 921 0432 4FF46053 		mov	r3, #14336
 922 0436 C4F20203 		movt	r3, 16386
 923 043a FA68     		ldr	r2, [r7, #12]
 924 043c 9A60     		str	r2, [r3, #8]
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 925              		.loc 1 790 0
 926 043e 07F11407 		add	r7, r7, #20
 927 0442 BD46     		mov	sp, r7
 928 0444 80BC     		pop	{r7}
 929 0446 7047     		bx	lr
 930              		.cfi_endproc
 931              	.LFE127:
 933              		.align	2
 934              		.global	RCC_PCLK2Config
 935              		.thumb
 936              		.thumb_func
 938              	RCC_PCLK2Config:
 939              	.LFB128:
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 940              		.loc 1 805 0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 16
 943              		@ frame_needed = 1, uses_anonymous_args = 0
 944              		@ link register save eliminated.
 945 0448 80B4     		push	{r7}
 946              	.LCFI52:
 947              		.cfi_def_cfa_offset 4
 948              		.cfi_offset 7, -4
 949 044a 85B0     		sub	sp, sp, #20
 950              	.LCFI53:
 951              		.cfi_def_cfa_offset 24
 952 044c 00AF     		add	r7, sp, #0
 953              	.LCFI54:
 954              		.cfi_def_cfa_register 7
 955 044e 7860     		str	r0, [r7, #4]
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 956              		.loc 1 806 0
 957 0450 4FF00003 		mov	r3, #0
 958 0454 FB60     		str	r3, [r7, #12]
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 959              		.loc 1 811 0
 960 0456 4FF46053 		mov	r3, #14336
 961 045a C4F20203 		movt	r3, 16386
 962 045e 9B68     		ldr	r3, [r3, #8]
 963 0460 FB60     		str	r3, [r7, #12]
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 964              		.loc 1 814 0
 965 0462 FB68     		ldr	r3, [r7, #12]
 966 0464 23F46043 		bic	r3, r3, #57344
 967 0468 FB60     		str	r3, [r7, #12]
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 968              		.loc 1 817 0
 969 046a 7B68     		ldr	r3, [r7, #4]
 970 046c 4FEAC303 		lsl	r3, r3, #3
 971 0470 FA68     		ldr	r2, [r7, #12]
 972 0472 1343     		orrs	r3, r3, r2
 973 0474 FB60     		str	r3, [r7, #12]
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 974              		.loc 1 820 0
 975 0476 4FF46053 		mov	r3, #14336
 976 047a C4F20203 		movt	r3, 16386
 977 047e FA68     		ldr	r2, [r7, #12]
 978 0480 9A60     		str	r2, [r3, #8]
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 979              		.loc 1 821 0
 980 0482 07F11407 		add	r7, r7, #20
 981 0486 BD46     		mov	sp, r7
 982 0488 80BC     		pop	{r7}
 983 048a 7047     		bx	lr
 984              		.cfi_endproc
 985              	.LFE128:
 987              		.align	2
 988              		.global	RCC_GetClocksFreq
 989              		.thumb
 990              		.thumb_func
 992              	RCC_GetClocksFreq:
 993              	.LFB129:
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 994              		.loc 1 857 0
 995              		.cfi_startproc
 996              		@ args = 0, pretend = 0, frame = 32
 997              		@ frame_needed = 1, uses_anonymous_args = 0
 998              		@ link register save eliminated.
 999 048c 80B4     		push	{r7}
 1000              	.LCFI55:
 1001              		.cfi_def_cfa_offset 4
 1002              		.cfi_offset 7, -4
 1003 048e 89B0     		sub	sp, sp, #36
 1004              	.LCFI56:
 1005              		.cfi_def_cfa_offset 40
 1006 0490 00AF     		add	r7, sp, #0
 1007              	.LCFI57:
 1008              		.cfi_def_cfa_register 7
 1009 0492 7860     		str	r0, [r7, #4]
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1010              		.loc 1 858 0
 1011 0494 4FF00003 		mov	r3, #0
 1012 0498 BB61     		str	r3, [r7, #24]
 1013 049a 4FF00003 		mov	r3, #0
 1014 049e 7B61     		str	r3, [r7, #20]
 1015 04a0 4FF00003 		mov	r3, #0
 1016 04a4 FB61     		str	r3, [r7, #28]
 1017 04a6 4FF00203 		mov	r3, #2
 1018 04aa 3B61     		str	r3, [r7, #16]
 1019 04ac 4FF00003 		mov	r3, #0
 1020 04b0 FB60     		str	r3, [r7, #12]
 1021 04b2 4FF00203 		mov	r3, #2
 1022 04b6 BB60     		str	r3, [r7, #8]
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1023              		.loc 1 861 0
 1024 04b8 4FF46053 		mov	r3, #14336
 1025 04bc C4F20203 		movt	r3, 16386
 1026 04c0 9B68     		ldr	r3, [r3, #8]
 1027 04c2 03F00C03 		and	r3, r3, #12
 1028 04c6 BB61     		str	r3, [r7, #24]
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
 1029              		.loc 1 863 0
 1030 04c8 BB69     		ldr	r3, [r7, #24]
 1031 04ca 042B     		cmp	r3, #4
 1032 04cc 0AD0     		beq	.L32
 1033 04ce 082B     		cmp	r3, #8
 1034 04d0 0FD0     		beq	.L33
 1035 04d2 002B     		cmp	r3, #0
 1036 04d4 60D1     		bne	.L37
 1037              	.L31:
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1038              		.loc 1 866 0
 1039 04d6 7A68     		ldr	r2, [r7, #4]
 1040 04d8 4FF41053 		mov	r3, #9216
 1041 04dc C0F2F403 		movt	r3, 244
 1042 04e0 1360     		str	r3, [r2, #0]
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1043              		.loc 1 867 0
 1044 04e2 60E0     		b	.L34
 1045              	.L32:
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1046              		.loc 1 869 0
 1047 04e4 7A68     		ldr	r2, [r7, #4]
 1048 04e6 4FF49053 		mov	r3, #4608
 1049 04ea C0F27A03 		movt	r3, 122
 1050 04ee 1360     		str	r3, [r2, #0]
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1051              		.loc 1 870 0
 1052 04f0 59E0     		b	.L34
 1053              	.L33:
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          */    
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 1054              		.loc 1 876 0
 1055 04f2 4FF46053 		mov	r3, #14336
 1056 04f6 C4F20203 		movt	r3, 16386
 1057 04fa 5B68     		ldr	r3, [r3, #4]
 1058 04fc 03F48003 		and	r3, r3, #4194304
 1059 0500 4FEA9353 		lsr	r3, r3, #22
 1060 0504 FB60     		str	r3, [r7, #12]
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1061              		.loc 1 877 0
 1062 0506 4FF46053 		mov	r3, #14336
 1063 050a C4F20203 		movt	r3, 16386
 1064 050e 5B68     		ldr	r3, [r3, #4]
 1065 0510 03F03F03 		and	r3, r3, #63
 1066 0514 BB60     		str	r3, [r7, #8]
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
 1067              		.loc 1 879 0
 1068 0516 FB68     		ldr	r3, [r7, #12]
 1069 0518 002B     		cmp	r3, #0
 1070 051a 14D0     		beq	.L35
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 1071              		.loc 1 882 0
 1072 051c 4FF49053 		mov	r3, #4608
 1073 0520 C0F27A03 		movt	r3, 122
 1074 0524 BA68     		ldr	r2, [r7, #8]
 1075 0526 B3FBF2F2 		udiv	r2, r3, r2
 1076 052a 4FF46053 		mov	r3, #14336
 1077 052e C4F20203 		movt	r3, 16386
 1078 0532 5968     		ldr	r1, [r3, #4]
 1079 0534 47F6C073 		movw	r3, #32704
 1080 0538 0B40     		ands	r3, r3, r1
 1081 053a 4FEA9313 		lsr	r3, r3, #6
 1082 053e 03FB02F3 		mul	r3, r3, r2
 1083 0542 FB61     		str	r3, [r7, #28]
 1084 0544 13E0     		b	.L36
 1085              	.L35:
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       else
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 1086              		.loc 1 887 0
 1087 0546 4FF41053 		mov	r3, #9216
 1088 054a C0F2F403 		movt	r3, 244
 1089 054e BA68     		ldr	r2, [r7, #8]
 1090 0550 B3FBF2F2 		udiv	r2, r3, r2
 1091 0554 4FF46053 		mov	r3, #14336
 1092 0558 C4F20203 		movt	r3, 16386
 1093 055c 5968     		ldr	r1, [r3, #4]
 1094 055e 47F6C073 		movw	r3, #32704
 1095 0562 0B40     		ands	r3, r3, r1
 1096 0564 4FEA9313 		lsr	r3, r3, #6
 1097 0568 03FB02F3 		mul	r3, r3, r2
 1098 056c FB61     		str	r3, [r7, #28]
 1099              	.L36:
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 1100              		.loc 1 890 0
 1101 056e 4FF46053 		mov	r3, #14336
 1102 0572 C4F20203 		movt	r3, 16386
 1103 0576 5B68     		ldr	r3, [r3, #4]
 1104 0578 03F44033 		and	r3, r3, #196608
 1105 057c 4FEA1343 		lsr	r3, r3, #16
 1106 0580 03F10103 		add	r3, r3, #1
 1107 0584 4FEA4303 		lsl	r3, r3, #1
 1108 0588 3B61     		str	r3, [r7, #16]
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1109              		.loc 1 891 0
 1110 058a FA69     		ldr	r2, [r7, #28]
 1111 058c 3B69     		ldr	r3, [r7, #16]
 1112 058e B2FBF3F2 		udiv	r2, r2, r3
 1113 0592 7B68     		ldr	r3, [r7, #4]
 1114 0594 1A60     		str	r2, [r3, #0]
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1115              		.loc 1 892 0
 1116 0596 06E0     		b	.L34
 1117              	.L37:
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1118              		.loc 1 894 0
 1119 0598 7A68     		ldr	r2, [r7, #4]
 1120 059a 4FF41053 		mov	r3, #9216
 1121 059e C0F2F403 		movt	r3, 244
 1122 05a2 1360     		str	r3, [r2, #0]
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1123              		.loc 1 895 0
 1124 05a4 00BF     		nop
 1125              	.L34:
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1126              		.loc 1 900 0
 1127 05a6 4FF46053 		mov	r3, #14336
 1128 05aa C4F20203 		movt	r3, 16386
 1129 05ae 9B68     		ldr	r3, [r3, #8]
 1130 05b0 03F0F003 		and	r3, r3, #240
 1131 05b4 BB61     		str	r3, [r7, #24]
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1132              		.loc 1 901 0
 1133 05b6 BB69     		ldr	r3, [r7, #24]
 1134 05b8 4FEA1313 		lsr	r3, r3, #4
 1135 05bc BB61     		str	r3, [r7, #24]
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1136              		.loc 1 902 0
 1137 05be 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1138 05c2 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1139 05c6 BA69     		ldr	r2, [r7, #24]
 1140 05c8 9B18     		adds	r3, r3, r2
 1141 05ca 1B78     		ldrb	r3, [r3, #0]
 1142 05cc DBB2     		uxtb	r3, r3
 1143 05ce 7B61     		str	r3, [r7, #20]
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1144              		.loc 1 904 0
 1145 05d0 7B68     		ldr	r3, [r7, #4]
 1146 05d2 1A68     		ldr	r2, [r3, #0]
 1147 05d4 7B69     		ldr	r3, [r7, #20]
 1148 05d6 22FA03F2 		lsr	r2, r2, r3
 1149 05da 7B68     		ldr	r3, [r7, #4]
 1150 05dc 5A60     		str	r2, [r3, #4]
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 1151              		.loc 1 907 0
 1152 05de 4FF46053 		mov	r3, #14336
 1153 05e2 C4F20203 		movt	r3, 16386
 1154 05e6 9B68     		ldr	r3, [r3, #8]
 1155 05e8 03F4E053 		and	r3, r3, #7168
 1156 05ec BB61     		str	r3, [r7, #24]
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 1157              		.loc 1 908 0
 1158 05ee BB69     		ldr	r3, [r7, #24]
 1159 05f0 4FEA9323 		lsr	r3, r3, #10
 1160 05f4 BB61     		str	r3, [r7, #24]
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1161              		.loc 1 909 0
 1162 05f6 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1163 05fa C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1164 05fe BA69     		ldr	r2, [r7, #24]
 1165 0600 9B18     		adds	r3, r3, r2
 1166 0602 1B78     		ldrb	r3, [r3, #0]
 1167 0604 DBB2     		uxtb	r3, r3
 1168 0606 7B61     		str	r3, [r7, #20]
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1169              		.loc 1 911 0
 1170 0608 7B68     		ldr	r3, [r7, #4]
 1171 060a 5A68     		ldr	r2, [r3, #4]
 1172 060c 7B69     		ldr	r3, [r7, #20]
 1173 060e 22FA03F2 		lsr	r2, r2, r3
 1174 0612 7B68     		ldr	r3, [r7, #4]
 1175 0614 9A60     		str	r2, [r3, #8]
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 1176              		.loc 1 914 0
 1177 0616 4FF46053 		mov	r3, #14336
 1178 061a C4F20203 		movt	r3, 16386
 1179 061e 9B68     		ldr	r3, [r3, #8]
 1180 0620 03F46043 		and	r3, r3, #57344
 1181 0624 BB61     		str	r3, [r7, #24]
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 1182              		.loc 1 915 0
 1183 0626 BB69     		ldr	r3, [r7, #24]
 1184 0628 4FEA5333 		lsr	r3, r3, #13
 1185 062c BB61     		str	r3, [r7, #24]
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1186              		.loc 1 916 0
 1187 062e 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1188 0632 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1189 0636 BA69     		ldr	r2, [r7, #24]
 1190 0638 9B18     		adds	r3, r3, r2
 1191 063a 1B78     		ldrb	r3, [r3, #0]
 1192 063c DBB2     		uxtb	r3, r3
 1193 063e 7B61     		str	r3, [r7, #20]
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1194              		.loc 1 918 0
 1195 0640 7B68     		ldr	r3, [r7, #4]
 1196 0642 5A68     		ldr	r2, [r3, #4]
 1197 0644 7B69     		ldr	r3, [r7, #20]
 1198 0646 22FA03F2 		lsr	r2, r2, r3
 1199 064a 7B68     		ldr	r3, [r7, #4]
 1200 064c DA60     		str	r2, [r3, #12]
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1201              		.loc 1 919 0
 1202 064e 07F12407 		add	r7, r7, #36
 1203 0652 BD46     		mov	sp, r7
 1204 0654 80BC     		pop	{r7}
 1205 0656 7047     		bx	lr
 1206              		.cfi_endproc
 1207              	.LFE129:
 1209              		.align	2
 1210              		.global	RCC_RTCCLKConfig
 1211              		.thumb
 1212              		.thumb_func
 1214              	RCC_RTCCLKConfig:
 1215              	.LFB130:
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Peripheral clocks configuration functions
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1216              		.loc 1 982 0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 16
 1219              		@ frame_needed = 1, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 1221 0658 80B4     		push	{r7}
 1222              	.LCFI58:
 1223              		.cfi_def_cfa_offset 4
 1224              		.cfi_offset 7, -4
 1225 065a 85B0     		sub	sp, sp, #20
 1226              	.LCFI59:
 1227              		.cfi_def_cfa_offset 24
 1228 065c 00AF     		add	r7, sp, #0
 1229              	.LCFI60:
 1230              		.cfi_def_cfa_register 7
 1231 065e 7860     		str	r0, [r7, #4]
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1232              		.loc 1 983 0
 1233 0660 4FF00003 		mov	r3, #0
 1234 0664 FB60     		str	r3, [r7, #12]
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1235              		.loc 1 988 0
 1236 0666 7B68     		ldr	r3, [r7, #4]
 1237 0668 03F44073 		and	r3, r3, #768
 1238 066c B3F5407F 		cmp	r3, #768
 1239 0670 17D1     		bne	.L39
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 1240              		.loc 1 990 0
 1241 0672 4FF46053 		mov	r3, #14336
 1242 0676 C4F20203 		movt	r3, 16386
 1243 067a 9B68     		ldr	r3, [r3, #8]
 1244 067c FB60     		str	r3, [r7, #12]
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 1245              		.loc 1 993 0
 1246 067e FB68     		ldr	r3, [r7, #12]
 1247 0680 23F4F813 		bic	r3, r3, #2031616
 1248 0684 FB60     		str	r3, [r7, #12]
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 1249              		.loc 1 996 0
 1250 0686 7B68     		ldr	r3, [r7, #4]
 1251 0688 23F07043 		bic	r3, r3, #-268435456
 1252 068c 23F44073 		bic	r3, r3, #768
 1253 0690 FA68     		ldr	r2, [r7, #12]
 1254 0692 1343     		orrs	r3, r3, r2
 1255 0694 FB60     		str	r3, [r7, #12]
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 1256              		.loc 1 999 0
 1257 0696 4FF46053 		mov	r3, #14336
 1258 069a C4F20203 		movt	r3, 16386
 1259 069e FA68     		ldr	r2, [r7, #12]
 1260 06a0 9A60     		str	r2, [r3, #8]
 1261              	.L39:
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1262              		.loc 1 1003 0
 1263 06a2 4FF46053 		mov	r3, #14336
 1264 06a6 C4F20203 		movt	r3, 16386
 1265 06aa 4FF46052 		mov	r2, #14336
 1266 06ae C4F20202 		movt	r2, 16386
 1267 06b2 116F     		ldr	r1, [r2, #112]
 1268 06b4 7A68     		ldr	r2, [r7, #4]
 1269 06b6 4FEA0252 		lsl	r2, r2, #20
 1270 06ba 4FEA1252 		lsr	r2, r2, #20
 1271 06be 0A43     		orrs	r2, r2, r1
 1272 06c0 1A67     		str	r2, [r3, #112]
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1273              		.loc 1 1004 0
 1274 06c2 07F11407 		add	r7, r7, #20
 1275 06c6 BD46     		mov	sp, r7
 1276 06c8 80BC     		pop	{r7}
 1277 06ca 7047     		bx	lr
 1278              		.cfi_endproc
 1279              	.LFE130:
 1281              		.align	2
 1282              		.global	RCC_RTCCLKCmd
 1283              		.thumb
 1284              		.thumb_func
 1286              	RCC_RTCCLKCmd:
 1287              	.LFB131:
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1288              		.loc 1 1014 0
 1289              		.cfi_startproc
 1290              		@ args = 0, pretend = 0, frame = 8
 1291              		@ frame_needed = 1, uses_anonymous_args = 0
 1292              		@ link register save eliminated.
 1293 06cc 80B4     		push	{r7}
 1294              	.LCFI61:
 1295              		.cfi_def_cfa_offset 4
 1296              		.cfi_offset 7, -4
 1297 06ce 83B0     		sub	sp, sp, #12
 1298              	.LCFI62:
 1299              		.cfi_def_cfa_offset 16
 1300 06d0 00AF     		add	r7, sp, #0
 1301              	.LCFI63:
 1302              		.cfi_def_cfa_register 7
 1303 06d2 0346     		mov	r3, r0
 1304 06d4 FB71     		strb	r3, [r7, #7]
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1305              		.loc 1 1018 0
 1306 06d6 40F63C63 		movw	r3, #3644
 1307 06da C4F24723 		movt	r3, 16967
 1308 06de FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1309 06e0 1A60     		str	r2, [r3, #0]
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1310              		.loc 1 1019 0
 1311 06e2 07F10C07 		add	r7, r7, #12
 1312 06e6 BD46     		mov	sp, r7
 1313 06e8 80BC     		pop	{r7}
 1314 06ea 7047     		bx	lr
 1315              		.cfi_endproc
 1316              	.LFE131:
 1318              		.align	2
 1319              		.global	RCC_BackupResetCmd
 1320              		.thumb
 1321              		.thumb_func
 1323              	RCC_BackupResetCmd:
 1324              	.LFB132:
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1325              		.loc 1 1031 0
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 8
 1328              		@ frame_needed = 1, uses_anonymous_args = 0
 1329              		@ link register save eliminated.
 1330 06ec 80B4     		push	{r7}
 1331              	.LCFI64:
 1332              		.cfi_def_cfa_offset 4
 1333              		.cfi_offset 7, -4
 1334 06ee 83B0     		sub	sp, sp, #12
 1335              	.LCFI65:
 1336              		.cfi_def_cfa_offset 16
 1337 06f0 00AF     		add	r7, sp, #0
 1338              	.LCFI66:
 1339              		.cfi_def_cfa_register 7
 1340 06f2 0346     		mov	r3, r0
 1341 06f4 FB71     		strb	r3, [r7, #7]
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1342              		.loc 1 1034 0
 1343 06f6 4FF46463 		mov	r3, #3648
 1344 06fa C4F24723 		movt	r3, 16967
 1345 06fe FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1346 0700 1A60     		str	r2, [r3, #0]
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1347              		.loc 1 1035 0
 1348 0702 07F10C07 		add	r7, r7, #12
 1349 0706 BD46     		mov	sp, r7
 1350 0708 80BC     		pop	{r7}
 1351 070a 7047     		bx	lr
 1352              		.cfi_endproc
 1353              	.LFE132:
 1355              		.align	2
 1356              		.global	RCC_I2SCLKConfig
 1357              		.thumb
 1358              		.thumb_func
 1360              	RCC_I2SCLKConfig:
 1361              	.LFB133:
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1362              		.loc 1 1051 0
 1363              		.cfi_startproc
 1364              		@ args = 0, pretend = 0, frame = 8
 1365              		@ frame_needed = 1, uses_anonymous_args = 0
 1366              		@ link register save eliminated.
 1367 070c 80B4     		push	{r7}
 1368              	.LCFI67:
 1369              		.cfi_def_cfa_offset 4
 1370              		.cfi_offset 7, -4
 1371 070e 83B0     		sub	sp, sp, #12
 1372              	.LCFI68:
 1373              		.cfi_def_cfa_offset 16
 1374 0710 00AF     		add	r7, sp, #0
 1375              	.LCFI69:
 1376              		.cfi_def_cfa_register 7
 1377 0712 7860     		str	r0, [r7, #4]
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 1378              		.loc 1 1055 0
 1379 0714 4FF4AE73 		mov	r3, #348
 1380 0718 C4F24723 		movt	r3, 16967
 1381 071c 7A68     		ldr	r2, [r7, #4]
 1382 071e 1A60     		str	r2, [r3, #0]
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1383              		.loc 1 1056 0
 1384 0720 07F10C07 		add	r7, r7, #12
 1385 0724 BD46     		mov	sp, r7
 1386 0726 80BC     		pop	{r7}
 1387 0728 7047     		bx	lr
 1388              		.cfi_endproc
 1389              	.LFE133:
 1391 072a 00BF     		.align	2
 1392              		.global	RCC_AHB1PeriphClockCmd
 1393              		.thumb
 1394              		.thumb_func
 1396              	RCC_AHB1PeriphClockCmd:
 1397              	.LFB134:
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1398              		.loc 1 1089 0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 8
 1401              		@ frame_needed = 1, uses_anonymous_args = 0
 1402              		@ link register save eliminated.
 1403 072c 80B4     		push	{r7}
 1404              	.LCFI70:
 1405              		.cfi_def_cfa_offset 4
 1406              		.cfi_offset 7, -4
 1407 072e 83B0     		sub	sp, sp, #12
 1408              	.LCFI71:
 1409              		.cfi_def_cfa_offset 16
 1410 0730 00AF     		add	r7, sp, #0
 1411              	.LCFI72:
 1412              		.cfi_def_cfa_register 7
 1413 0732 7860     		str	r0, [r7, #4]
 1414 0734 0B46     		mov	r3, r1
 1415 0736 FB70     		strb	r3, [r7, #3]
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1416              		.loc 1 1094 0
 1417 0738 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1418 073a 002B     		cmp	r3, #0
 1419 073c 0CD0     		beq	.L44
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1420              		.loc 1 1096 0
 1421 073e 4FF46053 		mov	r3, #14336
 1422 0742 C4F20203 		movt	r3, 16386
 1423 0746 4FF46052 		mov	r2, #14336
 1424 074a C4F20202 		movt	r2, 16386
 1425 074e 116B     		ldr	r1, [r2, #48]
 1426 0750 7A68     		ldr	r2, [r7, #4]
 1427 0752 0A43     		orrs	r2, r2, r1
 1428 0754 1A63     		str	r2, [r3, #48]
 1429 0756 0DE0     		b	.L43
 1430              	.L44:
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1431              		.loc 1 1100 0
 1432 0758 4FF46053 		mov	r3, #14336
 1433 075c C4F20203 		movt	r3, 16386
 1434 0760 4FF46052 		mov	r2, #14336
 1435 0764 C4F20202 		movt	r2, 16386
 1436 0768 116B     		ldr	r1, [r2, #48]
 1437 076a 7A68     		ldr	r2, [r7, #4]
 1438 076c 6FEA0202 		mvn	r2, r2
 1439 0770 0A40     		ands	r2, r2, r1
 1440 0772 1A63     		str	r2, [r3, #48]
 1441              	.L43:
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1442              		.loc 1 1102 0
 1443 0774 07F10C07 		add	r7, r7, #12
 1444 0778 BD46     		mov	sp, r7
 1445 077a 80BC     		pop	{r7}
 1446 077c 7047     		bx	lr
 1447              		.cfi_endproc
 1448              	.LFE134:
 1450 077e 00BF     		.align	2
 1451              		.global	RCC_AHB2PeriphClockCmd
 1452              		.thumb
 1453              		.thumb_func
 1455              	RCC_AHB2PeriphClockCmd:
 1456              	.LFB135:
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1457              		.loc 1 1121 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 8
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461              		@ link register save eliminated.
 1462 0780 80B4     		push	{r7}
 1463              	.LCFI73:
 1464              		.cfi_def_cfa_offset 4
 1465              		.cfi_offset 7, -4
 1466 0782 83B0     		sub	sp, sp, #12
 1467              	.LCFI74:
 1468              		.cfi_def_cfa_offset 16
 1469 0784 00AF     		add	r7, sp, #0
 1470              	.LCFI75:
 1471              		.cfi_def_cfa_register 7
 1472 0786 7860     		str	r0, [r7, #4]
 1473 0788 0B46     		mov	r3, r1
 1474 078a FB70     		strb	r3, [r7, #3]
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1475              		.loc 1 1126 0
 1476 078c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1477 078e 002B     		cmp	r3, #0
 1478 0790 0CD0     		beq	.L47
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1479              		.loc 1 1128 0
 1480 0792 4FF46053 		mov	r3, #14336
 1481 0796 C4F20203 		movt	r3, 16386
 1482 079a 4FF46052 		mov	r2, #14336
 1483 079e C4F20202 		movt	r2, 16386
 1484 07a2 516B     		ldr	r1, [r2, #52]
 1485 07a4 7A68     		ldr	r2, [r7, #4]
 1486 07a6 0A43     		orrs	r2, r2, r1
 1487 07a8 5A63     		str	r2, [r3, #52]
 1488 07aa 0DE0     		b	.L46
 1489              	.L47:
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1490              		.loc 1 1132 0
 1491 07ac 4FF46053 		mov	r3, #14336
 1492 07b0 C4F20203 		movt	r3, 16386
 1493 07b4 4FF46052 		mov	r2, #14336
 1494 07b8 C4F20202 		movt	r2, 16386
 1495 07bc 516B     		ldr	r1, [r2, #52]
 1496 07be 7A68     		ldr	r2, [r7, #4]
 1497 07c0 6FEA0202 		mvn	r2, r2
 1498 07c4 0A40     		ands	r2, r2, r1
 1499 07c6 5A63     		str	r2, [r3, #52]
 1500              	.L46:
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1501              		.loc 1 1134 0
 1502 07c8 07F10C07 		add	r7, r7, #12
 1503 07cc BD46     		mov	sp, r7
 1504 07ce 80BC     		pop	{r7}
 1505 07d0 7047     		bx	lr
 1506              		.cfi_endproc
 1507              	.LFE135:
 1509 07d2 00BF     		.align	2
 1510              		.global	RCC_AHB3PeriphClockCmd
 1511              		.thumb
 1512              		.thumb_func
 1514              	RCC_AHB3PeriphClockCmd:
 1515              	.LFB136:
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1516              		.loc 1 1148 0
 1517              		.cfi_startproc
 1518              		@ args = 0, pretend = 0, frame = 8
 1519              		@ frame_needed = 1, uses_anonymous_args = 0
 1520              		@ link register save eliminated.
 1521 07d4 80B4     		push	{r7}
 1522              	.LCFI76:
 1523              		.cfi_def_cfa_offset 4
 1524              		.cfi_offset 7, -4
 1525 07d6 83B0     		sub	sp, sp, #12
 1526              	.LCFI77:
 1527              		.cfi_def_cfa_offset 16
 1528 07d8 00AF     		add	r7, sp, #0
 1529              	.LCFI78:
 1530              		.cfi_def_cfa_register 7
 1531 07da 7860     		str	r0, [r7, #4]
 1532 07dc 0B46     		mov	r3, r1
 1533 07de FB70     		strb	r3, [r7, #3]
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1534              		.loc 1 1153 0
 1535 07e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1536 07e2 002B     		cmp	r3, #0
 1537 07e4 0CD0     		beq	.L50
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1538              		.loc 1 1155 0
 1539 07e6 4FF46053 		mov	r3, #14336
 1540 07ea C4F20203 		movt	r3, 16386
 1541 07ee 4FF46052 		mov	r2, #14336
 1542 07f2 C4F20202 		movt	r2, 16386
 1543 07f6 916B     		ldr	r1, [r2, #56]
 1544 07f8 7A68     		ldr	r2, [r7, #4]
 1545 07fa 0A43     		orrs	r2, r2, r1
 1546 07fc 9A63     		str	r2, [r3, #56]
 1547 07fe 0DE0     		b	.L49
 1548              	.L50:
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1549              		.loc 1 1159 0
 1550 0800 4FF46053 		mov	r3, #14336
 1551 0804 C4F20203 		movt	r3, 16386
 1552 0808 4FF46052 		mov	r2, #14336
 1553 080c C4F20202 		movt	r2, 16386
 1554 0810 916B     		ldr	r1, [r2, #56]
 1555 0812 7A68     		ldr	r2, [r7, #4]
 1556 0814 6FEA0202 		mvn	r2, r2
 1557 0818 0A40     		ands	r2, r2, r1
 1558 081a 9A63     		str	r2, [r3, #56]
 1559              	.L49:
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1560              		.loc 1 1161 0
 1561 081c 07F10C07 		add	r7, r7, #12
 1562 0820 BD46     		mov	sp, r7
 1563 0822 80BC     		pop	{r7}
 1564 0824 7047     		bx	lr
 1565              		.cfi_endproc
 1566              	.LFE136:
 1568 0826 00BF     		.align	2
 1569              		.global	RCC_APB1PeriphClockCmd
 1570              		.thumb
 1571              		.thumb_func
 1573              	RCC_APB1PeriphClockCmd:
 1574              	.LFB137:
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1575              		.loc 1 1198 0
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 8
 1578              		@ frame_needed = 1, uses_anonymous_args = 0
 1579              		@ link register save eliminated.
 1580 0828 80B4     		push	{r7}
 1581              	.LCFI79:
 1582              		.cfi_def_cfa_offset 4
 1583              		.cfi_offset 7, -4
 1584 082a 83B0     		sub	sp, sp, #12
 1585              	.LCFI80:
 1586              		.cfi_def_cfa_offset 16
 1587 082c 00AF     		add	r7, sp, #0
 1588              	.LCFI81:
 1589              		.cfi_def_cfa_register 7
 1590 082e 7860     		str	r0, [r7, #4]
 1591 0830 0B46     		mov	r3, r1
 1592 0832 FB70     		strb	r3, [r7, #3]
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1593              		.loc 1 1203 0
 1594 0834 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1595 0836 002B     		cmp	r3, #0
 1596 0838 0CD0     		beq	.L53
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1597              		.loc 1 1205 0
 1598 083a 4FF46053 		mov	r3, #14336
 1599 083e C4F20203 		movt	r3, 16386
 1600 0842 4FF46052 		mov	r2, #14336
 1601 0846 C4F20202 		movt	r2, 16386
 1602 084a 116C     		ldr	r1, [r2, #64]
 1603 084c 7A68     		ldr	r2, [r7, #4]
 1604 084e 0A43     		orrs	r2, r2, r1
 1605 0850 1A64     		str	r2, [r3, #64]
 1606 0852 0DE0     		b	.L52
 1607              	.L53:
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1608              		.loc 1 1209 0
 1609 0854 4FF46053 		mov	r3, #14336
 1610 0858 C4F20203 		movt	r3, 16386
 1611 085c 4FF46052 		mov	r2, #14336
 1612 0860 C4F20202 		movt	r2, 16386
 1613 0864 116C     		ldr	r1, [r2, #64]
 1614 0866 7A68     		ldr	r2, [r7, #4]
 1615 0868 6FEA0202 		mvn	r2, r2
 1616 086c 0A40     		ands	r2, r2, r1
 1617 086e 1A64     		str	r2, [r3, #64]
 1618              	.L52:
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1619              		.loc 1 1211 0
 1620 0870 07F10C07 		add	r7, r7, #12
 1621 0874 BD46     		mov	sp, r7
 1622 0876 80BC     		pop	{r7}
 1623 0878 7047     		bx	lr
 1624              		.cfi_endproc
 1625              	.LFE137:
 1627 087a 00BF     		.align	2
 1628              		.global	RCC_APB2PeriphClockCmd
 1629              		.thumb
 1630              		.thumb_func
 1632              	RCC_APB2PeriphClockCmd:
 1633              	.LFB138:
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1634              		.loc 1 1238 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 8
 1637              		@ frame_needed = 1, uses_anonymous_args = 0
 1638              		@ link register save eliminated.
 1639 087c 80B4     		push	{r7}
 1640              	.LCFI82:
 1641              		.cfi_def_cfa_offset 4
 1642              		.cfi_offset 7, -4
 1643 087e 83B0     		sub	sp, sp, #12
 1644              	.LCFI83:
 1645              		.cfi_def_cfa_offset 16
 1646 0880 00AF     		add	r7, sp, #0
 1647              	.LCFI84:
 1648              		.cfi_def_cfa_register 7
 1649 0882 7860     		str	r0, [r7, #4]
 1650 0884 0B46     		mov	r3, r1
 1651 0886 FB70     		strb	r3, [r7, #3]
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1652              		.loc 1 1243 0
 1653 0888 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1654 088a 002B     		cmp	r3, #0
 1655 088c 0CD0     		beq	.L56
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1656              		.loc 1 1245 0
 1657 088e 4FF46053 		mov	r3, #14336
 1658 0892 C4F20203 		movt	r3, 16386
 1659 0896 4FF46052 		mov	r2, #14336
 1660 089a C4F20202 		movt	r2, 16386
 1661 089e 516C     		ldr	r1, [r2, #68]
 1662 08a0 7A68     		ldr	r2, [r7, #4]
 1663 08a2 0A43     		orrs	r2, r2, r1
 1664 08a4 5A64     		str	r2, [r3, #68]
 1665 08a6 0DE0     		b	.L55
 1666              	.L56:
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1667              		.loc 1 1249 0
 1668 08a8 4FF46053 		mov	r3, #14336
 1669 08ac C4F20203 		movt	r3, 16386
 1670 08b0 4FF46052 		mov	r2, #14336
 1671 08b4 C4F20202 		movt	r2, 16386
 1672 08b8 516C     		ldr	r1, [r2, #68]
 1673 08ba 7A68     		ldr	r2, [r7, #4]
 1674 08bc 6FEA0202 		mvn	r2, r2
 1675 08c0 0A40     		ands	r2, r2, r1
 1676 08c2 5A64     		str	r2, [r3, #68]
 1677              	.L55:
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1678              		.loc 1 1251 0
 1679 08c4 07F10C07 		add	r7, r7, #12
 1680 08c8 BD46     		mov	sp, r7
 1681 08ca 80BC     		pop	{r7}
 1682 08cc 7047     		bx	lr
 1683              		.cfi_endproc
 1684              	.LFE138:
 1686 08ce 00BF     		.align	2
 1687              		.global	RCC_AHB1PeriphResetCmd
 1688              		.thumb
 1689              		.thumb_func
 1691              	RCC_AHB1PeriphResetCmd:
 1692              	.LFB139:
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1693              		.loc 1 1277 0
 1694              		.cfi_startproc
 1695              		@ args = 0, pretend = 0, frame = 8
 1696              		@ frame_needed = 1, uses_anonymous_args = 0
 1697              		@ link register save eliminated.
 1698 08d0 80B4     		push	{r7}
 1699              	.LCFI85:
 1700              		.cfi_def_cfa_offset 4
 1701              		.cfi_offset 7, -4
 1702 08d2 83B0     		sub	sp, sp, #12
 1703              	.LCFI86:
 1704              		.cfi_def_cfa_offset 16
 1705 08d4 00AF     		add	r7, sp, #0
 1706              	.LCFI87:
 1707              		.cfi_def_cfa_register 7
 1708 08d6 7860     		str	r0, [r7, #4]
 1709 08d8 0B46     		mov	r3, r1
 1710 08da FB70     		strb	r3, [r7, #3]
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1711              		.loc 1 1282 0
 1712 08dc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1713 08de 002B     		cmp	r3, #0
 1714 08e0 0CD0     		beq	.L59
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1715              		.loc 1 1284 0
 1716 08e2 4FF46053 		mov	r3, #14336
 1717 08e6 C4F20203 		movt	r3, 16386
 1718 08ea 4FF46052 		mov	r2, #14336
 1719 08ee C4F20202 		movt	r2, 16386
 1720 08f2 1169     		ldr	r1, [r2, #16]
 1721 08f4 7A68     		ldr	r2, [r7, #4]
 1722 08f6 0A43     		orrs	r2, r2, r1
 1723 08f8 1A61     		str	r2, [r3, #16]
 1724 08fa 0DE0     		b	.L58
 1725              	.L59:
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1726              		.loc 1 1288 0
 1727 08fc 4FF46053 		mov	r3, #14336
 1728 0900 C4F20203 		movt	r3, 16386
 1729 0904 4FF46052 		mov	r2, #14336
 1730 0908 C4F20202 		movt	r2, 16386
 1731 090c 1169     		ldr	r1, [r2, #16]
 1732 090e 7A68     		ldr	r2, [r7, #4]
 1733 0910 6FEA0202 		mvn	r2, r2
 1734 0914 0A40     		ands	r2, r2, r1
 1735 0916 1A61     		str	r2, [r3, #16]
 1736              	.L58:
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1737              		.loc 1 1290 0
 1738 0918 07F10C07 		add	r7, r7, #12
 1739 091c BD46     		mov	sp, r7
 1740 091e 80BC     		pop	{r7}
 1741 0920 7047     		bx	lr
 1742              		.cfi_endproc
 1743              	.LFE139:
 1745 0922 00BF     		.align	2
 1746              		.global	RCC_AHB2PeriphResetCmd
 1747              		.thumb
 1748              		.thumb_func
 1750              	RCC_AHB2PeriphResetCmd:
 1751              	.LFB140:
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1752              		.loc 1 1306 0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 8
 1755              		@ frame_needed = 1, uses_anonymous_args = 0
 1756              		@ link register save eliminated.
 1757 0924 80B4     		push	{r7}
 1758              	.LCFI88:
 1759              		.cfi_def_cfa_offset 4
 1760              		.cfi_offset 7, -4
 1761 0926 83B0     		sub	sp, sp, #12
 1762              	.LCFI89:
 1763              		.cfi_def_cfa_offset 16
 1764 0928 00AF     		add	r7, sp, #0
 1765              	.LCFI90:
 1766              		.cfi_def_cfa_register 7
 1767 092a 7860     		str	r0, [r7, #4]
 1768 092c 0B46     		mov	r3, r1
 1769 092e FB70     		strb	r3, [r7, #3]
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1770              		.loc 1 1311 0
 1771 0930 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1772 0932 002B     		cmp	r3, #0
 1773 0934 0CD0     		beq	.L62
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1774              		.loc 1 1313 0
 1775 0936 4FF46053 		mov	r3, #14336
 1776 093a C4F20203 		movt	r3, 16386
 1777 093e 4FF46052 		mov	r2, #14336
 1778 0942 C4F20202 		movt	r2, 16386
 1779 0946 5169     		ldr	r1, [r2, #20]
 1780 0948 7A68     		ldr	r2, [r7, #4]
 1781 094a 0A43     		orrs	r2, r2, r1
 1782 094c 5A61     		str	r2, [r3, #20]
 1783 094e 0DE0     		b	.L61
 1784              	.L62:
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1785              		.loc 1 1317 0
 1786 0950 4FF46053 		mov	r3, #14336
 1787 0954 C4F20203 		movt	r3, 16386
 1788 0958 4FF46052 		mov	r2, #14336
 1789 095c C4F20202 		movt	r2, 16386
 1790 0960 5169     		ldr	r1, [r2, #20]
 1791 0962 7A68     		ldr	r2, [r7, #4]
 1792 0964 6FEA0202 		mvn	r2, r2
 1793 0968 0A40     		ands	r2, r2, r1
 1794 096a 5A61     		str	r2, [r3, #20]
 1795              	.L61:
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1796              		.loc 1 1319 0
 1797 096c 07F10C07 		add	r7, r7, #12
 1798 0970 BD46     		mov	sp, r7
 1799 0972 80BC     		pop	{r7}
 1800 0974 7047     		bx	lr
 1801              		.cfi_endproc
 1802              	.LFE140:
 1804 0976 00BF     		.align	2
 1805              		.global	RCC_AHB3PeriphResetCmd
 1806              		.thumb
 1807              		.thumb_func
 1809              	RCC_AHB3PeriphResetCmd:
 1810              	.LFB141:
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1811              		.loc 1 1330 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 8
 1814              		@ frame_needed = 1, uses_anonymous_args = 0
 1815              		@ link register save eliminated.
 1816 0978 80B4     		push	{r7}
 1817              	.LCFI91:
 1818              		.cfi_def_cfa_offset 4
 1819              		.cfi_offset 7, -4
 1820 097a 83B0     		sub	sp, sp, #12
 1821              	.LCFI92:
 1822              		.cfi_def_cfa_offset 16
 1823 097c 00AF     		add	r7, sp, #0
 1824              	.LCFI93:
 1825              		.cfi_def_cfa_register 7
 1826 097e 7860     		str	r0, [r7, #4]
 1827 0980 0B46     		mov	r3, r1
 1828 0982 FB70     		strb	r3, [r7, #3]
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1829              		.loc 1 1335 0
 1830 0984 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1831 0986 002B     		cmp	r3, #0
 1832 0988 0CD0     		beq	.L65
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1833              		.loc 1 1337 0
 1834 098a 4FF46053 		mov	r3, #14336
 1835 098e C4F20203 		movt	r3, 16386
 1836 0992 4FF46052 		mov	r2, #14336
 1837 0996 C4F20202 		movt	r2, 16386
 1838 099a 9169     		ldr	r1, [r2, #24]
 1839 099c 7A68     		ldr	r2, [r7, #4]
 1840 099e 0A43     		orrs	r2, r2, r1
 1841 09a0 9A61     		str	r2, [r3, #24]
 1842 09a2 0DE0     		b	.L64
 1843              	.L65:
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1844              		.loc 1 1341 0
 1845 09a4 4FF46053 		mov	r3, #14336
 1846 09a8 C4F20203 		movt	r3, 16386
 1847 09ac 4FF46052 		mov	r2, #14336
 1848 09b0 C4F20202 		movt	r2, 16386
 1849 09b4 9169     		ldr	r1, [r2, #24]
 1850 09b6 7A68     		ldr	r2, [r7, #4]
 1851 09b8 6FEA0202 		mvn	r2, r2
 1852 09bc 0A40     		ands	r2, r2, r1
 1853 09be 9A61     		str	r2, [r3, #24]
 1854              	.L64:
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1855              		.loc 1 1343 0
 1856 09c0 07F10C07 		add	r7, r7, #12
 1857 09c4 BD46     		mov	sp, r7
 1858 09c6 80BC     		pop	{r7}
 1859 09c8 7047     		bx	lr
 1860              		.cfi_endproc
 1861              	.LFE141:
 1863 09ca 00BF     		.align	2
 1864              		.global	RCC_APB1PeriphResetCmd
 1865              		.thumb
 1866              		.thumb_func
 1868              	RCC_APB1PeriphResetCmd:
 1869              	.LFB142:
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1870              		.loc 1 1377 0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 8
 1873              		@ frame_needed = 1, uses_anonymous_args = 0
 1874              		@ link register save eliminated.
 1875 09cc 80B4     		push	{r7}
 1876              	.LCFI94:
 1877              		.cfi_def_cfa_offset 4
 1878              		.cfi_offset 7, -4
 1879 09ce 83B0     		sub	sp, sp, #12
 1880              	.LCFI95:
 1881              		.cfi_def_cfa_offset 16
 1882 09d0 00AF     		add	r7, sp, #0
 1883              	.LCFI96:
 1884              		.cfi_def_cfa_register 7
 1885 09d2 7860     		str	r0, [r7, #4]
 1886 09d4 0B46     		mov	r3, r1
 1887 09d6 FB70     		strb	r3, [r7, #3]
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1888              		.loc 1 1381 0
 1889 09d8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1890 09da 002B     		cmp	r3, #0
 1891 09dc 0CD0     		beq	.L68
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1892              		.loc 1 1383 0
 1893 09de 4FF46053 		mov	r3, #14336
 1894 09e2 C4F20203 		movt	r3, 16386
 1895 09e6 4FF46052 		mov	r2, #14336
 1896 09ea C4F20202 		movt	r2, 16386
 1897 09ee 116A     		ldr	r1, [r2, #32]
 1898 09f0 7A68     		ldr	r2, [r7, #4]
 1899 09f2 0A43     		orrs	r2, r2, r1
 1900 09f4 1A62     		str	r2, [r3, #32]
 1901 09f6 0DE0     		b	.L67
 1902              	.L68:
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1903              		.loc 1 1387 0
 1904 09f8 4FF46053 		mov	r3, #14336
 1905 09fc C4F20203 		movt	r3, 16386
 1906 0a00 4FF46052 		mov	r2, #14336
 1907 0a04 C4F20202 		movt	r2, 16386
 1908 0a08 116A     		ldr	r1, [r2, #32]
 1909 0a0a 7A68     		ldr	r2, [r7, #4]
 1910 0a0c 6FEA0202 		mvn	r2, r2
 1911 0a10 0A40     		ands	r2, r2, r1
 1912 0a12 1A62     		str	r2, [r3, #32]
 1913              	.L67:
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1914              		.loc 1 1389 0
 1915 0a14 07F10C07 		add	r7, r7, #12
 1916 0a18 BD46     		mov	sp, r7
 1917 0a1a 80BC     		pop	{r7}
 1918 0a1c 7047     		bx	lr
 1919              		.cfi_endproc
 1920              	.LFE142:
 1922 0a1e 00BF     		.align	2
 1923              		.global	RCC_APB2PeriphResetCmd
 1924              		.thumb
 1925              		.thumb_func
 1927              	RCC_APB2PeriphResetCmd:
 1928              	.LFB143:
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1929              		.loc 1 1413 0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 8
 1932              		@ frame_needed = 1, uses_anonymous_args = 0
 1933              		@ link register save eliminated.
 1934 0a20 80B4     		push	{r7}
 1935              	.LCFI97:
 1936              		.cfi_def_cfa_offset 4
 1937              		.cfi_offset 7, -4
 1938 0a22 83B0     		sub	sp, sp, #12
 1939              	.LCFI98:
 1940              		.cfi_def_cfa_offset 16
 1941 0a24 00AF     		add	r7, sp, #0
 1942              	.LCFI99:
 1943              		.cfi_def_cfa_register 7
 1944 0a26 7860     		str	r0, [r7, #4]
 1945 0a28 0B46     		mov	r3, r1
 1946 0a2a FB70     		strb	r3, [r7, #3]
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1947              		.loc 1 1417 0
 1948 0a2c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1949 0a2e 002B     		cmp	r3, #0
 1950 0a30 0CD0     		beq	.L71
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1951              		.loc 1 1419 0
 1952 0a32 4FF46053 		mov	r3, #14336
 1953 0a36 C4F20203 		movt	r3, 16386
 1954 0a3a 4FF46052 		mov	r2, #14336
 1955 0a3e C4F20202 		movt	r2, 16386
 1956 0a42 516A     		ldr	r1, [r2, #36]
 1957 0a44 7A68     		ldr	r2, [r7, #4]
 1958 0a46 0A43     		orrs	r2, r2, r1
 1959 0a48 5A62     		str	r2, [r3, #36]
 1960 0a4a 0DE0     		b	.L70
 1961              	.L71:
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1962              		.loc 1 1423 0
 1963 0a4c 4FF46053 		mov	r3, #14336
 1964 0a50 C4F20203 		movt	r3, 16386
 1965 0a54 4FF46052 		mov	r2, #14336
 1966 0a58 C4F20202 		movt	r2, 16386
 1967 0a5c 516A     		ldr	r1, [r2, #36]
 1968 0a5e 7A68     		ldr	r2, [r7, #4]
 1969 0a60 6FEA0202 		mvn	r2, r2
 1970 0a64 0A40     		ands	r2, r2, r1
 1971 0a66 5A62     		str	r2, [r3, #36]
 1972              	.L70:
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1973              		.loc 1 1425 0
 1974 0a68 07F10C07 		add	r7, r7, #12
 1975 0a6c BD46     		mov	sp, r7
 1976 0a6e 80BC     		pop	{r7}
 1977 0a70 7047     		bx	lr
 1978              		.cfi_endproc
 1979              	.LFE143:
 1981 0a72 00BF     		.align	2
 1982              		.global	RCC_AHB1PeriphClockLPModeCmd
 1983              		.thumb
 1984              		.thumb_func
 1986              	RCC_AHB1PeriphClockLPModeCmd:
 1987              	.LFB144:
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1988              		.loc 1 1459 0
 1989              		.cfi_startproc
 1990              		@ args = 0, pretend = 0, frame = 8
 1991              		@ frame_needed = 1, uses_anonymous_args = 0
 1992              		@ link register save eliminated.
 1993 0a74 80B4     		push	{r7}
 1994              	.LCFI100:
 1995              		.cfi_def_cfa_offset 4
 1996              		.cfi_offset 7, -4
 1997 0a76 83B0     		sub	sp, sp, #12
 1998              	.LCFI101:
 1999              		.cfi_def_cfa_offset 16
 2000 0a78 00AF     		add	r7, sp, #0
 2001              	.LCFI102:
 2002              		.cfi_def_cfa_register 7
 2003 0a7a 7860     		str	r0, [r7, #4]
 2004 0a7c 0B46     		mov	r3, r1
 2005 0a7e FB70     		strb	r3, [r7, #3]
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2006              		.loc 1 1463 0
 2007 0a80 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2008 0a82 002B     		cmp	r3, #0
 2009 0a84 0CD0     		beq	.L74
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 2010              		.loc 1 1465 0
 2011 0a86 4FF46053 		mov	r3, #14336
 2012 0a8a C4F20203 		movt	r3, 16386
 2013 0a8e 4FF46052 		mov	r2, #14336
 2014 0a92 C4F20202 		movt	r2, 16386
 2015 0a96 116D     		ldr	r1, [r2, #80]
 2016 0a98 7A68     		ldr	r2, [r7, #4]
 2017 0a9a 0A43     		orrs	r2, r2, r1
 2018 0a9c 1A65     		str	r2, [r3, #80]
 2019 0a9e 0DE0     		b	.L73
 2020              	.L74:
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 2021              		.loc 1 1469 0
 2022 0aa0 4FF46053 		mov	r3, #14336
 2023 0aa4 C4F20203 		movt	r3, 16386
 2024 0aa8 4FF46052 		mov	r2, #14336
 2025 0aac C4F20202 		movt	r2, 16386
 2026 0ab0 116D     		ldr	r1, [r2, #80]
 2027 0ab2 7A68     		ldr	r2, [r7, #4]
 2028 0ab4 6FEA0202 		mvn	r2, r2
 2029 0ab8 0A40     		ands	r2, r2, r1
 2030 0aba 1A65     		str	r2, [r3, #80]
 2031              	.L73:
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2032              		.loc 1 1471 0
 2033 0abc 07F10C07 		add	r7, r7, #12
 2034 0ac0 BD46     		mov	sp, r7
 2035 0ac2 80BC     		pop	{r7}
 2036 0ac4 7047     		bx	lr
 2037              		.cfi_endproc
 2038              	.LFE144:
 2040 0ac6 00BF     		.align	2
 2041              		.global	RCC_AHB2PeriphClockLPModeCmd
 2042              		.thumb
 2043              		.thumb_func
 2045              	RCC_AHB2PeriphClockLPModeCmd:
 2046              	.LFB145:
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2047              		.loc 1 1491 0
 2048              		.cfi_startproc
 2049              		@ args = 0, pretend = 0, frame = 8
 2050              		@ frame_needed = 1, uses_anonymous_args = 0
 2051              		@ link register save eliminated.
 2052 0ac8 80B4     		push	{r7}
 2053              	.LCFI103:
 2054              		.cfi_def_cfa_offset 4
 2055              		.cfi_offset 7, -4
 2056 0aca 83B0     		sub	sp, sp, #12
 2057              	.LCFI104:
 2058              		.cfi_def_cfa_offset 16
 2059 0acc 00AF     		add	r7, sp, #0
 2060              	.LCFI105:
 2061              		.cfi_def_cfa_register 7
 2062 0ace 7860     		str	r0, [r7, #4]
 2063 0ad0 0B46     		mov	r3, r1
 2064 0ad2 FB70     		strb	r3, [r7, #3]
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2065              		.loc 1 1495 0
 2066 0ad4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2067 0ad6 002B     		cmp	r3, #0
 2068 0ad8 0CD0     		beq	.L77
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2069              		.loc 1 1497 0
 2070 0ada 4FF46053 		mov	r3, #14336
 2071 0ade C4F20203 		movt	r3, 16386
 2072 0ae2 4FF46052 		mov	r2, #14336
 2073 0ae6 C4F20202 		movt	r2, 16386
 2074 0aea 516D     		ldr	r1, [r2, #84]
 2075 0aec 7A68     		ldr	r2, [r7, #4]
 2076 0aee 0A43     		orrs	r2, r2, r1
 2077 0af0 5A65     		str	r2, [r3, #84]
 2078 0af2 0DE0     		b	.L76
 2079              	.L77:
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 2080              		.loc 1 1501 0
 2081 0af4 4FF46053 		mov	r3, #14336
 2082 0af8 C4F20203 		movt	r3, 16386
 2083 0afc 4FF46052 		mov	r2, #14336
 2084 0b00 C4F20202 		movt	r2, 16386
 2085 0b04 516D     		ldr	r1, [r2, #84]
 2086 0b06 7A68     		ldr	r2, [r7, #4]
 2087 0b08 6FEA0202 		mvn	r2, r2
 2088 0b0c 0A40     		ands	r2, r2, r1
 2089 0b0e 5A65     		str	r2, [r3, #84]
 2090              	.L76:
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2091              		.loc 1 1503 0
 2092 0b10 07F10C07 		add	r7, r7, #12
 2093 0b14 BD46     		mov	sp, r7
 2094 0b16 80BC     		pop	{r7}
 2095 0b18 7047     		bx	lr
 2096              		.cfi_endproc
 2097              	.LFE145:
 2099 0b1a 00BF     		.align	2
 2100              		.global	RCC_AHB3PeriphClockLPModeCmd
 2101              		.thumb
 2102              		.thumb_func
 2104              	RCC_AHB3PeriphClockLPModeCmd:
 2105              	.LFB146:
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2106              		.loc 1 1518 0
 2107              		.cfi_startproc
 2108              		@ args = 0, pretend = 0, frame = 8
 2109              		@ frame_needed = 1, uses_anonymous_args = 0
 2110              		@ link register save eliminated.
 2111 0b1c 80B4     		push	{r7}
 2112              	.LCFI106:
 2113              		.cfi_def_cfa_offset 4
 2114              		.cfi_offset 7, -4
 2115 0b1e 83B0     		sub	sp, sp, #12
 2116              	.LCFI107:
 2117              		.cfi_def_cfa_offset 16
 2118 0b20 00AF     		add	r7, sp, #0
 2119              	.LCFI108:
 2120              		.cfi_def_cfa_register 7
 2121 0b22 7860     		str	r0, [r7, #4]
 2122 0b24 0B46     		mov	r3, r1
 2123 0b26 FB70     		strb	r3, [r7, #3]
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2124              		.loc 1 1522 0
 2125 0b28 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2126 0b2a 002B     		cmp	r3, #0
 2127 0b2c 0CD0     		beq	.L80
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 2128              		.loc 1 1524 0
 2129 0b2e 4FF46053 		mov	r3, #14336
 2130 0b32 C4F20203 		movt	r3, 16386
 2131 0b36 4FF46052 		mov	r2, #14336
 2132 0b3a C4F20202 		movt	r2, 16386
 2133 0b3e 916D     		ldr	r1, [r2, #88]
 2134 0b40 7A68     		ldr	r2, [r7, #4]
 2135 0b42 0A43     		orrs	r2, r2, r1
 2136 0b44 9A65     		str	r2, [r3, #88]
 2137 0b46 0DE0     		b	.L79
 2138              	.L80:
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 2139              		.loc 1 1528 0
 2140 0b48 4FF46053 		mov	r3, #14336
 2141 0b4c C4F20203 		movt	r3, 16386
 2142 0b50 4FF46052 		mov	r2, #14336
 2143 0b54 C4F20202 		movt	r2, 16386
 2144 0b58 916D     		ldr	r1, [r2, #88]
 2145 0b5a 7A68     		ldr	r2, [r7, #4]
 2146 0b5c 6FEA0202 		mvn	r2, r2
 2147 0b60 0A40     		ands	r2, r2, r1
 2148 0b62 9A65     		str	r2, [r3, #88]
 2149              	.L79:
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2150              		.loc 1 1530 0
 2151 0b64 07F10C07 		add	r7, r7, #12
 2152 0b68 BD46     		mov	sp, r7
 2153 0b6a 80BC     		pop	{r7}
 2154 0b6c 7047     		bx	lr
 2155              		.cfi_endproc
 2156              	.LFE146:
 2158 0b6e 00BF     		.align	2
 2159              		.global	RCC_APB1PeriphClockLPModeCmd
 2160              		.thumb
 2161              		.thumb_func
 2163              	RCC_APB1PeriphClockLPModeCmd:
 2164              	.LFB147:
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2165              		.loc 1 1568 0
 2166              		.cfi_startproc
 2167              		@ args = 0, pretend = 0, frame = 8
 2168              		@ frame_needed = 1, uses_anonymous_args = 0
 2169              		@ link register save eliminated.
 2170 0b70 80B4     		push	{r7}
 2171              	.LCFI109:
 2172              		.cfi_def_cfa_offset 4
 2173              		.cfi_offset 7, -4
 2174 0b72 83B0     		sub	sp, sp, #12
 2175              	.LCFI110:
 2176              		.cfi_def_cfa_offset 16
 2177 0b74 00AF     		add	r7, sp, #0
 2178              	.LCFI111:
 2179              		.cfi_def_cfa_register 7
 2180 0b76 7860     		str	r0, [r7, #4]
 2181 0b78 0B46     		mov	r3, r1
 2182 0b7a FB70     		strb	r3, [r7, #3]
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2183              		.loc 1 1572 0
 2184 0b7c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2185 0b7e 002B     		cmp	r3, #0
 2186 0b80 0CD0     		beq	.L83
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2187              		.loc 1 1574 0
 2188 0b82 4FF46053 		mov	r3, #14336
 2189 0b86 C4F20203 		movt	r3, 16386
 2190 0b8a 4FF46052 		mov	r2, #14336
 2191 0b8e C4F20202 		movt	r2, 16386
 2192 0b92 116E     		ldr	r1, [r2, #96]
 2193 0b94 7A68     		ldr	r2, [r7, #4]
 2194 0b96 0A43     		orrs	r2, r2, r1
 2195 0b98 1A66     		str	r2, [r3, #96]
 2196 0b9a 0DE0     		b	.L82
 2197              	.L83:
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 2198              		.loc 1 1578 0
 2199 0b9c 4FF46053 		mov	r3, #14336
 2200 0ba0 C4F20203 		movt	r3, 16386
 2201 0ba4 4FF46052 		mov	r2, #14336
 2202 0ba8 C4F20202 		movt	r2, 16386
 2203 0bac 116E     		ldr	r1, [r2, #96]
 2204 0bae 7A68     		ldr	r2, [r7, #4]
 2205 0bb0 6FEA0202 		mvn	r2, r2
 2206 0bb4 0A40     		ands	r2, r2, r1
 2207 0bb6 1A66     		str	r2, [r3, #96]
 2208              	.L82:
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2209              		.loc 1 1580 0
 2210 0bb8 07F10C07 		add	r7, r7, #12
 2211 0bbc BD46     		mov	sp, r7
 2212 0bbe 80BC     		pop	{r7}
 2213 0bc0 7047     		bx	lr
 2214              		.cfi_endproc
 2215              	.LFE147:
 2217 0bc2 00BF     		.align	2
 2218              		.global	RCC_APB2PeriphClockLPModeCmd
 2219              		.thumb
 2220              		.thumb_func
 2222              	RCC_APB2PeriphClockLPModeCmd:
 2223              	.LFB148:
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2224              		.loc 1 1608 0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 8
 2227              		@ frame_needed = 1, uses_anonymous_args = 0
 2228              		@ link register save eliminated.
 2229 0bc4 80B4     		push	{r7}
 2230              	.LCFI112:
 2231              		.cfi_def_cfa_offset 4
 2232              		.cfi_offset 7, -4
 2233 0bc6 83B0     		sub	sp, sp, #12
 2234              	.LCFI113:
 2235              		.cfi_def_cfa_offset 16
 2236 0bc8 00AF     		add	r7, sp, #0
 2237              	.LCFI114:
 2238              		.cfi_def_cfa_register 7
 2239 0bca 7860     		str	r0, [r7, #4]
 2240 0bcc 0B46     		mov	r3, r1
 2241 0bce FB70     		strb	r3, [r7, #3]
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2242              		.loc 1 1612 0
 2243 0bd0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2244 0bd2 002B     		cmp	r3, #0
 2245 0bd4 0CD0     		beq	.L86
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2246              		.loc 1 1614 0
 2247 0bd6 4FF46053 		mov	r3, #14336
 2248 0bda C4F20203 		movt	r3, 16386
 2249 0bde 4FF46052 		mov	r2, #14336
 2250 0be2 C4F20202 		movt	r2, 16386
 2251 0be6 516E     		ldr	r1, [r2, #100]
 2252 0be8 7A68     		ldr	r2, [r7, #4]
 2253 0bea 0A43     		orrs	r2, r2, r1
 2254 0bec 5A66     		str	r2, [r3, #100]
 2255 0bee 0DE0     		b	.L85
 2256              	.L86:
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 2257              		.loc 1 1618 0
 2258 0bf0 4FF46053 		mov	r3, #14336
 2259 0bf4 C4F20203 		movt	r3, 16386
 2260 0bf8 4FF46052 		mov	r2, #14336
 2261 0bfc C4F20202 		movt	r2, 16386
 2262 0c00 516E     		ldr	r1, [r2, #100]
 2263 0c02 7A68     		ldr	r2, [r7, #4]
 2264 0c04 6FEA0202 		mvn	r2, r2
 2265 0c08 0A40     		ands	r2, r2, r1
 2266 0c0a 5A66     		str	r2, [r3, #100]
 2267              	.L85:
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2268              		.loc 1 1620 0
 2269 0c0c 07F10C07 		add	r7, r7, #12
 2270 0c10 BD46     		mov	sp, r7
 2271 0c12 80BC     		pop	{r7}
 2272 0c14 7047     		bx	lr
 2273              		.cfi_endproc
 2274              	.LFE148:
 2276 0c16 00BF     		.align	2
 2277              		.global	RCC_ITConfig
 2278              		.thumb
 2279              		.thumb_func
 2281              	RCC_ITConfig:
 2282              	.LFB149:
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Interrupts and flags management functions
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2283              		.loc 1 1653 0
 2284              		.cfi_startproc
 2285              		@ args = 0, pretend = 0, frame = 8
 2286              		@ frame_needed = 1, uses_anonymous_args = 0
 2287              		@ link register save eliminated.
 2288 0c18 80B4     		push	{r7}
 2289              	.LCFI115:
 2290              		.cfi_def_cfa_offset 4
 2291              		.cfi_offset 7, -4
 2292 0c1a 83B0     		sub	sp, sp, #12
 2293              	.LCFI116:
 2294              		.cfi_def_cfa_offset 16
 2295 0c1c 00AF     		add	r7, sp, #0
 2296              	.LCFI117:
 2297              		.cfi_def_cfa_register 7
 2298 0c1e 0246     		mov	r2, r0
 2299 0c20 0B46     		mov	r3, r1
 2300 0c22 FA71     		strb	r2, [r7, #7]
 2301 0c24 BB71     		strb	r3, [r7, #6]
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2302              		.loc 1 1657 0
 2303 0c26 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2304 0c28 002B     		cmp	r3, #0
 2305 0c2a 0ED0     		beq	.L89
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 2306              		.loc 1 1660 0
 2307 0c2c 43F60D03 		movw	r3, #14349
 2308 0c30 C4F20203 		movt	r3, 16386
 2309 0c34 43F60D02 		movw	r2, #14349
 2310 0c38 C4F20202 		movt	r2, 16386
 2311 0c3c 1278     		ldrb	r2, [r2, #0]
 2312 0c3e D1B2     		uxtb	r1, r2
 2313 0c40 FA79     		ldrb	r2, [r7, #7]
 2314 0c42 0A43     		orrs	r2, r2, r1
 2315 0c44 D2B2     		uxtb	r2, r2
 2316 0c46 1A70     		strb	r2, [r3, #0]
 2317 0c48 10E0     		b	.L88
 2318              	.L89:
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 2319              		.loc 1 1665 0
 2320 0c4a 43F60D03 		movw	r3, #14349
 2321 0c4e C4F20203 		movt	r3, 16386
 2322 0c52 43F60D02 		movw	r2, #14349
 2323 0c56 C4F20202 		movt	r2, 16386
 2324 0c5a 1278     		ldrb	r2, [r2, #0]
 2325 0c5c D1B2     		uxtb	r1, r2
 2326 0c5e FA79     		ldrb	r2, [r7, #7]
 2327 0c60 6FEA0202 		mvn	r2, r2
 2328 0c64 D2B2     		uxtb	r2, r2
 2329 0c66 0A40     		ands	r2, r2, r1
 2330 0c68 D2B2     		uxtb	r2, r2
 2331 0c6a 1A70     		strb	r2, [r3, #0]
 2332              	.L88:
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2333              		.loc 1 1667 0
 2334 0c6c 07F10C07 		add	r7, r7, #12
 2335 0c70 BD46     		mov	sp, r7
 2336 0c72 80BC     		pop	{r7}
 2337 0c74 7047     		bx	lr
 2338              		.cfi_endproc
 2339              	.LFE149:
 2341 0c76 00BF     		.align	2
 2342              		.global	RCC_GetFlagStatus
 2343              		.thumb
 2344              		.thumb_func
 2346              	RCC_GetFlagStatus:
 2347              	.LFB150:
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2348              		.loc 1 1689 0
 2349              		.cfi_startproc
 2350              		@ args = 0, pretend = 0, frame = 24
 2351              		@ frame_needed = 1, uses_anonymous_args = 0
 2352              		@ link register save eliminated.
 2353 0c78 80B4     		push	{r7}
 2354              	.LCFI118:
 2355              		.cfi_def_cfa_offset 4
 2356              		.cfi_offset 7, -4
 2357 0c7a 87B0     		sub	sp, sp, #28
 2358              	.LCFI119:
 2359              		.cfi_def_cfa_offset 32
 2360 0c7c 00AF     		add	r7, sp, #0
 2361              	.LCFI120:
 2362              		.cfi_def_cfa_register 7
 2363 0c7e 0346     		mov	r3, r0
 2364 0c80 FB71     		strb	r3, [r7, #7]
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2365              		.loc 1 1690 0
 2366 0c82 4FF00003 		mov	r3, #0
 2367 0c86 FB60     		str	r3, [r7, #12]
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 2368              		.loc 1 1691 0
 2369 0c88 4FF00003 		mov	r3, #0
 2370 0c8c 7B61     		str	r3, [r7, #20]
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2371              		.loc 1 1692 0
 2372 0c8e 4FF00003 		mov	r3, #0
 2373 0c92 FB74     		strb	r3, [r7, #19]
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2374              		.loc 1 1698 0
 2375 0c94 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2376 0c96 4FEA5313 		lsr	r3, r3, #5
 2377 0c9a DBB2     		uxtb	r3, r3
 2378 0c9c FB60     		str	r3, [r7, #12]
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2379              		.loc 1 1699 0
 2380 0c9e FB68     		ldr	r3, [r7, #12]
 2381 0ca0 012B     		cmp	r3, #1
 2382 0ca2 06D1     		bne	.L92
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 2383              		.loc 1 1701 0
 2384 0ca4 4FF46053 		mov	r3, #14336
 2385 0ca8 C4F20203 		movt	r3, 16386
 2386 0cac 1B68     		ldr	r3, [r3, #0]
 2387 0cae 7B61     		str	r3, [r7, #20]
 2388 0cb0 0FE0     		b	.L93
 2389              	.L92:
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2390              		.loc 1 1703 0
 2391 0cb2 FB68     		ldr	r3, [r7, #12]
 2392 0cb4 022B     		cmp	r3, #2
 2393 0cb6 06D1     		bne	.L94
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 2394              		.loc 1 1705 0
 2395 0cb8 4FF46053 		mov	r3, #14336
 2396 0cbc C4F20203 		movt	r3, 16386
 2397 0cc0 1B6F     		ldr	r3, [r3, #112]
 2398 0cc2 7B61     		str	r3, [r7, #20]
 2399 0cc4 05E0     		b	.L93
 2400              	.L94:
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 2401              		.loc 1 1709 0
 2402 0cc6 4FF46053 		mov	r3, #14336
 2403 0cca C4F20203 		movt	r3, 16386
 2404 0cce 5B6F     		ldr	r3, [r3, #116]
 2405 0cd0 7B61     		str	r3, [r7, #20]
 2406              	.L93:
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 2407              		.loc 1 1713 0
 2408 0cd2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2409 0cd4 03F01F03 		and	r3, r3, #31
 2410 0cd8 FB60     		str	r3, [r7, #12]
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2411              		.loc 1 1714 0
 2412 0cda FB68     		ldr	r3, [r7, #12]
 2413 0cdc 7A69     		ldr	r2, [r7, #20]
 2414 0cde 22FA03F3 		lsr	r3, r2, r3
 2415 0ce2 03F00103 		and	r3, r3, #1
 2416 0ce6 DBB2     		uxtb	r3, r3
 2417 0ce8 002B     		cmp	r3, #0
 2418 0cea 03D0     		beq	.L95
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2419              		.loc 1 1716 0
 2420 0cec 4FF00103 		mov	r3, #1
 2421 0cf0 FB74     		strb	r3, [r7, #19]
 2422 0cf2 02E0     		b	.L96
 2423              	.L95:
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2424              		.loc 1 1720 0
 2425 0cf4 4FF00003 		mov	r3, #0
 2426 0cf8 FB74     		strb	r3, [r7, #19]
 2427              	.L96:
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
 2428              		.loc 1 1723 0
 2429 0cfa FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2430              		.loc 1 1724 0
 2431 0cfc 1846     		mov	r0, r3
 2432 0cfe 07F11C07 		add	r7, r7, #28
 2433 0d02 BD46     		mov	sp, r7
 2434 0d04 80BC     		pop	{r7}
 2435 0d06 7047     		bx	lr
 2436              		.cfi_endproc
 2437              	.LFE150:
 2439              		.align	2
 2440              		.global	RCC_ClearFlag
 2441              		.thumb
 2442              		.thumb_func
 2444              	RCC_ClearFlag:
 2445              	.LFB151:
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
1731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
1734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2446              		.loc 1 1734 0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 1, uses_anonymous_args = 0
 2450              		@ link register save eliminated.
 2451 0d08 80B4     		push	{r7}
 2452              	.LCFI121:
 2453              		.cfi_def_cfa_offset 4
 2454              		.cfi_offset 7, -4
 2455 0d0a 00AF     		add	r7, sp, #0
 2456              	.LCFI122:
 2457              		.cfi_def_cfa_register 7
1735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2458              		.loc 1 1736 0
 2459 0d0c 4FF46053 		mov	r3, #14336
 2460 0d10 C4F20203 		movt	r3, 16386
 2461 0d14 4FF46052 		mov	r2, #14336
 2462 0d18 C4F20202 		movt	r2, 16386
 2463 0d1c 526F     		ldr	r2, [r2, #116]
 2464 0d1e 42F08072 		orr	r2, r2, #16777216
 2465 0d22 5A67     		str	r2, [r3, #116]
1737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2466              		.loc 1 1737 0
 2467 0d24 BD46     		mov	sp, r7
 2468 0d26 80BC     		pop	{r7}
 2469 0d28 7047     		bx	lr
 2470              		.cfi_endproc
 2471              	.LFE151:
 2473 0d2a 00BF     		.align	2
 2474              		.global	RCC_GetITStatus
 2475              		.thumb
 2476              		.thumb_func
 2478              	RCC_GetITStatus:
 2479              	.LFB152:
1738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2480              		.loc 1 1753 0
 2481              		.cfi_startproc
 2482              		@ args = 0, pretend = 0, frame = 16
 2483              		@ frame_needed = 1, uses_anonymous_args = 0
 2484              		@ link register save eliminated.
 2485 0d2c 80B4     		push	{r7}
 2486              	.LCFI123:
 2487              		.cfi_def_cfa_offset 4
 2488              		.cfi_offset 7, -4
 2489 0d2e 85B0     		sub	sp, sp, #20
 2490              	.LCFI124:
 2491              		.cfi_def_cfa_offset 24
 2492 0d30 00AF     		add	r7, sp, #0
 2493              	.LCFI125:
 2494              		.cfi_def_cfa_register 7
 2495 0d32 0346     		mov	r3, r0
 2496 0d34 FB71     		strb	r3, [r7, #7]
1754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 2497              		.loc 1 1754 0
 2498 0d36 4FF00003 		mov	r3, #0
 2499 0d3a FB73     		strb	r3, [r7, #15]
1755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2500              		.loc 1 1760 0
 2501 0d3c 4FF46053 		mov	r3, #14336
 2502 0d40 C4F20203 		movt	r3, 16386
 2503 0d44 DA68     		ldr	r2, [r3, #12]
 2504 0d46 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2505 0d48 1340     		ands	r3, r3, r2
 2506 0d4a 002B     		cmp	r3, #0
 2507 0d4c 03D0     		beq	.L99
1761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2508              		.loc 1 1762 0
 2509 0d4e 4FF00103 		mov	r3, #1
 2510 0d52 FB73     		strb	r3, [r7, #15]
 2511 0d54 02E0     		b	.L100
 2512              	.L99:
1763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2513              		.loc 1 1766 0
 2514 0d56 4FF00003 		mov	r3, #0
 2515 0d5a FB73     		strb	r3, [r7, #15]
 2516              	.L100:
1767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
1769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
 2517              		.loc 1 1769 0
 2518 0d5c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2519              		.loc 1 1770 0
 2520 0d5e 1846     		mov	r0, r3
 2521 0d60 07F11407 		add	r7, r7, #20
 2522 0d64 BD46     		mov	sp, r7
 2523 0d66 80BC     		pop	{r7}
 2524 0d68 7047     		bx	lr
 2525              		.cfi_endproc
 2526              	.LFE152:
 2528 0d6a 00BF     		.align	2
 2529              		.global	RCC_ClearITPendingBit
 2530              		.thumb
 2531              		.thumb_func
 2533              	RCC_ClearITPendingBit:
 2534              	.LFB153:
1771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2535              		.loc 1 1786 0
 2536              		.cfi_startproc
 2537              		@ args = 0, pretend = 0, frame = 8
 2538              		@ frame_needed = 1, uses_anonymous_args = 0
 2539              		@ link register save eliminated.
 2540 0d6c 80B4     		push	{r7}
 2541              	.LCFI126:
 2542              		.cfi_def_cfa_offset 4
 2543              		.cfi_offset 7, -4
 2544 0d6e 83B0     		sub	sp, sp, #12
 2545              	.LCFI127:
 2546              		.cfi_def_cfa_offset 16
 2547 0d70 00AF     		add	r7, sp, #0
 2548              	.LCFI128:
 2549              		.cfi_def_cfa_register 7
 2550 0d72 0346     		mov	r3, r0
 2551 0d74 FB71     		strb	r3, [r7, #7]
1787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
1792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2552              		.loc 1 1792 0
 2553 0d76 43F60E03 		movw	r3, #14350
 2554 0d7a C4F20203 		movt	r3, 16386
 2555 0d7e FA79     		ldrb	r2, [r7, #7]
 2556 0d80 1A70     		strb	r2, [r3, #0]
1793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2557              		.loc 1 1793 0
 2558 0d82 07F10C07 		add	r7, r7, #12
 2559 0d86 BD46     		mov	sp, r7
 2560 0d88 80BC     		pop	{r7}
 2561 0d8a 7047     		bx	lr
 2562              		.cfi_endproc
 2563              	.LFE153:
 2565              	.Letext0:
 2566              		.file 2 "c:\\program files (x86)\\codesourcery\\eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../..
 2567              		.file 3 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\Device\\STM32F4xx\\Include/s
 2568              		.file 4 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\STM32F4xx_StdPeriph_Driver\\
 2569              		.file 5 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rcc.c
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:19     .data:00000000 $d
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:22     .data:00000000 APBAHBPrescTable
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:40     .text:00000000 $t
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:45     .text:00000000 RCC_DeInit
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:113    .text:00000084 RCC_HSEConfig
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:155    .text:000000b4 RCC_WaitForHSEStartUp
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:2346   .text:00000c78 RCC_GetFlagStatus
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:229    .text:00000118 RCC_AdjustHSICalibrationValue
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:284    .text:00000160 RCC_HSICmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:321    .text:00000180 RCC_LSEConfig
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:390    .text:000001e0 RCC_LSICmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:427    .text:00000200 RCC_PLLConfig
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:481    .text:00000248 RCC_PLLCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:518    .text:00000268 RCC_PLLI2SConfig
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:559    .text:00000298 RCC_PLLI2SCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:596    .text:000002b8 RCC_ClockSecuritySystemCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:633    .text:000002d8 RCC_MCO1Config
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:689    .text:00000320 RCC_MCO2Config
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:745    .text:00000368 RCC_SYSCLKConfig
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:798    .text:000003a8 RCC_GetSYSCLKSource
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:832    .text:000003c8 RCC_HCLKConfig
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:885    .text:00000408 RCC_PCLK1Config
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:938    .text:00000448 RCC_PCLK2Config
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:992    .text:0000048c RCC_GetClocksFreq
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1214   .text:00000658 RCC_RTCCLKConfig
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1286   .text:000006cc RCC_RTCCLKCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1323   .text:000006ec RCC_BackupResetCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1360   .text:0000070c RCC_I2SCLKConfig
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1396   .text:0000072c RCC_AHB1PeriphClockCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1455   .text:00000780 RCC_AHB2PeriphClockCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1514   .text:000007d4 RCC_AHB3PeriphClockCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1573   .text:00000828 RCC_APB1PeriphClockCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1632   .text:0000087c RCC_APB2PeriphClockCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1691   .text:000008d0 RCC_AHB1PeriphResetCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1750   .text:00000924 RCC_AHB2PeriphResetCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1809   .text:00000978 RCC_AHB3PeriphResetCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1868   .text:000009cc RCC_APB1PeriphResetCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1927   .text:00000a20 RCC_APB2PeriphResetCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:1986   .text:00000a74 RCC_AHB1PeriphClockLPModeCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:2045   .text:00000ac8 RCC_AHB2PeriphClockLPModeCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:2104   .text:00000b1c RCC_AHB3PeriphClockLPModeCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:2163   .text:00000b70 RCC_APB1PeriphClockLPModeCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:2222   .text:00000bc4 RCC_APB2PeriphClockLPModeCmd
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:2281   .text:00000c18 RCC_ITConfig
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:2444   .text:00000d08 RCC_ClearFlag
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:2478   .text:00000d2c RCC_GetITStatus
C:\Users\Jure\AppData\Local\Temp\cc1BeZmt.s:2533   .text:00000d6c RCC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
