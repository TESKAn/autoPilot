   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rng.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	RNG_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	RNG_DeInit:
  24              	.LFB110:
  25              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @version V1.0.0RC1
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @date    25-August-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     * @brief This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Initialization and Configuration 
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Get 32 bit Random number      
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Interrupts and flags management       
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @verbatim
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                               
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================      
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *                                   How to use this driver
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          ===================================================================          
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          1. Enable The RNG controller clock using 
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          2. Activate the RNG peripheral using RNG_Cmd() function.
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          3. Wait until the 32 bit Random number Generator contains a valid 
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            random data (using polling/interrupt mode). For more details, 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            refer to "Interrupts and flags management functions" module 
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            description.
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          4. Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          5. To get another 32 bit Random number, go to step 3.       
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *              
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *  @endverbatim
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @attention
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************  
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Initialization and Configuration functions
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to 
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Initialize the RNG peripheral
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    - Enable or disable the RNG peripheral
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  26              		.loc 1 95 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
  38              		.loc 1 97 0
  39 0004 4FF04000 		mov	r0, #64
  40 0008 4FF00101 		mov	r1, #1
  41 000c FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
  42              		.loc 1 100 0
  43 0010 4FF04000 		mov	r0, #64
  44 0014 4FF00001 		mov	r1, #0
  45 0018 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  46              		.loc 1 101 0
  47 001c 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE110:
  51 001e 00BF     		.align	2
  52              		.global	RNG_Cmd
  53              		.thumb
  54              		.thumb_func
  56              	RNG_Cmd:
  57              	.LFB111:
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  58              		.loc 1 110 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 8
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0020 80B4     		push	{r7}
  64              	.LCFI2:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0022 83B0     		sub	sp, sp, #12
  68              	.LCFI3:
  69              		.cfi_def_cfa_offset 16
  70 0024 00AF     		add	r7, sp, #0
  71              	.LCFI4:
  72              		.cfi_def_cfa_register 7
  73 0026 0346     		mov	r3, r0
  74 0028 FB71     		strb	r3, [r7, #7]
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
  75              		.loc 1 114 0
  76 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  77 002c 002B     		cmp	r3, #0
  78 002e 0CD0     		beq	.L3
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
  79              		.loc 1 117 0
  80 0030 4FF40063 		mov	r3, #2048
  81 0034 C5F20603 		movt	r3, 20486
  82 0038 4FF40062 		mov	r2, #2048
  83 003c C5F20602 		movt	r2, 20486
  84 0040 1268     		ldr	r2, [r2, #0]
  85 0042 42F00402 		orr	r2, r2, #4
  86 0046 1A60     		str	r2, [r3, #0]
  87 0048 0BE0     		b	.L2
  88              	.L3:
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
  89              		.loc 1 122 0
  90 004a 4FF40063 		mov	r3, #2048
  91 004e C5F20603 		movt	r3, 20486
  92 0052 4FF40062 		mov	r2, #2048
  93 0056 C5F20602 		movt	r2, 20486
  94 005a 1268     		ldr	r2, [r2, #0]
  95 005c 22F00402 		bic	r2, r2, #4
  96 0060 1A60     		str	r2, [r3, #0]
  97              	.L2:
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  98              		.loc 1 124 0
  99 0062 07F10C07 		add	r7, r7, #12
 100 0066 BD46     		mov	sp, r7
 101 0068 80BC     		pop	{r7}
 102 006a 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE111:
 106              		.align	2
 107              		.global	RNG_GetRandomNumber
 108              		.thumb
 109              		.thumb_func
 111              	RNG_GetRandomNumber:
 112              	.LFB112:
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                       Get 32 bit Random number function
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides a function allowing to get the 32 bit Random number  
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note  Before to call this function you have to wait till DRDY flag is set,
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****          using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *   
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 113              		.loc 1 172 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118 006c 80B4     		push	{r7}
 119              	.LCFI5:
 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 7, -4
 122 006e 00AF     		add	r7, sp, #0
 123              	.LCFI6:
 124              		.cfi_def_cfa_register 7
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return RNG->DR;
 125              		.loc 1 174 0
 126 0070 4FF40063 		mov	r3, #2048
 127 0074 C5F20603 		movt	r3, 20486
 128 0078 9B68     		ldr	r3, [r3, #8]
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 129              		.loc 1 175 0
 130 007a 1846     		mov	r0, r3
 131 007c BD46     		mov	sp, r7
 132 007e 80BC     		pop	{r7}
 133 0080 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE112:
 137 0082 00BF     		.align	2
 138              		.global	RNG_ITConfig
 139              		.thumb
 140              		.thumb_func
 142              	RNG_ITConfig:
 143              	.LFB113:
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim   
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                    Interrupts and flags management functions
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   This section provides functions allowing to configure the RNG Interrupts and 
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   to get the status and clear flags and Interrupts pending bits.
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The RNG provides 3 Interrupts sources and 3 Flags:
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Flags :
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ---------- 
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      1. RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          random data. it is cleared by reading the valid data 
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                          (using RNG_GetRandomNumber() function).
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      2. RNG_FLAG_CECS : In the case of a seed error detection. 
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****      3. RNG_FLAG_SECS : In the case of a clock error detection.
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****               
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Interrupts :
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    if enabled, an RNG interrupt is pending :
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    1.  In the case of the RNG_DR register contains valid random data. 
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        computed. 
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or 
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    2. In the case of a seed error : One of the following faulty sequences has 
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       been detected:
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 64 consecutive bits at the same value (0 or 1)
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    or
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    3. In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       was not correctly detected (fPLL48CLK< fHCLK/16).
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_CEI)
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       function.
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       @note In this case, User have to check that the clock controller is 
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****             correctly configured to provide the RNG clock. 
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   Managing the RNG controller events :
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ------------------------------------ 
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   The user should identify which mode will be used in his application to manage 
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   the RNG controller events: Polling mode or Interrupt mode.
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   1.  In the Polling Mode it is advised to use the following functions:
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetFlagStatus() : to check if flags events occur. 
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearFlag()     : to clear the flags events.
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   @note RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         by reading the Random number data.      
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ITConfig()       : to enable or disable the interrupt source.
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_GetITStatus()    : to check if Interrupt occurs.
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       - RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                                 (corresponding Flag). 
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 144              		.loc 1 269 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 8
 147              		@ frame_needed = 1, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149 0084 80B4     		push	{r7}
 150              	.LCFI7:
 151              		.cfi_def_cfa_offset 4
 152              		.cfi_offset 7, -4
 153 0086 83B0     		sub	sp, sp, #12
 154              	.LCFI8:
 155              		.cfi_def_cfa_offset 16
 156 0088 00AF     		add	r7, sp, #0
 157              	.LCFI9:
 158              		.cfi_def_cfa_register 7
 159 008a 0346     		mov	r3, r0
 160 008c FB71     		strb	r3, [r7, #7]
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 161              		.loc 1 273 0
 162 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 163 0090 002B     		cmp	r3, #0
 164 0092 0CD0     		beq	.L7
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 165              		.loc 1 276 0
 166 0094 4FF40063 		mov	r3, #2048
 167 0098 C5F20603 		movt	r3, 20486
 168 009c 4FF40062 		mov	r2, #2048
 169 00a0 C5F20602 		movt	r2, 20486
 170 00a4 1268     		ldr	r2, [r2, #0]
 171 00a6 42F00802 		orr	r2, r2, #8
 172 00aa 1A60     		str	r2, [r3, #0]
 173 00ac 0BE0     		b	.L6
 174              	.L7:
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 175              		.loc 1 281 0
 176 00ae 4FF40063 		mov	r3, #2048
 177 00b2 C5F20603 		movt	r3, 20486
 178 00b6 4FF40062 		mov	r2, #2048
 179 00ba C5F20602 		movt	r2, 20486
 180 00be 1268     		ldr	r2, [r2, #0]
 181 00c0 22F00802 		bic	r2, r2, #8
 182 00c4 1A60     		str	r2, [r3, #0]
 183              	.L6:
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 184              		.loc 1 283 0
 185 00c6 07F10C07 		add	r7, r7, #12
 186 00ca BD46     		mov	sp, r7
 187 00cc 80BC     		pop	{r7}
 188 00ce 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE113:
 192              		.align	2
 193              		.global	RNG_GetFlagStatus
 194              		.thumb
 195              		.thumb_func
 197              	RNG_GetFlagStatus:
 198              	.LFB114:
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 199              		.loc 1 295 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 16
 202              		@ frame_needed = 1, uses_anonymous_args = 0
 203              		@ link register save eliminated.
 204 00d0 80B4     		push	{r7}
 205              	.LCFI10:
 206              		.cfi_def_cfa_offset 4
 207              		.cfi_offset 7, -4
 208 00d2 85B0     		sub	sp, sp, #20
 209              	.LCFI11:
 210              		.cfi_def_cfa_offset 24
 211 00d4 00AF     		add	r7, sp, #0
 212              	.LCFI12:
 213              		.cfi_def_cfa_register 7
 214 00d6 0346     		mov	r3, r0
 215 00d8 FB71     		strb	r3, [r7, #7]
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 216              		.loc 1 296 0
 217 00da 4FF00003 		mov	r3, #0
 218 00de FB73     		strb	r3, [r7, #15]
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 219              		.loc 1 301 0
 220 00e0 4FF40063 		mov	r3, #2048
 221 00e4 C5F20603 		movt	r3, 20486
 222 00e8 5A68     		ldr	r2, [r3, #4]
 223 00ea FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 224 00ec 1340     		ands	r3, r3, r2
 225 00ee 002B     		cmp	r3, #0
 226 00f0 03D0     		beq	.L10
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 227              		.loc 1 304 0
 228 00f2 4FF00103 		mov	r3, #1
 229 00f6 FB73     		strb	r3, [r7, #15]
 230 00f8 02E0     		b	.L11
 231              	.L10:
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 232              		.loc 1 309 0
 233 00fa 4FF00003 		mov	r3, #0
 234 00fe FB73     		strb	r3, [r7, #15]
 235              	.L11:
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return  bitstatus;
 236              		.loc 1 312 0
 237 0100 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 238              		.loc 1 313 0
 239 0102 1846     		mov	r0, r3
 240 0104 07F11407 		add	r7, r7, #20
 241 0108 BD46     		mov	sp, r7
 242 010a 80BC     		pop	{r7}
 243 010c 7047     		bx	lr
 244              		.cfi_endproc
 245              	.LFE114:
 247 010e 00BF     		.align	2
 248              		.global	RNG_ClearFlag
 249              		.thumb
 250              		.thumb_func
 252              	RNG_ClearFlag:
 253              	.LFB115:
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 254              		.loc 1 328 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 8
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 258              		@ link register save eliminated.
 259 0110 80B4     		push	{r7}
 260              	.LCFI13:
 261              		.cfi_def_cfa_offset 4
 262              		.cfi_offset 7, -4
 263 0112 83B0     		sub	sp, sp, #12
 264              	.LCFI14:
 265              		.cfi_def_cfa_offset 16
 266 0114 00AF     		add	r7, sp, #0
 267              	.LCFI15:
 268              		.cfi_def_cfa_register 7
 269 0116 0346     		mov	r3, r0
 270 0118 FB71     		strb	r3, [r7, #7]
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 271              		.loc 1 332 0
 272 011a 4FF40063 		mov	r3, #2048
 273 011e C5F20603 		movt	r3, 20486
 274 0122 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 275 0124 4FEA0212 		lsl	r2, r2, #4
 276 0128 6FEA0202 		mvn	r2, r2
 277 012c 5A60     		str	r2, [r3, #4]
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 278              		.loc 1 333 0
 279 012e 07F10C07 		add	r7, r7, #12
 280 0132 BD46     		mov	sp, r7
 281 0134 80BC     		pop	{r7}
 282 0136 7047     		bx	lr
 283              		.cfi_endproc
 284              	.LFE115:
 286              		.align	2
 287              		.global	RNG_GetITStatus
 288              		.thumb
 289              		.thumb_func
 291              	RNG_GetITStatus:
 292              	.LFB116:
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 293              		.loc 1 344 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 16
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297              		@ link register save eliminated.
 298 0138 80B4     		push	{r7}
 299              	.LCFI16:
 300              		.cfi_def_cfa_offset 4
 301              		.cfi_offset 7, -4
 302 013a 85B0     		sub	sp, sp, #20
 303              	.LCFI17:
 304              		.cfi_def_cfa_offset 24
 305 013c 00AF     		add	r7, sp, #0
 306              	.LCFI18:
 307              		.cfi_def_cfa_register 7
 308 013e 0346     		mov	r3, r0
 309 0140 FB71     		strb	r3, [r7, #7]
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 310              		.loc 1 345 0
 311 0142 4FF00003 		mov	r3, #0
 312 0146 FB73     		strb	r3, [r7, #15]
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 313              		.loc 1 350 0
 314 0148 4FF40063 		mov	r3, #2048
 315 014c C5F20603 		movt	r3, 20486
 316 0150 5A68     		ldr	r2, [r3, #4]
 317 0152 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 318 0154 1340     		ands	r3, r3, r2
 319 0156 002B     		cmp	r3, #0
 320 0158 03D0     		beq	.L14
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 321              		.loc 1 353 0
 322 015a 4FF00103 		mov	r3, #1
 323 015e FB73     		strb	r3, [r7, #15]
 324 0160 02E0     		b	.L15
 325              	.L14:
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 326              		.loc 1 358 0
 327 0162 4FF00003 		mov	r3, #0
 328 0166 FB73     		strb	r3, [r7, #15]
 329              	.L15:
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return bitstatus;
 330              		.loc 1 361 0
 331 0168 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 332              		.loc 1 362 0
 333 016a 1846     		mov	r0, r3
 334 016c 07F11407 		add	r7, r7, #20
 335 0170 BD46     		mov	sp, r7
 336 0172 80BC     		pop	{r7}
 337 0174 7047     		bx	lr
 338              		.cfi_endproc
 339              	.LFE116:
 341 0176 00BF     		.align	2
 342              		.global	RNG_ClearITPendingBit
 343              		.thumb
 344              		.thumb_func
 346              	RNG_ClearITPendingBit:
 347              	.LFB117:
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 348              		.loc 1 374 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0178 80B4     		push	{r7}
 354              	.LCFI19:
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
 357 017a 83B0     		sub	sp, sp, #12
 358              	.LCFI20:
 359              		.cfi_def_cfa_offset 16
 360 017c 00AF     		add	r7, sp, #0
 361              	.LCFI21:
 362              		.cfi_def_cfa_register 7
 363 017e 0346     		mov	r3, r0
 364 0180 FB71     		strb	r3, [r7, #7]
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 365              		.loc 1 379 0
 366 0182 4FF40063 		mov	r3, #2048
 367 0186 C5F20603 		movt	r3, 20486
 368 018a FA79     		ldrb	r2, [r7, #7]
 369 018c 6FEA0202 		mvn	r2, r2
 370 0190 D2B2     		uxtb	r2, r2
 371 0192 5A60     		str	r2, [r3, #4]
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 372              		.loc 1 380 0
 373 0194 07F10C07 		add	r7, r7, #12
 374 0198 BD46     		mov	sp, r7
 375 019a 80BC     		pop	{r7}
 376 019c 7047     		bx	lr
 377              		.cfi_endproc
 378              	.LFE117:
 380              	.Letext0:
 381              		.file 2 "c:\\program files (x86)\\codesourcery\\eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../..
 382              		.file 3 "D:\\Jure\\Projekti\\Git\\AutoPilot\\autopilot_sw\\Libraries\\Device\\STM32F4xx\\Include/s
 383              		.file 4 "D:\\Jure\\Projekti\\Git\\AutoPilot\\autopilot_sw\\Libraries\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rng.c
C:\Users\Jure\AppData\Local\Temp\cc8kI4QM.s:18     .text:00000000 $t
C:\Users\Jure\AppData\Local\Temp\cc8kI4QM.s:23     .text:00000000 RNG_DeInit
C:\Users\Jure\AppData\Local\Temp\cc8kI4QM.s:56     .text:00000020 RNG_Cmd
C:\Users\Jure\AppData\Local\Temp\cc8kI4QM.s:111    .text:0000006c RNG_GetRandomNumber
C:\Users\Jure\AppData\Local\Temp\cc8kI4QM.s:142    .text:00000084 RNG_ITConfig
C:\Users\Jure\AppData\Local\Temp\cc8kI4QM.s:197    .text:000000d0 RNG_GetFlagStatus
C:\Users\Jure\AppData\Local\Temp\cc8kI4QM.s:252    .text:00000110 RNG_ClearFlag
C:\Users\Jure\AppData\Local\Temp\cc8kI4QM.s:291    .text:00000138 RNG_GetITStatus
C:\Users\Jure\AppData\Local\Temp\cc8kI4QM.s:346    .text:00000178 RNG_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
