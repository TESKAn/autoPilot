   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"init.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	System_Config
  20              		.thumb
  21              		.thumb_func
  23              	System_Config:
  24              	.LFB110:
  25              		.file 1 "../src/init.c"
   1:../src/init.c **** /*
   2:../src/init.c ****  * init.c
   3:../src/init.c ****  *
   4:../src/init.c ****  *  Created on: 26. avg. 2012
   5:../src/init.c ****  *      Author: Jure
   6:../src/init.c ****  */
   7:../src/init.c **** 
   8:../src/init.c **** #include "allinclude.h"
   9:../src/init.c **** 
  10:../src/init.c **** 
  11:../src/init.c **** void System_Config(void)
  12:../src/init.c **** {
  26              		.loc 1 12 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 216
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 B6B0     		sub	sp, sp, #216
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 224
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  13:../src/init.c **** 
  14:../src/init.c **** 	//make structure for configuring pins
  15:../src/init.c **** 	GPIO_InitTypeDef  GPIO_InitStructure;
  16:../src/init.c **** 
  17:../src/init.c **** 	//make structures for configuring timers
  18:../src/init.c **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
  19:../src/init.c **** 	TIM_ICInitTypeDef TIM_ICInitStruct;
  20:../src/init.c **** 	TIM_OCInitTypeDef TIM_OCInitStruct;
  21:../src/init.c **** 	TIM_BDTRInitTypeDef TIM_BDTRInitStruct;
  22:../src/init.c **** 	I2C_InitTypeDef I2CInitStruct;
  23:../src/init.c **** 	ADC_InitTypeDef ADC_InitStruct;
  24:../src/init.c **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
  25:../src/init.c **** 	DAC_InitTypeDef DAC_InitStruct;
  26:../src/init.c **** 	DMA_InitTypeDef DMAInitStructure;
  27:../src/init.c **** 
  28:../src/init.c **** 
  29:../src/init.c **** 	//make structure for configuring USART
  30:../src/init.c **** 	USART_InitTypeDef USART_InitStructure;
  31:../src/init.c **** 
  32:../src/init.c **** 	// Configure GPIO pins
  33:../src/init.c **** 	/* GPIO Peripheral clock enable */
  34:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
  41              		.loc 1 34 0
  42 0006 4FF00100 		mov	r0, #1
  43 000a 4FF00101 		mov	r1, #1
  44 000e FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  35:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
  45              		.loc 1 35 0
  46 0012 4FF00200 		mov	r0, #2
  47 0016 4FF00101 		mov	r1, #1
  48 001a FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  36:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
  49              		.loc 1 36 0
  50 001e 4FF00400 		mov	r0, #4
  51 0022 4FF00101 		mov	r1, #1
  52 0026 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  37:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
  53              		.loc 1 37 0
  54 002a 4FF00800 		mov	r0, #8
  55 002e 4FF00101 		mov	r1, #1
  56 0032 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  38:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
  57              		.loc 1 38 0
  58 0036 4FF01000 		mov	r0, #16
  59 003a 4FF00101 		mov	r1, #1
  60 003e FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  39:../src/init.c **** 
  40:../src/init.c **** 	//GPIO A
  41:../src/init.c **** 	// A4, A5 - DAC output
  42:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
  61              		.loc 1 42 0
  62 0042 4FF03003 		mov	r3, #48
  63 0046 C7F8D030 		str	r3, [r7, #208]
  43:../src/init.c **** 	//set output type
  44:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
  64              		.loc 1 44 0
  65 004a 4FF00003 		mov	r3, #0
  66 004e 87F8D630 		strb	r3, [r7, #214]
  45:../src/init.c **** 	//set pull-up
  46:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
  67              		.loc 1 46 0
  68 0052 4FF00203 		mov	r3, #2
  69 0056 87F8D730 		strb	r3, [r7, #215]
  47:../src/init.c **** 	//set pin mode to alternate function
  48:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
  70              		.loc 1 48 0
  71 005a 4FF00303 		mov	r3, #3
  72 005e 87F8D430 		strb	r3, [r7, #212]
  49:../src/init.c **** 	//set pin speed
  50:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  73              		.loc 1 50 0
  74 0062 4FF00003 		mov	r3, #0
  75 0066 87F8D530 		strb	r3, [r7, #213]
  51:../src/init.c **** 	//write mode to selected pins and selected port
  52:../src/init.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
  76              		.loc 1 52 0
  77 006a 4FF00000 		mov	r0, #0
  78 006e C4F20200 		movt	r0, 16386
  79 0072 07F1D003 		add	r3, r7, #208
  80 0076 1946     		mov	r1, r3
  81 0078 FFF7FEFF 		bl	GPIO_Init
  53:../src/init.c **** 
  54:../src/init.c **** 
  55:../src/init.c **** 	// A0 - A3, A6, A7 timer output
  56:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2);
  82              		.loc 1 56 0
  83 007c 4FF00000 		mov	r0, #0
  84 0080 C4F20200 		movt	r0, 16386
  85 0084 4FF00001 		mov	r1, #0
  86 0088 4FF00102 		mov	r2, #1
  87 008c FFF7FEFF 		bl	GPIO_PinAFConfig
  57:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
  88              		.loc 1 57 0
  89 0090 4FF00000 		mov	r0, #0
  90 0094 C4F20200 		movt	r0, 16386
  91 0098 4FF00101 		mov	r1, #1
  92 009c 4FF00102 		mov	r2, #1
  93 00a0 FFF7FEFF 		bl	GPIO_PinAFConfig
  58:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_TIM2);
  94              		.loc 1 58 0
  95 00a4 4FF00000 		mov	r0, #0
  96 00a8 C4F20200 		movt	r0, 16386
  97 00ac 4FF00201 		mov	r1, #2
  98 00b0 4FF00102 		mov	r2, #1
  99 00b4 FFF7FEFF 		bl	GPIO_PinAFConfig
  59:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_TIM2);
 100              		.loc 1 59 0
 101 00b8 4FF00000 		mov	r0, #0
 102 00bc C4F20200 		movt	r0, 16386
 103 00c0 4FF00301 		mov	r1, #3
 104 00c4 4FF00102 		mov	r2, #1
 105 00c8 FFF7FEFF 		bl	GPIO_PinAFConfig
  60:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);
 106              		.loc 1 60 0
 107 00cc 4FF00000 		mov	r0, #0
 108 00d0 C4F20200 		movt	r0, 16386
 109 00d4 4FF00601 		mov	r1, #6
 110 00d8 4FF00202 		mov	r2, #2
 111 00dc FFF7FEFF 		bl	GPIO_PinAFConfig
  61:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_TIM3);
 112              		.loc 1 61 0
 113 00e0 4FF00000 		mov	r0, #0
 114 00e4 C4F20200 		movt	r0, 16386
 115 00e8 4FF00701 		mov	r1, #7
 116 00ec 4FF00202 		mov	r2, #2
 117 00f0 FFF7FEFF 		bl	GPIO_PinAFConfig
  62:../src/init.c **** 
  63:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 | GPI
 118              		.loc 1 63 0
 119 00f4 4FF0CF03 		mov	r3, #207
 120 00f8 C7F8D030 		str	r3, [r7, #208]
  64:../src/init.c **** 	//set output type
  65:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 121              		.loc 1 65 0
 122 00fc 4FF00003 		mov	r3, #0
 123 0100 87F8D630 		strb	r3, [r7, #214]
  66:../src/init.c **** 	//set pull-up
  67:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 124              		.loc 1 67 0
 125 0104 4FF00203 		mov	r3, #2
 126 0108 87F8D730 		strb	r3, [r7, #215]
  68:../src/init.c **** 	//set pin mode to alternate function
  69:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 127              		.loc 1 69 0
 128 010c 4FF00203 		mov	r3, #2
 129 0110 87F8D430 		strb	r3, [r7, #212]
  70:../src/init.c **** 	//set pin speed
  71:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 130              		.loc 1 71 0
 131 0114 4FF00203 		mov	r3, #2
 132 0118 87F8D530 		strb	r3, [r7, #213]
  72:../src/init.c **** 	//write mode to selected pins and selected port
  73:../src/init.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 133              		.loc 1 73 0
 134 011c 4FF00000 		mov	r0, #0
 135 0120 C4F20200 		movt	r0, 16386
 136 0124 07F1D003 		add	r3, r7, #208
 137 0128 1946     		mov	r1, r3
 138 012a FFF7FEFF 		bl	GPIO_Init
  74:../src/init.c **** 
  75:../src/init.c **** 	//GPIO B
  76:../src/init.c **** 	//connect pins B0 and B1 to timer output
  77:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_TIM3);
 139              		.loc 1 77 0
 140 012e 4FF48060 		mov	r0, #1024
 141 0132 C4F20200 		movt	r0, 16386
 142 0136 4FF00001 		mov	r1, #0
 143 013a 4FF00202 		mov	r2, #2
 144 013e FFF7FEFF 		bl	GPIO_PinAFConfig
  78:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_TIM3);
 145              		.loc 1 78 0
 146 0142 4FF48060 		mov	r0, #1024
 147 0146 C4F20200 		movt	r0, 16386
 148 014a 4FF00101 		mov	r1, #1
 149 014e 4FF00202 		mov	r2, #2
 150 0152 FFF7FEFF 		bl	GPIO_PinAFConfig
  79:../src/init.c **** 	//select pins 0 and 1
  80:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 151              		.loc 1 80 0
 152 0156 4FF00303 		mov	r3, #3
 153 015a C7F8D030 		str	r3, [r7, #208]
  81:../src/init.c **** 	//set output type
  82:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 154              		.loc 1 82 0
 155 015e 4FF00003 		mov	r3, #0
 156 0162 87F8D630 		strb	r3, [r7, #214]
  83:../src/init.c **** 	//set pull-up
  84:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 157              		.loc 1 84 0
 158 0166 4FF00203 		mov	r3, #2
 159 016a 87F8D730 		strb	r3, [r7, #215]
  85:../src/init.c **** 	//set pin mode to alternate function
  86:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 160              		.loc 1 86 0
 161 016e 4FF00203 		mov	r3, #2
 162 0172 87F8D430 		strb	r3, [r7, #212]
  87:../src/init.c **** 	//set pin speed
  88:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 163              		.loc 1 88 0
 164 0176 4FF00203 		mov	r3, #2
 165 017a 87F8D530 		strb	r3, [r7, #213]
  89:../src/init.c **** 	//write mode to selected pins and selected port
  90:../src/init.c **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 166              		.loc 1 90 0
 167 017e 4FF48060 		mov	r0, #1024
 168 0182 C4F20200 		movt	r0, 16386
 169 0186 07F1D003 		add	r3, r7, #208
 170 018a 1946     		mov	r1, r3
 171 018c FFF7FEFF 		bl	GPIO_Init
  91:../src/init.c **** 
  92:../src/init.c **** 	//connect pins B6 and B7 to USART
  93:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 172              		.loc 1 93 0
 173 0190 4FF48060 		mov	r0, #1024
 174 0194 C4F20200 		movt	r0, 16386
 175 0198 4FF00601 		mov	r1, #6
 176 019c 4FF00702 		mov	r2, #7
 177 01a0 FFF7FEFF 		bl	GPIO_PinAFConfig
  94:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 178              		.loc 1 94 0
 179 01a4 4FF48060 		mov	r0, #1024
 180 01a8 C4F20200 		movt	r0, 16386
 181 01ac 4FF00701 		mov	r1, #7
 182 01b0 4FF00702 		mov	r2, #7
 183 01b4 FFF7FEFF 		bl	GPIO_PinAFConfig
  95:../src/init.c **** 	//select pins 6 and 7
  96:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 184              		.loc 1 96 0
 185 01b8 4FF0C003 		mov	r3, #192
 186 01bc C7F8D030 		str	r3, [r7, #208]
  97:../src/init.c **** 	//set output type
  98:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 187              		.loc 1 98 0
 188 01c0 4FF00003 		mov	r3, #0
 189 01c4 87F8D630 		strb	r3, [r7, #214]
  99:../src/init.c **** 	//set pull-up
 100:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 190              		.loc 1 100 0
 191 01c8 4FF00003 		mov	r3, #0
 192 01cc 87F8D730 		strb	r3, [r7, #215]
 101:../src/init.c **** 	//set pin mode to alternate function
 102:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 193              		.loc 1 102 0
 194 01d0 4FF00203 		mov	r3, #2
 195 01d4 87F8D430 		strb	r3, [r7, #212]
 103:../src/init.c **** 	//set pin speed
 104:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 196              		.loc 1 104 0
 197 01d8 4FF00203 		mov	r3, #2
 198 01dc 87F8D530 		strb	r3, [r7, #213]
 105:../src/init.c **** 	//write mode to selected pins and selected port
 106:../src/init.c **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 199              		.loc 1 106 0
 200 01e0 4FF48060 		mov	r0, #1024
 201 01e4 C4F20200 		movt	r0, 16386
 202 01e8 07F1D003 		add	r3, r7, #208
 203 01ec 1946     		mov	r1, r3
 204 01ee FFF7FEFF 		bl	GPIO_Init
 107:../src/init.c **** 
 108:../src/init.c **** 	// Connect pins B10 and B11 to I2C 2
 109:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
 205              		.loc 1 109 0
 206 01f2 4FF48060 		mov	r0, #1024
 207 01f6 C4F20200 		movt	r0, 16386
 208 01fa 4FF00A01 		mov	r1, #10
 209 01fe 4FF00402 		mov	r2, #4
 210 0202 FFF7FEFF 		bl	GPIO_PinAFConfig
 110:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
 211              		.loc 1 110 0
 212 0206 4FF48060 		mov	r0, #1024
 213 020a C4F20200 		movt	r0, 16386
 214 020e 4FF00B01 		mov	r1, #11
 215 0212 4FF00402 		mov	r2, #4
 216 0216 FFF7FEFF 		bl	GPIO_PinAFConfig
 111:../src/init.c **** 	// Select pins 10 and 11
 112:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 217              		.loc 1 112 0
 218 021a 4FF44063 		mov	r3, #3072
 219 021e C7F8D030 		str	r3, [r7, #208]
 113:../src/init.c **** 	//set output type
 114:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;	// open drain output
 220              		.loc 1 114 0
 221 0222 4FF00103 		mov	r3, #1
 222 0226 87F8D630 		strb	r3, [r7, #214]
 115:../src/init.c **** 	//set pull-up
 116:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 223              		.loc 1 116 0
 224 022a 4FF00103 		mov	r3, #1
 225 022e 87F8D730 		strb	r3, [r7, #215]
 117:../src/init.c **** 	//set pin mode to alternate function
 118:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 226              		.loc 1 118 0
 227 0232 4FF00203 		mov	r3, #2
 228 0236 87F8D430 		strb	r3, [r7, #212]
 119:../src/init.c **** 	//set pin speed
 120:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 229              		.loc 1 120 0
 230 023a 4FF00203 		mov	r3, #2
 231 023e 87F8D530 		strb	r3, [r7, #213]
 121:../src/init.c **** 	//write mode to selected pins and selected port
 122:../src/init.c **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 232              		.loc 1 122 0
 233 0242 4FF48060 		mov	r0, #1024
 234 0246 C4F20200 		movt	r0, 16386
 235 024a 07F1D003 		add	r3, r7, #208
 236 024e 1946     		mov	r1, r3
 237 0250 FFF7FEFF 		bl	GPIO_Init
 123:../src/init.c **** 
 124:../src/init.c **** 	//GPIO C
 125:../src/init.c **** 	//connect pins C0, C1, C2, C3 to ADC input
 126:../src/init.c **** 	//select pins 0, 1, 2, 3
 127:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 238              		.loc 1 127 0
 239 0254 4FF00F03 		mov	r3, #15
 240 0258 C7F8D030 		str	r3, [r7, #208]
 128:../src/init.c **** 	//set output type
 129:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 241              		.loc 1 129 0
 242 025c 4FF00003 		mov	r3, #0
 243 0260 87F8D630 		strb	r3, [r7, #214]
 130:../src/init.c **** 	//set pull-up
 131:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 244              		.loc 1 131 0
 245 0264 4FF00003 		mov	r3, #0
 246 0268 87F8D730 		strb	r3, [r7, #215]
 132:../src/init.c **** 	//set pin mode to alternate function
 133:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 247              		.loc 1 133 0
 248 026c 4FF00303 		mov	r3, #3
 249 0270 87F8D430 		strb	r3, [r7, #212]
 134:../src/init.c **** 	//set pin speed
 135:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 250              		.loc 1 135 0
 251 0274 4FF00103 		mov	r3, #1
 252 0278 87F8D530 		strb	r3, [r7, #213]
 136:../src/init.c **** 	//write mode to selected pins and selected port
 137:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 253              		.loc 1 137 0
 254 027c 4FF40060 		mov	r0, #2048
 255 0280 C4F20200 		movt	r0, 16386
 256 0284 07F1D003 		add	r3, r7, #208
 257 0288 1946     		mov	r1, r3
 258 028a FFF7FEFF 		bl	GPIO_Init
 138:../src/init.c **** 
 139:../src/init.c **** 	//connect pins C6, C7, C8, C9 to timer input
 140:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_TIM8);
 259              		.loc 1 140 0
 260 028e 4FF40060 		mov	r0, #2048
 261 0292 C4F20200 		movt	r0, 16386
 262 0296 4FF00601 		mov	r1, #6
 263 029a 4FF00302 		mov	r2, #3
 264 029e FFF7FEFF 		bl	GPIO_PinAFConfig
 141:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_TIM8);
 265              		.loc 1 141 0
 266 02a2 4FF40060 		mov	r0, #2048
 267 02a6 C4F20200 		movt	r0, 16386
 268 02aa 4FF00701 		mov	r1, #7
 269 02ae 4FF00302 		mov	r2, #3
 270 02b2 FFF7FEFF 		bl	GPIO_PinAFConfig
 142:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_TIM8);
 271              		.loc 1 142 0
 272 02b6 4FF40060 		mov	r0, #2048
 273 02ba C4F20200 		movt	r0, 16386
 274 02be 4FF00801 		mov	r1, #8
 275 02c2 4FF00302 		mov	r2, #3
 276 02c6 FFF7FEFF 		bl	GPIO_PinAFConfig
 143:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_TIM8);
 277              		.loc 1 143 0
 278 02ca 4FF40060 		mov	r0, #2048
 279 02ce C4F20200 		movt	r0, 16386
 280 02d2 4FF00901 		mov	r1, #9
 281 02d6 4FF00302 		mov	r2, #3
 282 02da FFF7FEFF 		bl	GPIO_PinAFConfig
 144:../src/init.c **** 	//select pins 0 and 1
 145:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
 283              		.loc 1 145 0
 284 02de 4FF47073 		mov	r3, #960
 285 02e2 C7F8D030 		str	r3, [r7, #208]
 146:../src/init.c **** 	//set output type
 147:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 286              		.loc 1 147 0
 287 02e6 4FF00003 		mov	r3, #0
 288 02ea 87F8D630 		strb	r3, [r7, #214]
 148:../src/init.c **** 	//set pull-up
 149:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 289              		.loc 1 149 0
 290 02ee 4FF00203 		mov	r3, #2
 291 02f2 87F8D730 		strb	r3, [r7, #215]
 150:../src/init.c **** 	//set pin mode to alternate function
 151:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 292              		.loc 1 151 0
 293 02f6 4FF00203 		mov	r3, #2
 294 02fa 87F8D430 		strb	r3, [r7, #212]
 152:../src/init.c **** 	//set pin speed
 153:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 295              		.loc 1 153 0
 296 02fe 4FF00203 		mov	r3, #2
 297 0302 87F8D530 		strb	r3, [r7, #213]
 154:../src/init.c **** 	//write mode to selected pins and selected port
 155:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 298              		.loc 1 155 0
 299 0306 4FF40060 		mov	r0, #2048
 300 030a C4F20200 		movt	r0, 16386
 301 030e 07F1D003 		add	r3, r7, #208
 302 0312 1946     		mov	r1, r3
 303 0314 FFF7FEFF 		bl	GPIO_Init
 156:../src/init.c **** 
 157:../src/init.c **** 	//connect pins C10 and C11 to USART
 158:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART3);
 304              		.loc 1 158 0
 305 0318 4FF40060 		mov	r0, #2048
 306 031c C4F20200 		movt	r0, 16386
 307 0320 4FF00A01 		mov	r1, #10
 308 0324 4FF00702 		mov	r2, #7
 309 0328 FFF7FEFF 		bl	GPIO_PinAFConfig
 159:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_USART3);
 310              		.loc 1 159 0
 311 032c 4FF40060 		mov	r0, #2048
 312 0330 C4F20200 		movt	r0, 16386
 313 0334 4FF00B01 		mov	r1, #11
 314 0338 4FF00702 		mov	r2, #7
 315 033c FFF7FEFF 		bl	GPIO_PinAFConfig
 160:../src/init.c **** 	//select pins 10 and 11
 161:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 316              		.loc 1 161 0
 317 0340 4FF44063 		mov	r3, #3072
 318 0344 C7F8D030 		str	r3, [r7, #208]
 162:../src/init.c **** 	//set output type
 163:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 319              		.loc 1 163 0
 320 0348 4FF00003 		mov	r3, #0
 321 034c 87F8D630 		strb	r3, [r7, #214]
 164:../src/init.c **** 	//set pull-up
 165:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 322              		.loc 1 165 0
 323 0350 4FF00003 		mov	r3, #0
 324 0354 87F8D730 		strb	r3, [r7, #215]
 166:../src/init.c **** 	//set pin mode to alternate function
 167:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 325              		.loc 1 167 0
 326 0358 4FF00203 		mov	r3, #2
 327 035c 87F8D430 		strb	r3, [r7, #212]
 168:../src/init.c **** 	//set pin speed
 169:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 328              		.loc 1 169 0
 329 0360 4FF00203 		mov	r3, #2
 330 0364 87F8D530 		strb	r3, [r7, #213]
 170:../src/init.c **** 	//write mode to selected pins and selected port
 171:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 331              		.loc 1 171 0
 332 0368 4FF40060 		mov	r0, #2048
 333 036c C4F20200 		movt	r0, 16386
 334 0370 07F1D003 		add	r3, r7, #208
 335 0374 1946     		mov	r1, r3
 336 0376 FFF7FEFF 		bl	GPIO_Init
 172:../src/init.c **** 	// Set C12 as input
 173:../src/init.c **** 	// Select C12
 174:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 337              		.loc 1 174 0
 338 037a 4FF48053 		mov	r3, #4096
 339 037e C7F8D030 		str	r3, [r7, #208]
 175:../src/init.c **** 	//set output type
 176:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 340              		.loc 1 176 0
 341 0382 4FF00003 		mov	r3, #0
 342 0386 87F8D630 		strb	r3, [r7, #214]
 177:../src/init.c **** 	//set pull-up
 178:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 343              		.loc 1 178 0
 344 038a 4FF00003 		mov	r3, #0
 345 038e 87F8D730 		strb	r3, [r7, #215]
 179:../src/init.c **** 	//set pin mode to alternate function
 180:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 346              		.loc 1 180 0
 347 0392 4FF00003 		mov	r3, #0
 348 0396 87F8D430 		strb	r3, [r7, #212]
 181:../src/init.c **** 	//set pin speed
 182:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 349              		.loc 1 182 0
 350 039a 4FF00003 		mov	r3, #0
 351 039e 87F8D530 		strb	r3, [r7, #213]
 183:../src/init.c **** 	//write mode to selected pins and selected port
 184:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 352              		.loc 1 184 0
 353 03a2 4FF40060 		mov	r0, #2048
 354 03a6 C4F20200 		movt	r0, 16386
 355 03aa 07F1D003 		add	r3, r7, #208
 356 03ae 1946     		mov	r1, r3
 357 03b0 FFF7FEFF 		bl	GPIO_Init
 185:../src/init.c **** 	// Set C4 as output
 186:../src/init.c **** 	// Select C4
 187:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 358              		.loc 1 187 0
 359 03b4 4FF01003 		mov	r3, #16
 360 03b8 C7F8D030 		str	r3, [r7, #208]
 188:../src/init.c **** 	//set output type
 189:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 361              		.loc 1 189 0
 362 03bc 4FF00003 		mov	r3, #0
 363 03c0 87F8D630 		strb	r3, [r7, #214]
 190:../src/init.c **** 	//set pull-up
 191:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 364              		.loc 1 191 0
 365 03c4 4FF00203 		mov	r3, #2
 366 03c8 87F8D730 		strb	r3, [r7, #215]
 192:../src/init.c **** 	//set pin mode to alternate function
 193:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 367              		.loc 1 193 0
 368 03cc 4FF00103 		mov	r3, #1
 369 03d0 87F8D430 		strb	r3, [r7, #212]
 194:../src/init.c **** 	//set pin speed
 195:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 370              		.loc 1 195 0
 371 03d4 4FF00003 		mov	r3, #0
 372 03d8 87F8D530 		strb	r3, [r7, #213]
 196:../src/init.c **** 	//write mode to selected pins and selected port
 197:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 373              		.loc 1 197 0
 374 03dc 4FF40060 		mov	r0, #2048
 375 03e0 C4F20200 		movt	r0, 16386
 376 03e4 07F1D003 		add	r3, r7, #208
 377 03e8 1946     		mov	r1, r3
 378 03ea FFF7FEFF 		bl	GPIO_Init
 198:../src/init.c **** 	// Set pin to 0
 199:../src/init.c **** 	GPIO_WriteBit(GPIOC, GPIO_Pin_4, 0);
 379              		.loc 1 199 0
 380 03ee 4FF40060 		mov	r0, #2048
 381 03f2 C4F20200 		movt	r0, 16386
 382 03f6 4FF01001 		mov	r1, #16
 383 03fa 4FF00002 		mov	r2, #0
 384 03fe FFF7FEFF 		bl	GPIO_WriteBit
 200:../src/init.c **** 	// Set C5 as input
 201:../src/init.c **** 	// Select C5
 202:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 385              		.loc 1 202 0
 386 0402 4FF02003 		mov	r3, #32
 387 0406 C7F8D030 		str	r3, [r7, #208]
 203:../src/init.c **** 	//set output type
 204:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 388              		.loc 1 204 0
 389 040a 4FF00003 		mov	r3, #0
 390 040e 87F8D630 		strb	r3, [r7, #214]
 205:../src/init.c **** 	//set pull-up
 206:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 391              		.loc 1 206 0
 392 0412 4FF00003 		mov	r3, #0
 393 0416 87F8D730 		strb	r3, [r7, #215]
 207:../src/init.c **** 	//set pin mode to alternate function
 208:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 394              		.loc 1 208 0
 395 041a 4FF00003 		mov	r3, #0
 396 041e 87F8D430 		strb	r3, [r7, #212]
 209:../src/init.c **** 	//set pin speed
 210:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 397              		.loc 1 210 0
 398 0422 4FF00003 		mov	r3, #0
 399 0426 87F8D530 		strb	r3, [r7, #213]
 211:../src/init.c **** 	//write mode to selected pins and selected port
 212:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 400              		.loc 1 212 0
 401 042a 4FF40060 		mov	r0, #2048
 402 042e C4F20200 		movt	r0, 16386
 403 0432 07F1D003 		add	r3, r7, #208
 404 0436 1946     		mov	r1, r3
 405 0438 FFF7FEFF 		bl	GPIO_Init
 213:../src/init.c **** 	// Set C15 as output, set to 1, pull - up
 214:../src/init.c **** 	// Select C15
 215:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 406              		.loc 1 215 0
 407 043c 4FF40043 		mov	r3, #32768
 408 0440 C7F8D030 		str	r3, [r7, #208]
 216:../src/init.c **** 	//set output type
 217:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 409              		.loc 1 217 0
 410 0444 4FF00003 		mov	r3, #0
 411 0448 87F8D630 		strb	r3, [r7, #214]
 218:../src/init.c **** 	//set pull-up
 219:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 412              		.loc 1 219 0
 413 044c 4FF00103 		mov	r3, #1
 414 0450 87F8D730 		strb	r3, [r7, #215]
 220:../src/init.c **** 	//set pin mode to alternate function
 221:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 415              		.loc 1 221 0
 416 0454 4FF00103 		mov	r3, #1
 417 0458 87F8D430 		strb	r3, [r7, #212]
 222:../src/init.c **** 	//set pin speed
 223:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 418              		.loc 1 223 0
 419 045c 4FF00003 		mov	r3, #0
 420 0460 87F8D530 		strb	r3, [r7, #213]
 224:../src/init.c **** 	//write mode to selected pins and selected port
 225:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 421              		.loc 1 225 0
 422 0464 4FF40060 		mov	r0, #2048
 423 0468 C4F20200 		movt	r0, 16386
 424 046c 07F1D003 		add	r3, r7, #208
 425 0470 1946     		mov	r1, r3
 426 0472 FFF7FEFF 		bl	GPIO_Init
 226:../src/init.c **** 	// Set pin to 1
 227:../src/init.c **** 	GPIO_WriteBit(GPIOC, GPIO_Pin_15, 1);
 427              		.loc 1 227 0
 428 0476 4FF40060 		mov	r0, #2048
 429 047a C4F20200 		movt	r0, 16386
 430 047e 4FF40041 		mov	r1, #32768
 431 0482 4FF00102 		mov	r2, #1
 432 0486 FFF7FEFF 		bl	GPIO_WriteBit
 228:../src/init.c **** 
 229:../src/init.c **** 
 230:../src/init.c **** 	//GPIO D
 231:../src/init.c **** 	//connect pins D5 and D6 to USART2
 232:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
 433              		.loc 1 232 0
 434 048a 4FF44060 		mov	r0, #3072
 435 048e C4F20200 		movt	r0, 16386
 436 0492 4FF00501 		mov	r1, #5
 437 0496 4FF00702 		mov	r2, #7
 438 049a FFF7FEFF 		bl	GPIO_PinAFConfig
 233:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);
 439              		.loc 1 233 0
 440 049e 4FF44060 		mov	r0, #3072
 441 04a2 C4F20200 		movt	r0, 16386
 442 04a6 4FF00601 		mov	r1, #6
 443 04aa 4FF00702 		mov	r2, #7
 444 04ae FFF7FEFF 		bl	GPIO_PinAFConfig
 234:../src/init.c **** 	//select pins 5 and 6
 235:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
 445              		.loc 1 235 0
 446 04b2 4FF06003 		mov	r3, #96
 447 04b6 C7F8D030 		str	r3, [r7, #208]
 236:../src/init.c **** 	//set output type
 237:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 448              		.loc 1 237 0
 449 04ba 4FF00003 		mov	r3, #0
 450 04be 87F8D630 		strb	r3, [r7, #214]
 238:../src/init.c **** 	//set pull-up
 239:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 451              		.loc 1 239 0
 452 04c2 4FF00003 		mov	r3, #0
 453 04c6 87F8D730 		strb	r3, [r7, #215]
 240:../src/init.c **** 	//set pin mode to alternate function
 241:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 454              		.loc 1 241 0
 455 04ca 4FF00203 		mov	r3, #2
 456 04ce 87F8D430 		strb	r3, [r7, #212]
 242:../src/init.c **** 	//set pin speed
 243:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 457              		.loc 1 243 0
 458 04d2 4FF00203 		mov	r3, #2
 459 04d6 87F8D530 		strb	r3, [r7, #213]
 244:../src/init.c **** 	//write mode to selected pins and selected port
 245:../src/init.c **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 460              		.loc 1 245 0
 461 04da 4FF44060 		mov	r0, #3072
 462 04de C4F20200 		movt	r0, 16386
 463 04e2 07F1D003 		add	r3, r7, #208
 464 04e6 1946     		mov	r1, r3
 465 04e8 FFF7FEFF 		bl	GPIO_Init
 246:../src/init.c **** 	// Pins 8, 9, 10 as output low
 247:../src/init.c **** 	//select pins 8,9,10
 248:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10;
 466              		.loc 1 248 0
 467 04ec 4FF4E063 		mov	r3, #1792
 468 04f0 C7F8D030 		str	r3, [r7, #208]
 249:../src/init.c **** 	//set output type
 250:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 469              		.loc 1 250 0
 470 04f4 4FF00003 		mov	r3, #0
 471 04f8 87F8D630 		strb	r3, [r7, #214]
 251:../src/init.c **** 	//set pull-up
 252:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 472              		.loc 1 252 0
 473 04fc 4FF00003 		mov	r3, #0
 474 0500 87F8D730 		strb	r3, [r7, #215]
 253:../src/init.c **** 	//set pin mode to alternate function
 254:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 475              		.loc 1 254 0
 476 0504 4FF00103 		mov	r3, #1
 477 0508 87F8D430 		strb	r3, [r7, #212]
 255:../src/init.c **** 	//set pin speed
 256:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 478              		.loc 1 256 0
 479 050c 4FF00003 		mov	r3, #0
 480 0510 87F8D530 		strb	r3, [r7, #213]
 257:../src/init.c **** 	//write mode to selected pins and selected port
 258:../src/init.c **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 481              		.loc 1 258 0
 482 0514 4FF44060 		mov	r0, #3072
 483 0518 C4F20200 		movt	r0, 16386
 484 051c 07F1D003 		add	r3, r7, #208
 485 0520 1946     		mov	r1, r3
 486 0522 FFF7FEFF 		bl	GPIO_Init
 259:../src/init.c **** 	// Set pins to 0
 260:../src/init.c **** 	GPIO_WriteBit(GPIOD, GPIO_Pin_8, 0);
 487              		.loc 1 260 0
 488 0526 4FF44060 		mov	r0, #3072
 489 052a C4F20200 		movt	r0, 16386
 490 052e 4FF48071 		mov	r1, #256
 491 0532 4FF00002 		mov	r2, #0
 492 0536 FFF7FEFF 		bl	GPIO_WriteBit
 261:../src/init.c **** 	GPIO_WriteBit(GPIOD, GPIO_Pin_9, 0);
 493              		.loc 1 261 0
 494 053a 4FF44060 		mov	r0, #3072
 495 053e C4F20200 		movt	r0, 16386
 496 0542 4FF40071 		mov	r1, #512
 497 0546 4FF00002 		mov	r2, #0
 498 054a FFF7FEFF 		bl	GPIO_WriteBit
 262:../src/init.c **** 	GPIO_WriteBit(GPIOD, GPIO_Pin_10, 0);
 499              		.loc 1 262 0
 500 054e 4FF44060 		mov	r0, #3072
 501 0552 C4F20200 		movt	r0, 16386
 502 0556 4FF48061 		mov	r1, #1024
 503 055a 4FF00002 		mov	r2, #0
 504 055e FFF7FEFF 		bl	GPIO_WriteBit
 263:../src/init.c **** 
 264:../src/init.c **** 	//configure structure
 265:../src/init.c **** 	//select pins
 266:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 505              		.loc 1 266 0
 506 0562 4FF00103 		mov	r3, #1
 507 0566 C7F8D030 		str	r3, [r7, #208]
 267:../src/init.c **** 	//set output type
 268:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 508              		.loc 1 268 0
 509 056a 4FF00003 		mov	r3, #0
 510 056e 87F8D630 		strb	r3, [r7, #214]
 269:../src/init.c **** 	//set pin speed
 270:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 511              		.loc 1 270 0
 512 0572 4FF00203 		mov	r3, #2
 513 0576 87F8D530 		strb	r3, [r7, #213]
 271:../src/init.c **** 	//set pull-up
 272:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 514              		.loc 1 272 0
 515 057a 4FF00003 		mov	r3, #0
 516 057e 87F8D730 		strb	r3, [r7, #215]
 273:../src/init.c **** 	//set pin mode
 274:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 517              		.loc 1 274 0
 518 0582 4FF00103 		mov	r3, #1
 519 0586 87F8D430 		strb	r3, [r7, #212]
 275:../src/init.c **** 	//write mode to selected pins and selected port
 276:../src/init.c **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 520              		.loc 1 276 0
 521 058a 4FF44060 		mov	r0, #3072
 522 058e C4F20200 		movt	r0, 16386
 523 0592 07F1D003 		add	r3, r7, #208
 524 0596 1946     		mov	r1, r3
 525 0598 FFF7FEFF 		bl	GPIO_Init
 277:../src/init.c **** 
 278:../src/init.c **** 	//connect pins D12, D13, D14, D15 to timer input
 279:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 526              		.loc 1 279 0
 527 059c 4FF44060 		mov	r0, #3072
 528 05a0 C4F20200 		movt	r0, 16386
 529 05a4 4FF00C01 		mov	r1, #12
 530 05a8 4FF00202 		mov	r2, #2
 531 05ac FFF7FEFF 		bl	GPIO_PinAFConfig
 280:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 532              		.loc 1 280 0
 533 05b0 4FF44060 		mov	r0, #3072
 534 05b4 C4F20200 		movt	r0, 16386
 535 05b8 4FF00D01 		mov	r1, #13
 536 05bc 4FF00202 		mov	r2, #2
 537 05c0 FFF7FEFF 		bl	GPIO_PinAFConfig
 281:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 538              		.loc 1 281 0
 539 05c4 4FF44060 		mov	r0, #3072
 540 05c8 C4F20200 		movt	r0, 16386
 541 05cc 4FF00E01 		mov	r1, #14
 542 05d0 4FF00202 		mov	r2, #2
 543 05d4 FFF7FEFF 		bl	GPIO_PinAFConfig
 282:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 544              		.loc 1 282 0
 545 05d8 4FF44060 		mov	r0, #3072
 546 05dc C4F20200 		movt	r0, 16386
 547 05e0 4FF00F01 		mov	r1, #15
 548 05e4 4FF00202 		mov	r2, #2
 549 05e8 FFF7FEFF 		bl	GPIO_PinAFConfig
 283:../src/init.c **** 	//select pins 12 - 15
 284:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 550              		.loc 1 284 0
 551 05ec 4FF47043 		mov	r3, #61440
 552 05f0 C7F8D030 		str	r3, [r7, #208]
 285:../src/init.c **** 	//set output type
 286:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 553              		.loc 1 286 0
 554 05f4 4FF00003 		mov	r3, #0
 555 05f8 87F8D630 		strb	r3, [r7, #214]
 287:../src/init.c **** 	//set pull-up
 288:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 556              		.loc 1 288 0
 557 05fc 4FF00203 		mov	r3, #2
 558 0600 87F8D730 		strb	r3, [r7, #215]
 289:../src/init.c **** 	//set pin mode to alternate function
 290:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 559              		.loc 1 290 0
 560 0604 4FF00203 		mov	r3, #2
 561 0608 87F8D430 		strb	r3, [r7, #212]
 291:../src/init.c **** 	//set pin speed
 292:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 562              		.loc 1 292 0
 563 060c 4FF00203 		mov	r3, #2
 564 0610 87F8D530 		strb	r3, [r7, #213]
 293:../src/init.c **** 	//write mode to selected pins and selected port
 294:../src/init.c **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 565              		.loc 1 294 0
 566 0614 4FF44060 		mov	r0, #3072
 567 0618 C4F20200 		movt	r0, 16386
 568 061c 07F1D003 		add	r3, r7, #208
 569 0620 1946     		mov	r1, r3
 570 0622 FFF7FEFF 		bl	GPIO_Init
 295:../src/init.c **** 
 296:../src/init.c **** 	//GPIO E
 297:../src/init.c **** 	//connect pin E5 to timer input
 298:../src/init.c **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource5, GPIO_AF_TIM9);
 571              		.loc 1 298 0
 572 0626 4FF48050 		mov	r0, #4096
 573 062a C4F20200 		movt	r0, 16386
 574 062e 4FF00501 		mov	r1, #5
 575 0632 4FF00302 		mov	r2, #3
 576 0636 FFF7FEFF 		bl	GPIO_PinAFConfig
 299:../src/init.c **** 	//select pins 12 - 15
 300:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 577              		.loc 1 300 0
 578 063a 4FF02003 		mov	r3, #32
 579 063e C7F8D030 		str	r3, [r7, #208]
 301:../src/init.c **** 	//set output type
 302:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 580              		.loc 1 302 0
 581 0642 4FF00003 		mov	r3, #0
 582 0646 87F8D630 		strb	r3, [r7, #214]
 303:../src/init.c **** 	//set pull-up
 304:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 583              		.loc 1 304 0
 584 064a 4FF00203 		mov	r3, #2
 585 064e 87F8D730 		strb	r3, [r7, #215]
 305:../src/init.c **** 	//set pin mode to alternate function
 306:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 586              		.loc 1 306 0
 587 0652 4FF00203 		mov	r3, #2
 588 0656 87F8D430 		strb	r3, [r7, #212]
 307:../src/init.c **** 	//set pin speed
 308:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 589              		.loc 1 308 0
 590 065a 4FF00203 		mov	r3, #2
 591 065e 87F8D530 		strb	r3, [r7, #213]
 309:../src/init.c **** 	//write mode to selected pins and selected port
 310:../src/init.c **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 592              		.loc 1 310 0
 593 0662 4FF48050 		mov	r0, #4096
 594 0666 C4F20200 		movt	r0, 16386
 595 066a 07F1D003 		add	r3, r7, #208
 596 066e 1946     		mov	r1, r3
 597 0670 FFF7FEFF 		bl	GPIO_Init
 311:../src/init.c **** 
 312:../src/init.c **** 	//config GPIOE pins 9,11,13,14 for output compare
 313:../src/init.c **** 	//set AF pin source to TIM1
 314:../src/init.c **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource9, GPIO_AF_TIM1);
 598              		.loc 1 314 0
 599 0674 4FF48050 		mov	r0, #4096
 600 0678 C4F20200 		movt	r0, 16386
 601 067c 4FF00901 		mov	r1, #9
 602 0680 4FF00102 		mov	r2, #1
 603 0684 FFF7FEFF 		bl	GPIO_PinAFConfig
 315:../src/init.c **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_TIM1);
 604              		.loc 1 315 0
 605 0688 4FF48050 		mov	r0, #4096
 606 068c C4F20200 		movt	r0, 16386
 607 0690 4FF00B01 		mov	r1, #11
 608 0694 4FF00102 		mov	r2, #1
 609 0698 FFF7FEFF 		bl	GPIO_PinAFConfig
 316:../src/init.c **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_TIM1);
 610              		.loc 1 316 0
 611 069c 4FF48050 		mov	r0, #4096
 612 06a0 C4F20200 		movt	r0, 16386
 613 06a4 4FF00D01 		mov	r1, #13
 614 06a8 4FF00102 		mov	r2, #1
 615 06ac FFF7FEFF 		bl	GPIO_PinAFConfig
 317:../src/init.c **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_TIM1);
 616              		.loc 1 317 0
 617 06b0 4FF48050 		mov	r0, #4096
 618 06b4 C4F20200 		movt	r0, 16386
 619 06b8 4FF00E01 		mov	r1, #14
 620 06bc 4FF00102 		mov	r2, #1
 621 06c0 FFF7FEFF 		bl	GPIO_PinAFConfig
 318:../src/init.c **** 	//configure structure
 319:../src/init.c **** 	//select pins
 320:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_14;
 622              		.loc 1 320 0
 623 06c4 4FF4D443 		mov	r3, #27136
 624 06c8 C7F8D030 		str	r3, [r7, #208]
 321:../src/init.c **** 	//set output type
 322:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 625              		.loc 1 322 0
 626 06cc 4FF00003 		mov	r3, #0
 627 06d0 87F8D630 		strb	r3, [r7, #214]
 323:../src/init.c **** 	//set pin speed
 324:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 628              		.loc 1 324 0
 629 06d4 4FF00203 		mov	r3, #2
 630 06d8 87F8D530 		strb	r3, [r7, #213]
 325:../src/init.c **** 	//set pull-up
 326:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 631              		.loc 1 326 0
 632 06dc 4FF00203 		mov	r3, #2
 633 06e0 87F8D730 		strb	r3, [r7, #215]
 327:../src/init.c **** 	//set pin mode
 328:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 634              		.loc 1 328 0
 635 06e4 4FF00203 		mov	r3, #2
 636 06e8 87F8D430 		strb	r3, [r7, #212]
 329:../src/init.c **** 	//write mode to selected pins and selected port
 330:../src/init.c **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 637              		.loc 1 330 0
 638 06ec 4FF48050 		mov	r0, #4096
 639 06f0 C4F20200 		movt	r0, 16386
 640 06f4 07F1D003 		add	r3, r7, #208
 641 06f8 1946     		mov	r1, r3
 642 06fa FFF7FEFF 		bl	GPIO_Init
 331:../src/init.c **** 
 332:../src/init.c **** 
 333:../src/init.c **** 	// Configure all the timers
 334:../src/init.c **** 
 335:../src/init.c **** 	// Timer 1
 336:../src/init.c **** 	// Enable clock(s)
 337:../src/init.c **** 	// Clock = 84 MHz
 338:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 643              		.loc 1 338 0
 644 06fe 4FF00100 		mov	r0, #1
 645 0702 4FF00101 		mov	r1, #1
 646 0706 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 339:../src/init.c **** 	// Populate structure
 340:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 647              		.loc 1 340 0
 648 070a 4FF00003 		mov	r3, #0
 649 070e A7F8CC30 		strh	r3, [r7, #204]	@ movhi
 341:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 650              		.loc 1 341 0
 651 0712 4FF00003 		mov	r3, #0
 652 0716 A7F8C630 		strh	r3, [r7, #198]	@ movhi
 342:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM1_PERIOD;
 653              		.loc 1 342 0
 654 071a 47F6C853 		movw	r3, #32200
 655 071e C7F8C830 		str	r3, [r7, #200]
 343:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM1_PRESCALER;
 656              		.loc 1 343 0
 657 0722 4FF05403 		mov	r3, #84
 658 0726 A7F8C430 		strh	r3, [r7, #196]	@ movhi
 344:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 659              		.loc 1 344 0
 660 072a 4FF00003 		mov	r3, #0
 661 072e 87F8CE30 		strb	r3, [r7, #206]
 345:../src/init.c **** 	// Configure timer 1
 346:../src/init.c **** 	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStruct);
 662              		.loc 1 346 0
 663 0732 4FF00000 		mov	r0, #0
 664 0736 C4F20100 		movt	r0, 16385
 665 073a 07F1C403 		add	r3, r7, #196
 666 073e 1946     		mov	r1, r3
 667 0740 FFF7FEFF 		bl	TIM_TimeBaseInit
 347:../src/init.c **** 
 348:../src/init.c **** 	// Populate structure
 349:../src/init.c **** 	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 668              		.loc 1 349 0
 669 0744 4FF06003 		mov	r3, #96
 670 0748 A7F8A430 		strh	r3, [r7, #164]	@ movhi
 350:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 671              		.loc 1 350 0
 672 074c 4FF00103 		mov	r3, #1
 673 0750 A7F8A630 		strh	r3, [r7, #166]	@ movhi
 351:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputNState = TIM_OutputNState_Disable;
 674              		.loc 1 351 0
 675 0754 4FF00003 		mov	r3, #0
 676 0758 A7F8A830 		strh	r3, [r7, #168]	@ movhi
 352:../src/init.c **** 	TIM_OCInitStruct.TIM_Pulse = TIM1_PULSE;
 677              		.loc 1 352 0
 678 075c 40F63403 		movw	r3, #2100
 679 0760 C7F8AC30 		str	r3, [r7, #172]
 353:../src/init.c **** 	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 680              		.loc 1 353 0
 681 0764 4FF00003 		mov	r3, #0
 682 0768 A7F8B030 		strh	r3, [r7, #176]	@ movhi
 354:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNPolarity = TIM_OCNPolarity_High;
 683              		.loc 1 354 0
 684 076c 4FF00003 		mov	r3, #0
 685 0770 A7F8B230 		strh	r3, [r7, #178]	@ movhi
 355:../src/init.c **** 	TIM_OCInitStruct.TIM_OCIdleState = TIM_OCIdleState_Reset;
 686              		.loc 1 355 0
 687 0774 4FF00003 		mov	r3, #0
 688 0778 A7F8B430 		strh	r3, [r7, #180]	@ movhi
 356:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 689              		.loc 1 356 0
 690 077c 4FF00003 		mov	r3, #0
 691 0780 A7F8B630 		strh	r3, [r7, #182]	@ movhi
 357:../src/init.c **** 	// Configure output compare, channel 1
 358:../src/init.c **** 	TIM_OC1Init(TIM1, &TIM_OCInitStruct);
 692              		.loc 1 358 0
 693 0784 4FF00000 		mov	r0, #0
 694 0788 C4F20100 		movt	r0, 16385
 695 078c 07F1A403 		add	r3, r7, #164
 696 0790 1946     		mov	r1, r3
 697 0792 FFF7FEFF 		bl	TIM_OC1Init
 359:../src/init.c **** 	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 698              		.loc 1 359 0
 699 0796 4FF00000 		mov	r0, #0
 700 079a C4F20100 		movt	r0, 16385
 701 079e 4FF00801 		mov	r1, #8
 702 07a2 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 360:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 703              		.loc 1 360 0
 704 07a6 4FF00103 		mov	r3, #1
 705 07aa A7F8A630 		strh	r3, [r7, #166]	@ movhi
 361:../src/init.c **** 	TIM_OC2Init(TIM1, &TIM_OCInitStruct);
 706              		.loc 1 361 0
 707 07ae 4FF00000 		mov	r0, #0
 708 07b2 C4F20100 		movt	r0, 16385
 709 07b6 07F1A403 		add	r3, r7, #164
 710 07ba 1946     		mov	r1, r3
 711 07bc FFF7FEFF 		bl	TIM_OC2Init
 362:../src/init.c **** 	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 712              		.loc 1 362 0
 713 07c0 4FF00000 		mov	r0, #0
 714 07c4 C4F20100 		movt	r0, 16385
 715 07c8 4FF00801 		mov	r1, #8
 716 07cc FFF7FEFF 		bl	TIM_OC2PreloadConfig
 363:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 717              		.loc 1 363 0
 718 07d0 4FF00103 		mov	r3, #1
 719 07d4 A7F8A630 		strh	r3, [r7, #166]	@ movhi
 364:../src/init.c **** 	TIM_OC3Init(TIM1, &TIM_OCInitStruct);
 720              		.loc 1 364 0
 721 07d8 4FF00000 		mov	r0, #0
 722 07dc C4F20100 		movt	r0, 16385
 723 07e0 07F1A403 		add	r3, r7, #164
 724 07e4 1946     		mov	r1, r3
 725 07e6 FFF7FEFF 		bl	TIM_OC3Init
 365:../src/init.c **** 	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 726              		.loc 1 365 0
 727 07ea 4FF00000 		mov	r0, #0
 728 07ee C4F20100 		movt	r0, 16385
 729 07f2 4FF00801 		mov	r1, #8
 730 07f6 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 366:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 731              		.loc 1 366 0
 732 07fa 4FF00103 		mov	r3, #1
 733 07fe A7F8A630 		strh	r3, [r7, #166]	@ movhi
 367:../src/init.c **** 	TIM_OC4Init(TIM1, &TIM_OCInitStruct);
 734              		.loc 1 367 0
 735 0802 4FF00000 		mov	r0, #0
 736 0806 C4F20100 		movt	r0, 16385
 737 080a 07F1A403 		add	r3, r7, #164
 738 080e 1946     		mov	r1, r3
 739 0810 FFF7FEFF 		bl	TIM_OC4Init
 368:../src/init.c **** 	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 740              		.loc 1 368 0
 741 0814 4FF00000 		mov	r0, #0
 742 0818 C4F20100 		movt	r0, 16385
 743 081c 4FF00801 		mov	r1, #8
 744 0820 FFF7FEFF 		bl	TIM_OC4PreloadConfig
 369:../src/init.c **** 
 370:../src/init.c **** 	TIM_ARRPreloadConfig(TIM1, ENABLE);
 745              		.loc 1 370 0
 746 0824 4FF00000 		mov	r0, #0
 747 0828 C4F20100 		movt	r0, 16385
 748 082c 4FF00101 		mov	r1, #1
 749 0830 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 371:../src/init.c **** 
 372:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSRState = TIM_OSSRState_Disable;
 750              		.loc 1 372 0
 751 0834 4FF00003 		mov	r3, #0
 752 0838 A7F89430 		strh	r3, [r7, #148]	@ movhi
 373:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSIState = TIM_OSSIState_Disable;
 753              		.loc 1 373 0
 754 083c 4FF00003 		mov	r3, #0
 755 0840 A7F89630 		strh	r3, [r7, #150]	@ movhi
 374:../src/init.c **** 	TIM_BDTRInitStruct.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 756              		.loc 1 374 0
 757 0844 4FF00003 		mov	r3, #0
 758 0848 A7F89830 		strh	r3, [r7, #152]	@ movhi
 375:../src/init.c **** 	TIM_BDTRInitStruct.TIM_DeadTime = 0;
 759              		.loc 1 375 0
 760 084c 4FF00003 		mov	r3, #0
 761 0850 A7F89A30 		strh	r3, [r7, #154]	@ movhi
 376:../src/init.c **** 	TIM_BDTRInitStruct.TIM_Break= TIM_Break_Disable;
 762              		.loc 1 376 0
 763 0854 4FF00003 		mov	r3, #0
 764 0858 A7F89C30 		strh	r3, [r7, #156]	@ movhi
 377:../src/init.c **** 	TIM_BDTRInitStruct.TIM_BreakPolarity = TIM_BreakPolarity_Low;
 765              		.loc 1 377 0
 766 085c 4FF00003 		mov	r3, #0
 767 0860 A7F89E30 		strh	r3, [r7, #158]	@ movhi
 378:../src/init.c **** 	TIM_BDTRInitStruct.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 768              		.loc 1 378 0
 769 0864 4FF00003 		mov	r3, #0
 770 0868 A7F8A030 		strh	r3, [r7, #160]	@ movhi
 379:../src/init.c **** 
 380:../src/init.c **** 	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStruct);
 771              		.loc 1 380 0
 772 086c 4FF00000 		mov	r0, #0
 773 0870 C4F20100 		movt	r0, 16385
 774 0874 07F19403 		add	r3, r7, #148
 775 0878 1946     		mov	r1, r3
 776 087a FFF7FEFF 		bl	TIM_BDTRConfig
 381:../src/init.c **** 
 382:../src/init.c **** 	// Required for timers 1 or 8
 383:../src/init.c **** 	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 777              		.loc 1 383 0
 778 087e 4FF00000 		mov	r0, #0
 779 0882 C4F20100 		movt	r0, 16385
 780 0886 4FF00101 		mov	r1, #1
 781 088a FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 384:../src/init.c **** 
 385:../src/init.c **** 	// Enable interrupts
 386:../src/init.c **** 	// TIM_ITConfig(TIM1, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 387:../src/init.c **** 	// Enable timer
 388:../src/init.c **** 	TIM_Cmd(TIM1, ENABLE);
 782              		.loc 1 388 0
 783 088e 4FF00000 		mov	r0, #0
 784 0892 C4F20100 		movt	r0, 16385
 785 0896 4FF00101 		mov	r1, #1
 786 089a FFF7FEFF 		bl	TIM_Cmd
 389:../src/init.c **** 	// End of Timer 1
 390:../src/init.c **** 
 391:../src/init.c **** 	// Timer 2
 392:../src/init.c **** 	// Enable clock(s)
 393:../src/init.c **** 	// Clock = 42 MHz
 394:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 787              		.loc 1 394 0
 788 089e 4FF00100 		mov	r0, #1
 789 08a2 4FF00101 		mov	r1, #1
 790 08a6 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 395:../src/init.c **** 	// Populate structure
 396:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 791              		.loc 1 396 0
 792 08aa 4FF00003 		mov	r3, #0
 793 08ae A7F8CC30 		strh	r3, [r7, #204]	@ movhi
 397:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 794              		.loc 1 397 0
 795 08b2 4FF00003 		mov	r3, #0
 796 08b6 A7F8C630 		strh	r3, [r7, #198]	@ movhi
 398:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM2_PERIOD;
 797              		.loc 1 398 0
 798 08ba 47F6C853 		movw	r3, #32200
 799 08be C7F8C830 		str	r3, [r7, #200]
 399:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM2_PRESCALER;
 800              		.loc 1 399 0
 801 08c2 4FF02A03 		mov	r3, #42
 802 08c6 A7F8C430 		strh	r3, [r7, #196]	@ movhi
 400:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 803              		.loc 1 400 0
 804 08ca 4FF00003 		mov	r3, #0
 805 08ce 87F8CE30 		strb	r3, [r7, #206]
 401:../src/init.c **** 	// Configure timer 2
 402:../src/init.c **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStruct);
 806              		.loc 1 402 0
 807 08d2 4FF08040 		mov	r0, #1073741824
 808 08d6 07F1C403 		add	r3, r7, #196
 809 08da 1946     		mov	r1, r3
 810 08dc FFF7FEFF 		bl	TIM_TimeBaseInit
 403:../src/init.c **** 
 404:../src/init.c **** 	// Populate structure
 405:../src/init.c **** 	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 811              		.loc 1 405 0
 812 08e0 4FF06003 		mov	r3, #96
 813 08e4 A7F8A430 		strh	r3, [r7, #164]	@ movhi
 406:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 814              		.loc 1 406 0
 815 08e8 4FF00103 		mov	r3, #1
 816 08ec A7F8A630 		strh	r3, [r7, #166]	@ movhi
 407:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputNState = TIM_OutputNState_Disable;
 817              		.loc 1 407 0
 818 08f0 4FF00003 		mov	r3, #0
 819 08f4 A7F8A830 		strh	r3, [r7, #168]	@ movhi
 408:../src/init.c **** 	TIM_OCInitStruct.TIM_Pulse = TIM2_PULSE;
 820              		.loc 1 408 0
 821 08f8 40F63403 		movw	r3, #2100
 822 08fc C7F8AC30 		str	r3, [r7, #172]
 409:../src/init.c **** 	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 823              		.loc 1 409 0
 824 0900 4FF00003 		mov	r3, #0
 825 0904 A7F8B030 		strh	r3, [r7, #176]	@ movhi
 410:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNPolarity = TIM_OCNPolarity_High;
 826              		.loc 1 410 0
 827 0908 4FF00003 		mov	r3, #0
 828 090c A7F8B230 		strh	r3, [r7, #178]	@ movhi
 411:../src/init.c **** 	TIM_OCInitStruct.TIM_OCIdleState = TIM_OCIdleState_Reset;
 829              		.loc 1 411 0
 830 0910 4FF00003 		mov	r3, #0
 831 0914 A7F8B430 		strh	r3, [r7, #180]	@ movhi
 412:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 832              		.loc 1 412 0
 833 0918 4FF00003 		mov	r3, #0
 834 091c A7F8B630 		strh	r3, [r7, #182]	@ movhi
 413:../src/init.c **** 	// Configure output compare, channel 2
 414:../src/init.c **** 	TIM_OC1Init(TIM2, &TIM_OCInitStruct);
 835              		.loc 1 414 0
 836 0920 4FF08040 		mov	r0, #1073741824
 837 0924 07F1A403 		add	r3, r7, #164
 838 0928 1946     		mov	r1, r3
 839 092a FFF7FEFF 		bl	TIM_OC1Init
 415:../src/init.c **** 	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 840              		.loc 1 415 0
 841 092e 4FF08040 		mov	r0, #1073741824
 842 0932 4FF00801 		mov	r1, #8
 843 0936 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 416:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 844              		.loc 1 416 0
 845 093a 4FF00103 		mov	r3, #1
 846 093e A7F8A630 		strh	r3, [r7, #166]	@ movhi
 417:../src/init.c **** 	TIM_OC2Init(TIM2, &TIM_OCInitStruct);
 847              		.loc 1 417 0
 848 0942 4FF08040 		mov	r0, #1073741824
 849 0946 07F1A403 		add	r3, r7, #164
 850 094a 1946     		mov	r1, r3
 851 094c FFF7FEFF 		bl	TIM_OC2Init
 418:../src/init.c **** 	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 852              		.loc 1 418 0
 853 0950 4FF08040 		mov	r0, #1073741824
 854 0954 4FF00801 		mov	r1, #8
 855 0958 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 419:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 856              		.loc 1 419 0
 857 095c 4FF00103 		mov	r3, #1
 858 0960 A7F8A630 		strh	r3, [r7, #166]	@ movhi
 420:../src/init.c **** 	TIM_OC3Init(TIM2, &TIM_OCInitStruct);
 859              		.loc 1 420 0
 860 0964 4FF08040 		mov	r0, #1073741824
 861 0968 07F1A403 		add	r3, r7, #164
 862 096c 1946     		mov	r1, r3
 863 096e FFF7FEFF 		bl	TIM_OC3Init
 421:../src/init.c **** 	TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 864              		.loc 1 421 0
 865 0972 4FF08040 		mov	r0, #1073741824
 866 0976 4FF00801 		mov	r1, #8
 867 097a FFF7FEFF 		bl	TIM_OC3PreloadConfig
 422:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 868              		.loc 1 422 0
 869 097e 4FF00103 		mov	r3, #1
 870 0982 A7F8A630 		strh	r3, [r7, #166]	@ movhi
 423:../src/init.c **** 	TIM_OC4Init(TIM2, &TIM_OCInitStruct);
 871              		.loc 1 423 0
 872 0986 4FF08040 		mov	r0, #1073741824
 873 098a 07F1A403 		add	r3, r7, #164
 874 098e 1946     		mov	r1, r3
 875 0990 FFF7FEFF 		bl	TIM_OC4Init
 424:../src/init.c **** 	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 876              		.loc 1 424 0
 877 0994 4FF08040 		mov	r0, #1073741824
 878 0998 4FF00801 		mov	r1, #8
 879 099c FFF7FEFF 		bl	TIM_OC4PreloadConfig
 425:../src/init.c **** 
 426:../src/init.c **** 	TIM_ARRPreloadConfig(TIM2, ENABLE);
 880              		.loc 1 426 0
 881 09a0 4FF08040 		mov	r0, #1073741824
 882 09a4 4FF00101 		mov	r1, #1
 883 09a8 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 427:../src/init.c **** 
 428:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSRState = TIM_OSSRState_Disable;
 884              		.loc 1 428 0
 885 09ac 4FF00003 		mov	r3, #0
 886 09b0 A7F89430 		strh	r3, [r7, #148]	@ movhi
 429:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSIState = TIM_OSSIState_Disable;
 887              		.loc 1 429 0
 888 09b4 4FF00003 		mov	r3, #0
 889 09b8 A7F89630 		strh	r3, [r7, #150]	@ movhi
 430:../src/init.c **** 	TIM_BDTRInitStruct.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 890              		.loc 1 430 0
 891 09bc 4FF00003 		mov	r3, #0
 892 09c0 A7F89830 		strh	r3, [r7, #152]	@ movhi
 431:../src/init.c **** 	TIM_BDTRInitStruct.TIM_DeadTime = 0;
 893              		.loc 1 431 0
 894 09c4 4FF00003 		mov	r3, #0
 895 09c8 A7F89A30 		strh	r3, [r7, #154]	@ movhi
 432:../src/init.c **** 	TIM_BDTRInitStruct.TIM_Break= TIM_Break_Disable;
 896              		.loc 1 432 0
 897 09cc 4FF00003 		mov	r3, #0
 898 09d0 A7F89C30 		strh	r3, [r7, #156]	@ movhi
 433:../src/init.c **** 	TIM_BDTRInitStruct.TIM_BreakPolarity = TIM_BreakPolarity_Low;
 899              		.loc 1 433 0
 900 09d4 4FF00003 		mov	r3, #0
 901 09d8 A7F89E30 		strh	r3, [r7, #158]	@ movhi
 434:../src/init.c **** 	TIM_BDTRInitStruct.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 902              		.loc 1 434 0
 903 09dc 4FF00003 		mov	r3, #0
 904 09e0 A7F8A030 		strh	r3, [r7, #160]	@ movhi
 435:../src/init.c **** 
 436:../src/init.c **** 	TIM_BDTRConfig(TIM2, &TIM_BDTRInitStruct);
 905              		.loc 1 436 0
 906 09e4 4FF08040 		mov	r0, #1073741824
 907 09e8 07F19403 		add	r3, r7, #148
 908 09ec 1946     		mov	r1, r3
 909 09ee FFF7FEFF 		bl	TIM_BDTRConfig
 437:../src/init.c **** 
 438:../src/init.c **** 	// Required for timers 1 or 8
 439:../src/init.c **** 	//TIM_CtrlPWMOutputs(TIM2, ENABLE);
 440:../src/init.c **** 
 441:../src/init.c **** 	// Enable interrupts
 442:../src/init.c **** 	// TIM_ITConfig(TIM1, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 443:../src/init.c **** 	// Enable timer
 444:../src/init.c **** 	TIM_Cmd(TIM2, ENABLE);
 910              		.loc 1 444 0
 911 09f2 4FF08040 		mov	r0, #1073741824
 912 09f6 4FF00101 		mov	r1, #1
 913 09fa FFF7FEFF 		bl	TIM_Cmd
 445:../src/init.c **** 	// End of Timer 2
 446:../src/init.c **** 
 447:../src/init.c **** 	// Timer 3
 448:../src/init.c **** 	// Enable clock(s)
 449:../src/init.c **** 	// Clock = 42 MHz
 450:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 914              		.loc 1 450 0
 915 09fe 4FF00200 		mov	r0, #2
 916 0a02 4FF00101 		mov	r1, #1
 917 0a06 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 451:../src/init.c **** 	// Populate structure
 452:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 918              		.loc 1 452 0
 919 0a0a 4FF00003 		mov	r3, #0
 920 0a0e A7F8CC30 		strh	r3, [r7, #204]	@ movhi
 453:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 921              		.loc 1 453 0
 922 0a12 4FF00003 		mov	r3, #0
 923 0a16 A7F8C630 		strh	r3, [r7, #198]	@ movhi
 454:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM3_PERIOD;
 924              		.loc 1 454 0
 925 0a1a 47F6C853 		movw	r3, #32200
 926 0a1e C7F8C830 		str	r3, [r7, #200]
 455:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM3_PRESCALER;
 927              		.loc 1 455 0
 928 0a22 4FF02A03 		mov	r3, #42
 929 0a26 A7F8C430 		strh	r3, [r7, #196]	@ movhi
 456:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 930              		.loc 1 456 0
 931 0a2a 4FF00003 		mov	r3, #0
 932 0a2e 87F8CE30 		strb	r3, [r7, #206]
 457:../src/init.c **** 	// Configure timer 3
 458:../src/init.c **** 	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseInitStruct);
 933              		.loc 1 458 0
 934 0a32 4FF48060 		mov	r0, #1024
 935 0a36 C4F20000 		movt	r0, 16384
 936 0a3a 07F1C403 		add	r3, r7, #196
 937 0a3e 1946     		mov	r1, r3
 938 0a40 FFF7FEFF 		bl	TIM_TimeBaseInit
 459:../src/init.c **** 
 460:../src/init.c **** 	// Populate structure
 461:../src/init.c **** 	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 939              		.loc 1 461 0
 940 0a44 4FF06003 		mov	r3, #96
 941 0a48 A7F8A430 		strh	r3, [r7, #164]	@ movhi
 462:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 942              		.loc 1 462 0
 943 0a4c 4FF00103 		mov	r3, #1
 944 0a50 A7F8A630 		strh	r3, [r7, #166]	@ movhi
 463:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputNState = TIM_OutputNState_Disable;
 945              		.loc 1 463 0
 946 0a54 4FF00003 		mov	r3, #0
 947 0a58 A7F8A830 		strh	r3, [r7, #168]	@ movhi
 464:../src/init.c **** 	TIM_OCInitStruct.TIM_Pulse = TIM3_PULSE;
 948              		.loc 1 464 0
 949 0a5c 40F63403 		movw	r3, #2100
 950 0a60 C7F8AC30 		str	r3, [r7, #172]
 465:../src/init.c **** 	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 951              		.loc 1 465 0
 952 0a64 4FF00003 		mov	r3, #0
 953 0a68 A7F8B030 		strh	r3, [r7, #176]	@ movhi
 466:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNPolarity = TIM_OCNPolarity_High;
 954              		.loc 1 466 0
 955 0a6c 4FF00003 		mov	r3, #0
 956 0a70 A7F8B230 		strh	r3, [r7, #178]	@ movhi
 467:../src/init.c **** 	TIM_OCInitStruct.TIM_OCIdleState = TIM_OCIdleState_Reset;
 957              		.loc 1 467 0
 958 0a74 4FF00003 		mov	r3, #0
 959 0a78 A7F8B430 		strh	r3, [r7, #180]	@ movhi
 468:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 960              		.loc 1 468 0
 961 0a7c 4FF00003 		mov	r3, #0
 962 0a80 A7F8B630 		strh	r3, [r7, #182]	@ movhi
 469:../src/init.c **** 	// Configure output compare, channel 3
 470:../src/init.c **** 	TIM_OC1Init(TIM3, &TIM_OCInitStruct);
 963              		.loc 1 470 0
 964 0a84 4FF48060 		mov	r0, #1024
 965 0a88 C4F20000 		movt	r0, 16384
 966 0a8c 07F1A403 		add	r3, r7, #164
 967 0a90 1946     		mov	r1, r3
 968 0a92 FFF7FEFF 		bl	TIM_OC1Init
 471:../src/init.c **** 	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 969              		.loc 1 471 0
 970 0a96 4FF48060 		mov	r0, #1024
 971 0a9a C4F20000 		movt	r0, 16384
 972 0a9e 4FF00801 		mov	r1, #8
 973 0aa2 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 472:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 974              		.loc 1 472 0
 975 0aa6 4FF00103 		mov	r3, #1
 976 0aaa A7F8A630 		strh	r3, [r7, #166]	@ movhi
 473:../src/init.c **** 	TIM_OC2Init(TIM3, &TIM_OCInitStruct);
 977              		.loc 1 473 0
 978 0aae 4FF48060 		mov	r0, #1024
 979 0ab2 C4F20000 		movt	r0, 16384
 980 0ab6 07F1A403 		add	r3, r7, #164
 981 0aba 1946     		mov	r1, r3
 982 0abc FFF7FEFF 		bl	TIM_OC2Init
 474:../src/init.c **** 	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
 983              		.loc 1 474 0
 984 0ac0 4FF48060 		mov	r0, #1024
 985 0ac4 C4F20000 		movt	r0, 16384
 986 0ac8 4FF00801 		mov	r1, #8
 987 0acc FFF7FEFF 		bl	TIM_OC2PreloadConfig
 475:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 988              		.loc 1 475 0
 989 0ad0 4FF00103 		mov	r3, #1
 990 0ad4 A7F8A630 		strh	r3, [r7, #166]	@ movhi
 476:../src/init.c **** 	TIM_OC3Init(TIM3, &TIM_OCInitStruct);
 991              		.loc 1 476 0
 992 0ad8 4FF48060 		mov	r0, #1024
 993 0adc C4F20000 		movt	r0, 16384
 994 0ae0 07F1A403 		add	r3, r7, #164
 995 0ae4 1946     		mov	r1, r3
 996 0ae6 FFF7FEFF 		bl	TIM_OC3Init
 477:../src/init.c **** 	TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Enable);
 997              		.loc 1 477 0
 998 0aea 4FF48060 		mov	r0, #1024
 999 0aee C4F20000 		movt	r0, 16384
 1000 0af2 4FF00801 		mov	r1, #8
 1001 0af6 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 478:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 1002              		.loc 1 478 0
 1003 0afa 4FF00103 		mov	r3, #1
 1004 0afe A7F8A630 		strh	r3, [r7, #166]	@ movhi
 479:../src/init.c **** 	TIM_OC4Init(TIM3, &TIM_OCInitStruct);
 1005              		.loc 1 479 0
 1006 0b02 4FF48060 		mov	r0, #1024
 1007 0b06 C4F20000 		movt	r0, 16384
 1008 0b0a 07F1A403 		add	r3, r7, #164
 1009 0b0e 1946     		mov	r1, r3
 1010 0b10 FFF7FEFF 		bl	TIM_OC4Init
 480:../src/init.c **** 	TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
 1011              		.loc 1 480 0
 1012 0b14 4FF48060 		mov	r0, #1024
 1013 0b18 C4F20000 		movt	r0, 16384
 1014 0b1c 4FF00801 		mov	r1, #8
 1015 0b20 FFF7FEFF 		bl	TIM_OC4PreloadConfig
 481:../src/init.c **** 
 482:../src/init.c **** 	TIM_ARRPreloadConfig(TIM3, ENABLE);
 1016              		.loc 1 482 0
 1017 0b24 4FF48060 		mov	r0, #1024
 1018 0b28 C4F20000 		movt	r0, 16384
 1019 0b2c 4FF00101 		mov	r1, #1
 1020 0b30 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 483:../src/init.c **** 
 484:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSRState = TIM_OSSRState_Disable;
 1021              		.loc 1 484 0
 1022 0b34 4FF00003 		mov	r3, #0
 1023 0b38 A7F89430 		strh	r3, [r7, #148]	@ movhi
 485:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSIState = TIM_OSSIState_Disable;
 1024              		.loc 1 485 0
 1025 0b3c 4FF00003 		mov	r3, #0
 1026 0b40 A7F89630 		strh	r3, [r7, #150]	@ movhi
 486:../src/init.c **** 	TIM_BDTRInitStruct.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 1027              		.loc 1 486 0
 1028 0b44 4FF00003 		mov	r3, #0
 1029 0b48 A7F89830 		strh	r3, [r7, #152]	@ movhi
 487:../src/init.c **** 	TIM_BDTRInitStruct.TIM_DeadTime = 0;
 1030              		.loc 1 487 0
 1031 0b4c 4FF00003 		mov	r3, #0
 1032 0b50 A7F89A30 		strh	r3, [r7, #154]	@ movhi
 488:../src/init.c **** 	TIM_BDTRInitStruct.TIM_Break= TIM_Break_Disable;
 1033              		.loc 1 488 0
 1034 0b54 4FF00003 		mov	r3, #0
 1035 0b58 A7F89C30 		strh	r3, [r7, #156]	@ movhi
 489:../src/init.c **** 	TIM_BDTRInitStruct.TIM_BreakPolarity = TIM_BreakPolarity_Low;
 1036              		.loc 1 489 0
 1037 0b5c 4FF00003 		mov	r3, #0
 1038 0b60 A7F89E30 		strh	r3, [r7, #158]	@ movhi
 490:../src/init.c **** 	TIM_BDTRInitStruct.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 1039              		.loc 1 490 0
 1040 0b64 4FF00003 		mov	r3, #0
 1041 0b68 A7F8A030 		strh	r3, [r7, #160]	@ movhi
 491:../src/init.c **** 
 492:../src/init.c **** 	TIM_BDTRConfig(TIM3, &TIM_BDTRInitStruct);
 1042              		.loc 1 492 0
 1043 0b6c 4FF48060 		mov	r0, #1024
 1044 0b70 C4F20000 		movt	r0, 16384
 1045 0b74 07F19403 		add	r3, r7, #148
 1046 0b78 1946     		mov	r1, r3
 1047 0b7a FFF7FEFF 		bl	TIM_BDTRConfig
 493:../src/init.c **** 
 494:../src/init.c **** 	// Required for timers 1 or 8
 495:../src/init.c **** 	//TIM_CtrlPWMOutputs(TIM2, ENABLE);
 496:../src/init.c **** 
 497:../src/init.c **** 	// Enable interrupts
 498:../src/init.c **** 	// TIM_ITConfig(TIM1, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 499:../src/init.c **** 	// Enable timer
 500:../src/init.c **** 	TIM_Cmd(TIM3, ENABLE);
 1048              		.loc 1 500 0
 1049 0b7e 4FF48060 		mov	r0, #1024
 1050 0b82 C4F20000 		movt	r0, 16384
 1051 0b86 4FF00101 		mov	r1, #1
 1052 0b8a FFF7FEFF 		bl	TIM_Cmd
 501:../src/init.c **** 	// End of Timer 3
 502:../src/init.c **** 
 503:../src/init.c **** 	// Timer 4 - input capture
 504:../src/init.c **** 	// Enable clock(s)
 505:../src/init.c **** 	// Clock = 42 MHz
 506:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 1053              		.loc 1 506 0
 1054 0b8e 4FF00400 		mov	r0, #4
 1055 0b92 4FF00101 		mov	r1, #1
 1056 0b96 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 507:../src/init.c **** 	// Populate structure
 508:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 1057              		.loc 1 508 0
 1058 0b9a 4FF00003 		mov	r3, #0
 1059 0b9e A7F8CC30 		strh	r3, [r7, #204]	@ movhi
 509:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 1060              		.loc 1 509 0
 1061 0ba2 4FF00003 		mov	r3, #0
 1062 0ba6 A7F8C630 		strh	r3, [r7, #198]	@ movhi
 510:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM4_PERIOD;
 1063              		.loc 1 510 0
 1064 0baa 4FF6FF73 		movw	r3, #65535
 1065 0bae C7F8C830 		str	r3, [r7, #200]
 511:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM4_PRESCALER;
 1066              		.loc 1 511 0
 1067 0bb2 4FF02A03 		mov	r3, #42
 1068 0bb6 A7F8C430 		strh	r3, [r7, #196]	@ movhi
 512:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 1069              		.loc 1 512 0
 1070 0bba 4FF00003 		mov	r3, #0
 1071 0bbe 87F8CE30 		strb	r3, [r7, #206]
 513:../src/init.c **** 	// Configure timer 4
 514:../src/init.c **** 	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStruct);
 1072              		.loc 1 514 0
 1073 0bc2 4FF40060 		mov	r0, #2048
 1074 0bc6 C4F20000 		movt	r0, 16384
 1075 0bca 07F1C403 		add	r3, r7, #196
 1076 0bce 1946     		mov	r1, r3
 1077 0bd0 FFF7FEFF 		bl	TIM_TimeBaseInit
 515:../src/init.c **** 
 516:../src/init.c **** 	// Populate structure
 517:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
 1078              		.loc 1 517 0
 1079 0bd4 4FF00003 		mov	r3, #0
 1080 0bd8 A7F8B830 		strh	r3, [r7, #184]	@ movhi
 518:../src/init.c **** 	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 1081              		.loc 1 518 0
 1082 0bdc 4FF00A03 		mov	r3, #10
 1083 0be0 A7F8BA30 		strh	r3, [r7, #186]	@ movhi
 519:../src/init.c **** 	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
 1084              		.loc 1 519 0
 1085 0be4 4FF00103 		mov	r3, #1
 1086 0be8 A7F8BC30 		strh	r3, [r7, #188]	@ movhi
 520:../src/init.c **** 	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 1087              		.loc 1 520 0
 1088 0bec 4FF00003 		mov	r3, #0
 1089 0bf0 A7F8BE30 		strh	r3, [r7, #190]	@ movhi
 521:../src/init.c **** 	TIM_ICInitStruct.TIM_ICFilter = TIM4_FILTER;
 1090              		.loc 1 521 0
 1091 0bf4 4FF00103 		mov	r3, #1
 1092 0bf8 A7F8C030 		strh	r3, [r7, #192]	@ movhi
 522:../src/init.c **** 	TIM_ICInit(TIM4, &TIM_ICInitStruct);
 1093              		.loc 1 522 0
 1094 0bfc 4FF40060 		mov	r0, #2048
 1095 0c00 C4F20000 		movt	r0, 16384
 1096 0c04 07F1B803 		add	r3, r7, #184
 1097 0c08 1946     		mov	r1, r3
 1098 0c0a FFF7FEFF 		bl	TIM_ICInit
 523:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_2;
 1099              		.loc 1 523 0
 1100 0c0e 4FF00403 		mov	r3, #4
 1101 0c12 A7F8B830 		strh	r3, [r7, #184]	@ movhi
 524:../src/init.c **** 	TIM_ICInit(TIM4, &TIM_ICInitStruct);
 1102              		.loc 1 524 0
 1103 0c16 4FF40060 		mov	r0, #2048
 1104 0c1a C4F20000 		movt	r0, 16384
 1105 0c1e 07F1B803 		add	r3, r7, #184
 1106 0c22 1946     		mov	r1, r3
 1107 0c24 FFF7FEFF 		bl	TIM_ICInit
 525:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_3;
 1108              		.loc 1 525 0
 1109 0c28 4FF00803 		mov	r3, #8
 1110 0c2c A7F8B830 		strh	r3, [r7, #184]	@ movhi
 526:../src/init.c **** 	TIM_ICInit(TIM4, &TIM_ICInitStruct);
 1111              		.loc 1 526 0
 1112 0c30 4FF40060 		mov	r0, #2048
 1113 0c34 C4F20000 		movt	r0, 16384
 1114 0c38 07F1B803 		add	r3, r7, #184
 1115 0c3c 1946     		mov	r1, r3
 1116 0c3e FFF7FEFF 		bl	TIM_ICInit
 527:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_4;
 1117              		.loc 1 527 0
 1118 0c42 4FF00C03 		mov	r3, #12
 1119 0c46 A7F8B830 		strh	r3, [r7, #184]	@ movhi
 528:../src/init.c **** 	TIM_ICInit(TIM4, &TIM_ICInitStruct);
 1120              		.loc 1 528 0
 1121 0c4a 4FF40060 		mov	r0, #2048
 1122 0c4e C4F20000 		movt	r0, 16384
 1123 0c52 07F1B803 		add	r3, r7, #184
 1124 0c56 1946     		mov	r1, r3
 1125 0c58 FFF7FEFF 		bl	TIM_ICInit
 529:../src/init.c **** 
 530:../src/init.c **** 	// Configure interrupt
 531:../src/init.c **** 	TIM_ITConfig(TIM4, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 1126              		.loc 1 531 0
 1127 0c5c 4FF40060 		mov	r0, #2048
 1128 0c60 C4F20000 		movt	r0, 16384
 1129 0c64 4FF01E01 		mov	r1, #30
 1130 0c68 4FF00102 		mov	r2, #1
 1131 0c6c FFF7FEFF 		bl	TIM_ITConfig
 532:../src/init.c **** 
 533:../src/init.c **** 	// Enable timer
 534:../src/init.c **** 	TIM_Cmd(TIM4, ENABLE);
 1132              		.loc 1 534 0
 1133 0c70 4FF40060 		mov	r0, #2048
 1134 0c74 C4F20000 		movt	r0, 16384
 1135 0c78 4FF00101 		mov	r1, #1
 1136 0c7c FFF7FEFF 		bl	TIM_Cmd
 535:../src/init.c **** 
 536:../src/init.c **** 	// End of timer 4
 537:../src/init.c **** 
 538:../src/init.c **** 	// Timer 8 - input capture
 539:../src/init.c **** 	// Enable clock(s)
 540:../src/init.c **** 	// Clock = 84 MHz
 541:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 1137              		.loc 1 541 0
 1138 0c80 4FF00200 		mov	r0, #2
 1139 0c84 4FF00101 		mov	r1, #1
 1140 0c88 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 542:../src/init.c **** 	// Populate structure
 543:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 1141              		.loc 1 543 0
 1142 0c8c 4FF00003 		mov	r3, #0
 1143 0c90 A7F8CC30 		strh	r3, [r7, #204]	@ movhi
 544:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 1144              		.loc 1 544 0
 1145 0c94 4FF00003 		mov	r3, #0
 1146 0c98 A7F8C630 		strh	r3, [r7, #198]	@ movhi
 545:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM8_PERIOD;
 1147              		.loc 1 545 0
 1148 0c9c 4FF6FF73 		movw	r3, #65535
 1149 0ca0 C7F8C830 		str	r3, [r7, #200]
 546:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM8_PRESCALER;
 1150              		.loc 1 546 0
 1151 0ca4 4FF05403 		mov	r3, #84
 1152 0ca8 A7F8C430 		strh	r3, [r7, #196]	@ movhi
 547:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 1153              		.loc 1 547 0
 1154 0cac 4FF00003 		mov	r3, #0
 1155 0cb0 87F8CE30 		strb	r3, [r7, #206]
 548:../src/init.c **** 	// Configure timer 8
 549:../src/init.c **** 	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseInitStruct);
 1156              		.loc 1 549 0
 1157 0cb4 4FF48060 		mov	r0, #1024
 1158 0cb8 C4F20100 		movt	r0, 16385
 1159 0cbc 07F1C403 		add	r3, r7, #196
 1160 0cc0 1946     		mov	r1, r3
 1161 0cc2 FFF7FEFF 		bl	TIM_TimeBaseInit
 550:../src/init.c **** 
 551:../src/init.c **** 	// Populate structure
 552:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
 1162              		.loc 1 552 0
 1163 0cc6 4FF00003 		mov	r3, #0
 1164 0cca A7F8B830 		strh	r3, [r7, #184]	@ movhi
 553:../src/init.c **** 	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 1165              		.loc 1 553 0
 1166 0cce 4FF00A03 		mov	r3, #10
 1167 0cd2 A7F8BA30 		strh	r3, [r7, #186]	@ movhi
 554:../src/init.c **** 	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
 1168              		.loc 1 554 0
 1169 0cd6 4FF00103 		mov	r3, #1
 1170 0cda A7F8BC30 		strh	r3, [r7, #188]	@ movhi
 555:../src/init.c **** 	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 1171              		.loc 1 555 0
 1172 0cde 4FF00003 		mov	r3, #0
 1173 0ce2 A7F8BE30 		strh	r3, [r7, #190]	@ movhi
 556:../src/init.c **** 	TIM_ICInitStruct.TIM_ICFilter = TIM8_FILTER;
 1174              		.loc 1 556 0
 1175 0ce6 4FF00103 		mov	r3, #1
 1176 0cea A7F8C030 		strh	r3, [r7, #192]	@ movhi
 557:../src/init.c **** 	TIM_ICInit(TIM8, &TIM_ICInitStruct);
 1177              		.loc 1 557 0
 1178 0cee 4FF48060 		mov	r0, #1024
 1179 0cf2 C4F20100 		movt	r0, 16385
 1180 0cf6 07F1B803 		add	r3, r7, #184
 1181 0cfa 1946     		mov	r1, r3
 1182 0cfc FFF7FEFF 		bl	TIM_ICInit
 558:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_2;
 1183              		.loc 1 558 0
 1184 0d00 4FF00403 		mov	r3, #4
 1185 0d04 A7F8B830 		strh	r3, [r7, #184]	@ movhi
 559:../src/init.c **** 	TIM_ICInit(TIM8, &TIM_ICInitStruct);
 1186              		.loc 1 559 0
 1187 0d08 4FF48060 		mov	r0, #1024
 1188 0d0c C4F20100 		movt	r0, 16385
 1189 0d10 07F1B803 		add	r3, r7, #184
 1190 0d14 1946     		mov	r1, r3
 1191 0d16 FFF7FEFF 		bl	TIM_ICInit
 560:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_3;
 1192              		.loc 1 560 0
 1193 0d1a 4FF00803 		mov	r3, #8
 1194 0d1e A7F8B830 		strh	r3, [r7, #184]	@ movhi
 561:../src/init.c **** 	TIM_ICInit(TIM8, &TIM_ICInitStruct);
 1195              		.loc 1 561 0
 1196 0d22 4FF48060 		mov	r0, #1024
 1197 0d26 C4F20100 		movt	r0, 16385
 1198 0d2a 07F1B803 		add	r3, r7, #184
 1199 0d2e 1946     		mov	r1, r3
 1200 0d30 FFF7FEFF 		bl	TIM_ICInit
 562:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_4;
 1201              		.loc 1 562 0
 1202 0d34 4FF00C03 		mov	r3, #12
 1203 0d38 A7F8B830 		strh	r3, [r7, #184]	@ movhi
 563:../src/init.c **** 	TIM_ICInit(TIM8, &TIM_ICInitStruct);
 1204              		.loc 1 563 0
 1205 0d3c 4FF48060 		mov	r0, #1024
 1206 0d40 C4F20100 		movt	r0, 16385
 1207 0d44 07F1B803 		add	r3, r7, #184
 1208 0d48 1946     		mov	r1, r3
 1209 0d4a FFF7FEFF 		bl	TIM_ICInit
 564:../src/init.c **** 
 565:../src/init.c **** 	// Configure interrupt
 566:../src/init.c **** 	TIM_ITConfig(TIM8, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 1210              		.loc 1 566 0
 1211 0d4e 4FF48060 		mov	r0, #1024
 1212 0d52 C4F20100 		movt	r0, 16385
 1213 0d56 4FF01E01 		mov	r1, #30
 1214 0d5a 4FF00102 		mov	r2, #1
 1215 0d5e FFF7FEFF 		bl	TIM_ITConfig
 567:../src/init.c **** 
 568:../src/init.c **** 	// Enable timer
 569:../src/init.c **** 	TIM_Cmd(TIM8, ENABLE);
 1216              		.loc 1 569 0
 1217 0d62 4FF48060 		mov	r0, #1024
 1218 0d66 C4F20100 		movt	r0, 16385
 1219 0d6a 4FF00101 		mov	r1, #1
 1220 0d6e FFF7FEFF 		bl	TIM_Cmd
 570:../src/init.c **** 
 571:../src/init.c **** 	// End of timer 8
 572:../src/init.c **** 
 573:../src/init.c **** 	// Timer 6 - timing for DAC
 574:../src/init.c **** 
 575:../src/init.c **** 	// TIM6 Periph clock enable
 576:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
 1221              		.loc 1 576 0
 1222 0d72 4FF01000 		mov	r0, #16
 1223 0d76 4FF00101 		mov	r1, #1
 1224 0d7a FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 577:../src/init.c **** 
 578:../src/init.c **** 	// Time base configuration
 579:../src/init.c **** 	//TIM_TimeBaseStructInit(&TIM_TimeBaseInitStruct);
 580:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = 0xFF;
 1225              		.loc 1 580 0
 1226 0d7e 4FF0FF03 		mov	r3, #255
 1227 0d82 C7F8C830 		str	r3, [r7, #200]
 581:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = 0;
 1228              		.loc 1 581 0
 1229 0d86 4FF00003 		mov	r3, #0
 1230 0d8a A7F8C430 		strh	r3, [r7, #196]	@ movhi
 582:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;
 1231              		.loc 1 582 0
 1232 0d8e 4FF00003 		mov	r3, #0
 1233 0d92 A7F8CC30 		strh	r3, [r7, #204]	@ movhi
 583:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 1234              		.loc 1 583 0
 1235 0d96 4FF00003 		mov	r3, #0
 1236 0d9a A7F8C630 		strh	r3, [r7, #198]	@ movhi
 584:../src/init.c **** 	TIM_TimeBaseInit(TIM6, &TIM_TimeBaseInitStruct);
 1237              		.loc 1 584 0
 1238 0d9e 4FF48050 		mov	r0, #4096
 1239 0da2 C4F20000 		movt	r0, 16384
 1240 0da6 07F1C403 		add	r3, r7, #196
 1241 0daa 1946     		mov	r1, r3
 1242 0dac FFF7FEFF 		bl	TIM_TimeBaseInit
 585:../src/init.c **** 
 586:../src/init.c **** 	// TIM6 TRGO selection
 587:../src/init.c **** 	TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
 1243              		.loc 1 587 0
 1244 0db0 4FF48050 		mov	r0, #4096
 1245 0db4 C4F20000 		movt	r0, 16384
 1246 0db8 4FF02001 		mov	r1, #32
 1247 0dbc FFF7FEFF 		bl	TIM_SelectOutputTrigger
 588:../src/init.c **** 
 589:../src/init.c **** 	// TIM6 enable counter
 590:../src/init.c **** 	TIM_Cmd(TIM6, ENABLE);
 1248              		.loc 1 590 0
 1249 0dc0 4FF48050 		mov	r0, #4096
 1250 0dc4 C4F20000 		movt	r0, 16384
 1251 0dc8 4FF00101 		mov	r1, #1
 1252 0dcc FFF7FEFF 		bl	TIM_Cmd
 591:../src/init.c **** 
 592:../src/init.c **** 	// End of timer 6
 593:../src/init.c **** 
 594:../src/init.c **** 	// Timer 14 - timing for MODBUS
 595:../src/init.c **** 	//enable clock(s)
 596:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 1253              		.loc 1 596 0
 1254 0dd0 4FF48070 		mov	r0, #256
 1255 0dd4 4FF00101 		mov	r1, #1
 1256 0dd8 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 597:../src/init.c **** 	//populate structure
 598:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 1257              		.loc 1 598 0
 1258 0ddc 4FF00003 		mov	r3, #0
 1259 0de0 A7F8CC30 		strh	r3, [r7, #204]	@ movhi
 599:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 1260              		.loc 1 599 0
 1261 0de4 4FF00003 		mov	r3, #0
 1262 0de8 A7F8C630 		strh	r3, [r7, #198]	@ movhi
 600:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM14_PERIOD;
 1263              		.loc 1 600 0
 1264 0dec 4FF47A73 		mov	r3, #1000
 1265 0df0 C7F8C830 		str	r3, [r7, #200]
 601:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM14_PRESCALER;
 1266              		.loc 1 601 0
 1267 0df4 4FF05403 		mov	r3, #84
 1268 0df8 A7F8C430 		strh	r3, [r7, #196]	@ movhi
 602:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 1269              		.loc 1 602 0
 1270 0dfc 4FF00003 		mov	r3, #0
 1271 0e00 87F8CE30 		strb	r3, [r7, #206]
 603:../src/init.c **** 	//configure timer 14
 604:../src/init.c **** 	TIM_TimeBaseInit(TIM14, &TIM_TimeBaseInitStruct);
 1272              		.loc 1 604 0
 1273 0e04 4FF40050 		mov	r0, #8192
 1274 0e08 C4F20000 		movt	r0, 16384
 1275 0e0c 07F1C403 		add	r3, r7, #196
 1276 0e10 1946     		mov	r1, r3
 1277 0e12 FFF7FEFF 		bl	TIM_TimeBaseInit
 605:../src/init.c **** 	//enable interrupt
 606:../src/init.c **** 	TIM_ITConfig(TIM14, TIM_IT_Update, ENABLE);
 1278              		.loc 1 606 0
 1279 0e16 4FF40050 		mov	r0, #8192
 1280 0e1a C4F20000 		movt	r0, 16384
 1281 0e1e 4FF00101 		mov	r1, #1
 1282 0e22 4FF00102 		mov	r2, #1
 1283 0e26 FFF7FEFF 		bl	TIM_ITConfig
 607:../src/init.c **** 	// Enable reload
 608:../src/init.c **** 	//TIM_ARRPreloadConfig(TIM14, ENABLE);
 609:../src/init.c **** 	//enable timer
 610:../src/init.c **** 	TIM_Cmd(TIM14, ENABLE);
 1284              		.loc 1 610 0
 1285 0e2a 4FF40050 		mov	r0, #8192
 1286 0e2e C4F20000 		movt	r0, 16384
 1287 0e32 4FF00101 		mov	r1, #1
 1288 0e36 FFF7FEFF 		bl	TIM_Cmd
 611:../src/init.c **** 
 612:../src/init.c **** 
 613:../src/init.c **** 	// End of timer 14
 614:../src/init.c **** 
 615:../src/init.c **** 	// Configure USART2
 616:../src/init.c **** 	//Remember to set GPIO pins in GPIO configuration
 617:../src/init.c **** 	//enable peripheral clock
 618:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); //for USART1 and USART6
 1289              		.loc 1 618 0
 1290 0e3a 4FF01000 		mov	r0, #16
 1291 0e3e 4FF00101 		mov	r1, #1
 1292 0e42 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 619:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB1Periph_USART3, ENABLE); //for USART2, USART
 1293              		.loc 1 619 0
 1294 0e46 4FF4C020 		mov	r0, #393216
 1295 0e4a 4FF00101 		mov	r1, #1
 1296 0e4e FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 620:../src/init.c **** 	//program port parameters
 621:../src/init.c **** 	//set baud rate
 622:../src/init.c **** 	USART_InitStructure.USART_BaudRate = 38400;
 1297              		.loc 1 622 0
 1298 0e52 4FF41643 		mov	r3, #38400
 1299 0e56 3B60     		str	r3, [r7, #0]
 623:../src/init.c **** 	//flow control
 624:../src/init.c **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 1300              		.loc 1 624 0
 1301 0e58 4FF00003 		mov	r3, #0
 1302 0e5c BB81     		strh	r3, [r7, #12]	@ movhi
 625:../src/init.c **** 	//enable receiver and transmitter
 626:../src/init.c **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 1303              		.loc 1 626 0
 1304 0e5e 4FF00C03 		mov	r3, #12
 1305 0e62 7B81     		strh	r3, [r7, #10]	@ movhi
 627:../src/init.c **** 	//parity
 628:../src/init.c **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 1306              		.loc 1 628 0
 1307 0e64 4FF00003 		mov	r3, #0
 1308 0e68 3B81     		strh	r3, [r7, #8]	@ movhi
 629:../src/init.c **** 	//stop bits
 630:../src/init.c **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1309              		.loc 1 630 0
 1310 0e6a 4FF00003 		mov	r3, #0
 1311 0e6e FB80     		strh	r3, [r7, #6]	@ movhi
 631:../src/init.c **** 	//word length
 632:../src/init.c **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1312              		.loc 1 632 0
 1313 0e70 4FF00003 		mov	r3, #0
 1314 0e74 BB80     		strh	r3, [r7, #4]	@ movhi
 633:../src/init.c **** 	//start port
 634:../src/init.c **** 	USART_Init(USART2, &USART_InitStructure);
 1315              		.loc 1 634 0
 1316 0e76 4FF48840 		mov	r0, #17408
 1317 0e7a C4F20000 		movt	r0, 16384
 1318 0e7e 3B46     		mov	r3, r7
 1319 0e80 1946     		mov	r1, r3
 1320 0e82 FFF7FEFF 		bl	USART_Init
 635:../src/init.c **** 
 636:../src/init.c **** 	//enable interrupt - RX not empty, transfer complete
 637:../src/init.c **** 	//USART_ITConfig(USART2, USART_IT_RXNE | USART_IT_TC, ENABLE);
 638:../src/init.c **** 	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 1321              		.loc 1 638 0
 1322 0e86 4FF48840 		mov	r0, #17408
 1323 0e8a C4F20000 		movt	r0, 16384
 1324 0e8e 40F22551 		movw	r1, #1317
 1325 0e92 4FF00102 		mov	r2, #1
 1326 0e96 FFF7FEFF 		bl	USART_ITConfig
 639:../src/init.c **** 
 640:../src/init.c **** 	//enable module 2
 641:../src/init.c **** 	USART_Cmd(USART2, ENABLE);
 1327              		.loc 1 641 0
 1328 0e9a 4FF48840 		mov	r0, #17408
 1329 0e9e C4F20000 		movt	r0, 16384
 1330 0ea2 4FF00101 		mov	r1, #1
 1331 0ea6 FFF7FEFF 		bl	USART_Cmd
 642:../src/init.c **** 
 643:../src/init.c **** 	// Configure USART2 DMA
 644:../src/init.c **** 	//enable peripheral clock
 645:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 1332              		.loc 1 645 0
 1333 0eaa 4FF40010 		mov	r0, #2097152
 1334 0eae 4FF00101 		mov	r1, #1
 1335 0eb2 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 646:../src/init.c **** 	//configure USART2 DMA channel
 647:../src/init.c **** 	//deinit DMA channel
 648:../src/init.c **** 	DMA_DeInit(DMA_USART2);
 1336              		.loc 1 648 0
 1337 0eb6 46F2A000 		movw	r0, #24736
 1338 0eba C4F20200 		movt	r0, 16386
 1339 0ebe FFF7FEFF 		bl	DMA_DeInit
 649:../src/init.c **** 	//enable interrupts if needed
 650:../src/init.c **** 	//DMA_IT_TC - transfer complete interrupt
 651:../src/init.c **** 	//DMA_ITConfig(DMA1_Stream6, DMA_IT_TC, ENABLE);
 652:../src/init.c **** 
 653:../src/init.c **** 
 654:../src/init.c **** 
 655:../src/init.c **** 	//configure module 1 - current/voltage/temperature sensor
 656:../src/init.c **** 	//set baud rate
 657:../src/init.c **** 	USART_InitStructure.USART_BaudRate = 19200;
 1340              		.loc 1 657 0
 1341 0ec2 4FF49643 		mov	r3, #19200
 1342 0ec6 3B60     		str	r3, [r7, #0]
 658:../src/init.c **** 	//flow control
 659:../src/init.c **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 1343              		.loc 1 659 0
 1344 0ec8 4FF00003 		mov	r3, #0
 1345 0ecc BB81     		strh	r3, [r7, #12]	@ movhi
 660:../src/init.c **** 	//enable receiver and transmitter
 661:../src/init.c **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 1346              		.loc 1 661 0
 1347 0ece 4FF00C03 		mov	r3, #12
 1348 0ed2 7B81     		strh	r3, [r7, #10]	@ movhi
 662:../src/init.c **** 	//parity
 663:../src/init.c **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 1349              		.loc 1 663 0
 1350 0ed4 4FF00003 		mov	r3, #0
 1351 0ed8 3B81     		strh	r3, [r7, #8]	@ movhi
 664:../src/init.c **** 	//stop bits
 665:../src/init.c **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1352              		.loc 1 665 0
 1353 0eda 4FF00003 		mov	r3, #0
 1354 0ede FB80     		strh	r3, [r7, #6]	@ movhi
 666:../src/init.c **** 	//word length
 667:../src/init.c **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1355              		.loc 1 667 0
 1356 0ee0 4FF00003 		mov	r3, #0
 1357 0ee4 BB80     		strh	r3, [r7, #4]	@ movhi
 668:../src/init.c **** 	//start port
 669:../src/init.c **** 	USART_Init(USART1, &USART_InitStructure);
 1358              		.loc 1 669 0
 1359 0ee6 4FF48050 		mov	r0, #4096
 1360 0eea C4F20100 		movt	r0, 16385
 1361 0eee 3B46     		mov	r3, r7
 1362 0ef0 1946     		mov	r1, r3
 1363 0ef2 FFF7FEFF 		bl	USART_Init
 670:../src/init.c **** 
 671:../src/init.c **** 	//enable interrupt - RX not empty, transfer complete
 672:../src/init.c **** 	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 1364              		.loc 1 672 0
 1365 0ef6 4FF48050 		mov	r0, #4096
 1366 0efa C4F20100 		movt	r0, 16385
 1367 0efe 40F22551 		movw	r1, #1317
 1368 0f02 4FF00102 		mov	r2, #1
 1369 0f06 FFF7FEFF 		bl	USART_ITConfig
 673:../src/init.c **** 
 674:../src/init.c **** 	//enable module 1
 675:../src/init.c **** 	USART_Cmd(USART1, ENABLE);
 1370              		.loc 1 675 0
 1371 0f0a 4FF48050 		mov	r0, #4096
 1372 0f0e C4F20100 		movt	r0, 16385
 1373 0f12 4FF00101 		mov	r1, #1
 1374 0f16 FFF7FEFF 		bl	USART_Cmd
 676:../src/init.c **** 
 677:../src/init.c **** 
 678:../src/init.c **** 	//configure module 3 - GPS
 679:../src/init.c **** 	//set baud rate
 680:../src/init.c **** 	USART_InitStructure.USART_BaudRate = 9600;
 1375              		.loc 1 680 0
 1376 0f1a 4FF41653 		mov	r3, #9600
 1377 0f1e 3B60     		str	r3, [r7, #0]
 681:../src/init.c **** 	//flow control
 682:../src/init.c **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 1378              		.loc 1 682 0
 1379 0f20 4FF00003 		mov	r3, #0
 1380 0f24 BB81     		strh	r3, [r7, #12]	@ movhi
 683:../src/init.c **** 	//enable receiver and transmitter
 684:../src/init.c **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 1381              		.loc 1 684 0
 1382 0f26 4FF00C03 		mov	r3, #12
 1383 0f2a 7B81     		strh	r3, [r7, #10]	@ movhi
 685:../src/init.c **** 	//parity
 686:../src/init.c **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 1384              		.loc 1 686 0
 1385 0f2c 4FF00003 		mov	r3, #0
 1386 0f30 3B81     		strh	r3, [r7, #8]	@ movhi
 687:../src/init.c **** 	//stop bits
 688:../src/init.c **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1387              		.loc 1 688 0
 1388 0f32 4FF00003 		mov	r3, #0
 1389 0f36 FB80     		strh	r3, [r7, #6]	@ movhi
 689:../src/init.c **** 	//word length
 690:../src/init.c **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1390              		.loc 1 690 0
 1391 0f38 4FF00003 		mov	r3, #0
 1392 0f3c BB80     		strh	r3, [r7, #4]	@ movhi
 691:../src/init.c **** 	//start port
 692:../src/init.c **** 	USART_Init(USART3, &USART_InitStructure);
 1393              		.loc 1 692 0
 1394 0f3e 4FF49040 		mov	r0, #18432
 1395 0f42 C4F20000 		movt	r0, 16384
 1396 0f46 3B46     		mov	r3, r7
 1397 0f48 1946     		mov	r1, r3
 1398 0f4a FFF7FEFF 		bl	USART_Init
 693:../src/init.c **** 
 694:../src/init.c **** 	//enable interrupt - RX not empty, transfer complete
 695:../src/init.c **** 	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 1399              		.loc 1 695 0
 1400 0f4e 4FF49040 		mov	r0, #18432
 1401 0f52 C4F20000 		movt	r0, 16384
 1402 0f56 40F22551 		movw	r1, #1317
 1403 0f5a 4FF00102 		mov	r2, #1
 1404 0f5e FFF7FEFF 		bl	USART_ITConfig
 696:../src/init.c **** 
 697:../src/init.c **** 	//enable module 3
 698:../src/init.c **** 	USART_Cmd(USART3, ENABLE);
 1405              		.loc 1 698 0
 1406 0f62 4FF49040 		mov	r0, #18432
 1407 0f66 C4F20000 		movt	r0, 16384
 1408 0f6a 4FF00101 		mov	r1, #1
 1409 0f6e FFF7FEFF 		bl	USART_Cmd
 699:../src/init.c **** 
 700:../src/init.c **** 	// Configure USART3 DMA
 701:../src/init.c **** 	//enable peripheral clock
 702:../src/init.c **** 	// Already enabled for USART2
 703:../src/init.c **** 	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 704:../src/init.c **** 	//configure USART3 DMA channel
 705:../src/init.c **** 	//deinit DMA channel
 706:../src/init.c **** 	DMA_DeInit(DMA_USART3);
 1410              		.loc 1 706 0
 1411 0f72 46F27000 		movw	r0, #24688
 1412 0f76 C4F20200 		movt	r0, 16386
 1413 0f7a FFF7FEFF 		bl	DMA_DeInit
 707:../src/init.c **** 	//enable interrupts if needed
 708:../src/init.c **** 	//DMA_IT_TC - transfer complete interrupt
 709:../src/init.c **** 	//DMA_ITConfig(DMA1_Stream6, DMA_IT_TC, ENABLE);
 710:../src/init.c **** 
 711:../src/init.c **** 
 712:../src/init.c **** 	// I2C2 config
 713:../src/init.c **** 	// Configure I2C 2 for sensor communication
 714:../src/init.c **** 	// Enable peripheral clock
 715:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 1414              		.loc 1 715 0
 1415 0f7e 4FF48000 		mov	r0, #4194304
 1416 0f82 4FF00101 		mov	r1, #1
 1417 0f86 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 716:../src/init.c **** 	// Set clock to 100 kHz
 717:../src/init.c **** 	I2CInitStruct.I2C_ClockSpeed = 400000;
 1418              		.loc 1 717 0
 1419 0f8a 4FF4D453 		mov	r3, #6784
 1420 0f8e C0F20603 		movt	r3, 6
 1421 0f92 C7F88430 		str	r3, [r7, #132]
 718:../src/init.c **** 	I2CInitStruct.I2C_Mode = I2C_Mode_I2C;
 1422              		.loc 1 718 0
 1423 0f96 4FF00003 		mov	r3, #0
 1424 0f9a A7F88830 		strh	r3, [r7, #136]	@ movhi
 719:../src/init.c **** 	I2CInitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 1425              		.loc 1 719 0
 1426 0f9e 4BF6FF73 		movw	r3, #49151
 1427 0fa2 A7F88A30 		strh	r3, [r7, #138]	@ movhi
 720:../src/init.c **** 	I2CInitStruct.I2C_OwnAddress1 = 0x00;
 1428              		.loc 1 720 0
 1429 0fa6 4FF00003 		mov	r3, #0
 1430 0faa A7F88C30 		strh	r3, [r7, #140]	@ movhi
 721:../src/init.c **** 	I2CInitStruct.I2C_Ack = I2C_Ack_Enable;
 1431              		.loc 1 721 0
 1432 0fae 4FF48063 		mov	r3, #1024
 1433 0fb2 A7F88E30 		strh	r3, [r7, #142]	@ movhi
 722:../src/init.c **** 	I2CInitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 1434              		.loc 1 722 0
 1435 0fb6 4FF48043 		mov	r3, #16384
 1436 0fba A7F89030 		strh	r3, [r7, #144]	@ movhi
 723:../src/init.c **** 	I2C_Init(I2C2, &I2CInitStruct);
 1437              		.loc 1 723 0
 1438 0fbe 4FF4B040 		mov	r0, #22528
 1439 0fc2 C4F20000 		movt	r0, 16384
 1440 0fc6 07F18403 		add	r3, r7, #132
 1441 0fca 1946     		mov	r1, r3
 1442 0fcc FFF7FEFF 		bl	I2C_Init
 724:../src/init.c **** 	// Configure interrupts
 725:../src/init.c **** 	// Enable event interrupt and buf empty interrupt event and error interrupt event
 726:../src/init.c **** 	// Do not enable BUF interrupt if using DMA
 727:../src/init.c **** 	// I2C_IT_BUF, I2C_IT_EVT, I2C_IT_ERR
 728:../src/init.c **** 	//I2C_ITConfig(I2C2, I2C_IT_BUF | I2C_IT_EVT | I2C_IT_ERR, ENABLE);
 729:../src/init.c **** 	// Configure DMA
 730:../src/init.c **** 	DMA_DeInit(DMA_I2C2_TX);
 1443              		.loc 1 730 0
 1444 0fd0 46F2B800 		movw	r0, #24760
 1445 0fd4 C4F20200 		movt	r0, 16386
 1446 0fd8 FFF7FEFF 		bl	DMA_DeInit
 731:../src/init.c **** 	DMA_DeInit(DMA_I2C2_RX);
 1447              		.loc 1 731 0
 1448 0fdc 46F25800 		movw	r0, #24664
 1449 0fe0 C4F20200 		movt	r0, 16386
 1450 0fe4 FFF7FEFF 		bl	DMA_DeInit
 732:../src/init.c **** 	// Configure DMA1 stream 3 transfer complete interrupt
 733:../src/init.c **** 	//DMA_ITConfig(DMA1_Stream3, DMA_IT_TC | DMA_IT_DME | DMA_IT_FE, ENABLE);
 734:../src/init.c **** 	// Configure DMA1 stream 7 transfer complete interrupt
 735:../src/init.c **** 	//DMA_ITConfig(DMA1_Stream7, DMA_IT_TC | DMA_IT_DME | DMA_IT_FE, ENABLE);
 736:../src/init.c **** 	// Enable I2C 2
 737:../src/init.c **** 	I2C_Cmd(I2C2, ENABLE);
 1451              		.loc 1 737 0
 1452 0fe8 4FF4B040 		mov	r0, #22528
 1453 0fec C4F20000 		movt	r0, 16384
 1454 0ff0 4FF00101 		mov	r1, #1
 1455 0ff4 FFF7FEFF 		bl	I2C_Cmd
 738:../src/init.c **** 
 739:../src/init.c **** 	// ADC converter init
 740:../src/init.c **** 	// Enable clock(s) (84 MHz)
 741:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 1456              		.loc 1 741 0
 1457 0ff8 4FF48070 		mov	r0, #256
 1458 0ffc 4FF00101 		mov	r1, #1
 1459 1000 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 742:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 1460              		.loc 1 742 0
 1461 1004 4FF40070 		mov	r0, #512
 1462 1008 4FF00101 		mov	r1, #1
 1463 100c FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 743:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
 1464              		.loc 1 743 0
 1465 1010 4FF48060 		mov	r0, #1024
 1466 1014 4FF00101 		mov	r1, #1
 1467 1018 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 744:../src/init.c **** 	// ADC Common configuration
 745:../src/init.c **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1468              		.loc 1 745 0
 1469 101c 4FF00003 		mov	r3, #0
 1470 1020 FB65     		str	r3, [r7, #92]
 746:../src/init.c **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 1471              		.loc 1 746 0
 1472 1022 4FF00003 		mov	r3, #0
 1473 1026 BB66     		str	r3, [r7, #104]
 747:../src/init.c **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 1474              		.loc 1 747 0
 1475 1028 4FF00003 		mov	r3, #0
 1476 102c 7B66     		str	r3, [r7, #100]
 748:../src/init.c **** 	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div8;
 1477              		.loc 1 748 0
 1478 102e 4FF44033 		mov	r3, #196608
 1479 1032 3B66     		str	r3, [r7, #96]
 749:../src/init.c **** 	ADC_CommonInit(&ADC_CommonInitStructure);
 1480              		.loc 1 749 0
 1481 1034 07F15C03 		add	r3, r7, #92
 1482 1038 1846     		mov	r0, r3
 1483 103a FFF7FEFF 		bl	ADC_CommonInit
 750:../src/init.c **** 
 751:../src/init.c **** 	// Configure
 752:../src/init.c **** 	ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 1484              		.loc 1 752 0
 1485 103e 4FF00003 		mov	r3, #0
 1486 1042 FB66     		str	r3, [r7, #108]
 753:../src/init.c **** 	ADC_InitStruct.ADC_ScanConvMode = DISABLE;
 1487              		.loc 1 753 0
 1488 1044 4FF00003 		mov	r3, #0
 1489 1048 87F87030 		strb	r3, [r7, #112]
 754:../src/init.c **** 	ADC_InitStruct.ADC_ContinuousConvMode = DISABLE;
 1490              		.loc 1 754 0
 1491 104c 4FF00003 		mov	r3, #0
 1492 1050 87F87130 		strb	r3, [r7, #113]
 755:../src/init.c **** 	ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 1493              		.loc 1 755 0
 1494 1054 4FF00003 		mov	r3, #0
 1495 1058 7B67     		str	r3, [r7, #116]
 756:../src/init.c **** 	ADC_InitStruct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 1496              		.loc 1 756 0
 1497 105a 4FF00003 		mov	r3, #0
 1498 105e BB67     		str	r3, [r7, #120]
 757:../src/init.c **** 	ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 1499              		.loc 1 757 0
 1500 1060 4FF00003 		mov	r3, #0
 1501 1064 FB67     		str	r3, [r7, #124]
 758:../src/init.c **** 	ADC_InitStruct.ADC_NbrOfConversion = 2;
 1502              		.loc 1 758 0
 1503 1066 4FF00203 		mov	r3, #2
 1504 106a 87F88030 		strb	r3, [r7, #128]
 759:../src/init.c **** 
 760:../src/init.c **** 	ADC_Init(ADC1, &ADC_InitStruct);
 1505              		.loc 1 760 0
 1506 106e 4FF40050 		mov	r0, #8192
 1507 1072 C4F20100 		movt	r0, 16385
 1508 1076 07F16C03 		add	r3, r7, #108
 1509 107a 1946     		mov	r1, r3
 1510 107c FFF7FEFF 		bl	ADC_Init
 761:../src/init.c **** 	ADC_InitStruct.ADC_NbrOfConversion = 1;
 1511              		.loc 1 761 0
 1512 1080 4FF00103 		mov	r3, #1
 1513 1084 87F88030 		strb	r3, [r7, #128]
 762:../src/init.c **** 	ADC_Init(ADC2, &ADC_InitStruct);
 1514              		.loc 1 762 0
 1515 1088 4FF40450 		mov	r0, #8448
 1516 108c C4F20100 		movt	r0, 16385
 1517 1090 07F16C03 		add	r3, r7, #108
 1518 1094 1946     		mov	r1, r3
 1519 1096 FFF7FEFF 		bl	ADC_Init
 763:../src/init.c **** 	ADC_Init(ADC3, &ADC_InitStruct);
 1520              		.loc 1 763 0
 1521 109a 4FF40850 		mov	r0, #8704
 1522 109e C4F20100 		movt	r0, 16385
 1523 10a2 07F16C03 		add	r3, r7, #108
 1524 10a6 1946     		mov	r1, r3
 1525 10a8 FFF7FEFF 		bl	ADC_Init
 764:../src/init.c **** 
 765:../src/init.c **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_3Cycles);
 1526              		.loc 1 765 0
 1527 10ac 4FF40050 		mov	r0, #8192
 1528 10b0 C4F20100 		movt	r0, 16385
 1529 10b4 4FF00A01 		mov	r1, #10
 1530 10b8 4FF00102 		mov	r2, #1
 1531 10bc 4FF00003 		mov	r3, #0
 1532 10c0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 766:../src/init.c **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 2, ADC_SampleTime_3Cycles);
 1533              		.loc 1 766 0
 1534 10c4 4FF40050 		mov	r0, #8192
 1535 10c8 C4F20100 		movt	r0, 16385
 1536 10cc 4FF00B01 		mov	r1, #11
 1537 10d0 4FF00202 		mov	r2, #2
 1538 10d4 4FF00003 		mov	r3, #0
 1539 10d8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 767:../src/init.c **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 1, ADC_SampleTime_3Cycles);
 1540              		.loc 1 767 0
 1541 10dc 4FF40450 		mov	r0, #8448
 1542 10e0 C4F20100 		movt	r0, 16385
 1543 10e4 4FF00C01 		mov	r1, #12
 1544 10e8 4FF00102 		mov	r2, #1
 1545 10ec 4FF00003 		mov	r3, #0
 1546 10f0 FFF7FEFF 		bl	ADC_RegularChannelConfig
 768:../src/init.c **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_13, 1, ADC_SampleTime_3Cycles);
 1547              		.loc 1 768 0
 1548 10f4 4FF40850 		mov	r0, #8704
 1549 10f8 C4F20100 		movt	r0, 16385
 1550 10fc 4FF00D01 		mov	r1, #13
 1551 1100 4FF00102 		mov	r2, #1
 1552 1104 4FF00003 		mov	r3, #0
 1553 1108 FFF7FEFF 		bl	ADC_RegularChannelConfig
 769:../src/init.c **** 
 770:../src/init.c **** 	// Configure interrupt
 771:../src/init.c **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 1554              		.loc 1 771 0
 1555 110c 4FF40050 		mov	r0, #8192
 1556 1110 C4F20100 		movt	r0, 16385
 1557 1114 40F20521 		movw	r1, #517
 1558 1118 4FF00102 		mov	r2, #1
 1559 111c FFF7FEFF 		bl	ADC_ITConfig
 772:../src/init.c **** 	ADC_ITConfig(ADC2, ADC_IT_EOC, ENABLE);
 1560              		.loc 1 772 0
 1561 1120 4FF40450 		mov	r0, #8448
 1562 1124 C4F20100 		movt	r0, 16385
 1563 1128 40F20521 		movw	r1, #517
 1564 112c 4FF00102 		mov	r2, #1
 1565 1130 FFF7FEFF 		bl	ADC_ITConfig
 773:../src/init.c **** 	ADC_ITConfig(ADC3, ADC_IT_EOC, ENABLE);
 1566              		.loc 1 773 0
 1567 1134 4FF40850 		mov	r0, #8704
 1568 1138 C4F20100 		movt	r0, 16385
 1569 113c 40F20521 		movw	r1, #517
 1570 1140 4FF00102 		mov	r2, #1
 1571 1144 FFF7FEFF 		bl	ADC_ITConfig
 774:../src/init.c **** 	// Set interrupt after all channels are scanned
 775:../src/init.c **** 	//ADC_EOCOnEachRegularChannelCmd(ADC1, ENABLE);
 776:../src/init.c **** 
 777:../src/init.c **** 	// Enable ADC
 778:../src/init.c **** 	ADC_Cmd(ADC1, ENABLE);
 1572              		.loc 1 778 0
 1573 1148 4FF40050 		mov	r0, #8192
 1574 114c C4F20100 		movt	r0, 16385
 1575 1150 4FF00101 		mov	r1, #1
 1576 1154 FFF7FEFF 		bl	ADC_Cmd
 779:../src/init.c **** 	ADC_Cmd(ADC2, ENABLE);
 1577              		.loc 1 779 0
 1578 1158 4FF40450 		mov	r0, #8448
 1579 115c C4F20100 		movt	r0, 16385
 1580 1160 4FF00101 		mov	r1, #1
 1581 1164 FFF7FEFF 		bl	ADC_Cmd
 780:../src/init.c **** 	ADC_Cmd(ADC3, ENABLE);
 1582              		.loc 1 780 0
 1583 1168 4FF40850 		mov	r0, #8704
 1584 116c C4F20100 		movt	r0, 16385
 1585 1170 4FF00101 		mov	r1, #1
 1586 1174 FFF7FEFF 		bl	ADC_Cmd
 781:../src/init.c **** 
 782:../src/init.c **** 	// End of ADC
 783:../src/init.c **** 
 784:../src/init.c **** 	// DMA for DAC
 785:../src/init.c **** 	// DMA1_Stream5 channel7 configuration
 786:../src/init.c **** 	DMA_DeInit(DMA_DAC1);
 1587              		.loc 1 786 0
 1588 1178 46F28800 		movw	r0, #24712
 1589 117c C4F20200 		movt	r0, 16386
 1590 1180 FFF7FEFF 		bl	DMA_DeInit
 787:../src/init.c **** 	DMAInitStructure.DMA_Channel = DMA_Channel_7;
 1591              		.loc 1 787 0
 1592 1184 4FF06063 		mov	r3, #234881024
 1593 1188 3B61     		str	r3, [r7, #16]
 788:../src/init.c **** 	DMAInitStructure.DMA_PeripheralBaseAddr = (uint32_t)DAC_DHR12R1_ADDRESS;
 1594              		.loc 1 788 0
 1595 118a 47F20843 		movw	r3, #29704
 1596 118e C4F20003 		movt	r3, 16384
 1597 1192 7B61     		str	r3, [r7, #20]
 789:../src/init.c **** 	DMAInitStructure.DMA_Memory0BaseAddr = (uint32_t)&Sine12bit;
 1598              		.loc 1 789 0
 1599 1194 40F20003 		movw	r3, #:lower16:Sine12bit
 1600 1198 C0F20003 		movt	r3, #:upper16:Sine12bit
 1601 119c BB61     		str	r3, [r7, #24]
 790:../src/init.c **** 	DMAInitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 1602              		.loc 1 790 0
 1603 119e 4FF04003 		mov	r3, #64
 1604 11a2 FB61     		str	r3, [r7, #28]
 791:../src/init.c **** 	DMAInitStructure.DMA_BufferSize = 32;
 1605              		.loc 1 791 0
 1606 11a4 4FF02003 		mov	r3, #32
 1607 11a8 3B62     		str	r3, [r7, #32]
 792:../src/init.c **** 	DMAInitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 1608              		.loc 1 792 0
 1609 11aa 4FF00003 		mov	r3, #0
 1610 11ae 7B62     		str	r3, [r7, #36]
 793:../src/init.c **** 	DMAInitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 1611              		.loc 1 793 0
 1612 11b0 4FF48063 		mov	r3, #1024
 1613 11b4 BB62     		str	r3, [r7, #40]
 794:../src/init.c **** 	DMAInitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 1614              		.loc 1 794 0
 1615 11b6 4FF40063 		mov	r3, #2048
 1616 11ba FB62     		str	r3, [r7, #44]
 795:../src/init.c **** 	DMAInitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 1617              		.loc 1 795 0
 1618 11bc 4FF40053 		mov	r3, #8192
 1619 11c0 3B63     		str	r3, [r7, #48]
 796:../src/init.c **** 	DMAInitStructure.DMA_Mode = DMA_Mode_Circular;
 1620              		.loc 1 796 0
 1621 11c2 4FF48073 		mov	r3, #256
 1622 11c6 7B63     		str	r3, [r7, #52]
 797:../src/init.c **** 	DMAInitStructure.DMA_Priority = DMA_Priority_High;
 1623              		.loc 1 797 0
 1624 11c8 4FF40033 		mov	r3, #131072
 1625 11cc BB63     		str	r3, [r7, #56]
 798:../src/init.c **** 	DMAInitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 1626              		.loc 1 798 0
 1627 11ce 4FF00003 		mov	r3, #0
 1628 11d2 FB63     		str	r3, [r7, #60]
 799:../src/init.c **** 	DMAInitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 1629              		.loc 1 799 0
 1630 11d4 4FF00103 		mov	r3, #1
 1631 11d8 3B64     		str	r3, [r7, #64]
 800:../src/init.c **** 	DMAInitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 1632              		.loc 1 800 0
 1633 11da 4FF00003 		mov	r3, #0
 1634 11de 7B64     		str	r3, [r7, #68]
 801:../src/init.c **** 	DMAInitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 1635              		.loc 1 801 0
 1636 11e0 4FF00003 		mov	r3, #0
 1637 11e4 BB64     		str	r3, [r7, #72]
 802:../src/init.c **** 	DMA_Init(DMA_DAC1, &DMAInitStructure);
 1638              		.loc 1 802 0
 1639 11e6 46F28800 		movw	r0, #24712
 1640 11ea C4F20200 		movt	r0, 16386
 1641 11ee 07F11003 		add	r3, r7, #16
 1642 11f2 1946     		mov	r1, r3
 1643 11f4 FFF7FEFF 		bl	DMA_Init
 803:../src/init.c **** 
 804:../src/init.c **** 	// Enable DMA1_Stream5
 805:../src/init.c **** 	DMA_Cmd(DMA_DAC1, ENABLE);
 1644              		.loc 1 805 0
 1645 11f8 46F28800 		movw	r0, #24712
 1646 11fc C4F20200 		movt	r0, 16386
 1647 1200 4FF00101 		mov	r1, #1
 1648 1204 FFF7FEFF 		bl	DMA_Cmd
 806:../src/init.c **** 
 807:../src/init.c **** 	// DAC init
 808:../src/init.c **** 	// Enable clock
 809:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 1649              		.loc 1 809 0
 1650 1208 4FF00050 		mov	r0, #536870912
 1651 120c 4FF00101 		mov	r1, #1
 1652 1210 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 810:../src/init.c **** 	// Setup channel 1
 811:../src/init.c **** 	DAC_InitStruct.DAC_Trigger = DAC_Trigger_T6_TRGO;
 1653              		.loc 1 811 0
 1654 1214 4FF00403 		mov	r3, #4
 1655 1218 FB64     		str	r3, [r7, #76]
 812:../src/init.c **** 	DAC_InitStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 1656              		.loc 1 812 0
 1657 121a 4FF00003 		mov	r3, #0
 1658 121e 3B65     		str	r3, [r7, #80]
 813:../src/init.c **** 	DAC_InitStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 1659              		.loc 1 813 0
 1660 1220 4FF00003 		mov	r3, #0
 1661 1224 BB65     		str	r3, [r7, #88]
 814:../src/init.c **** 	DAC_Init(DAC_Channel_1, &DAC_InitStruct);
 1662              		.loc 1 814 0
 1663 1226 4FF00000 		mov	r0, #0
 1664 122a 07F14C03 		add	r3, r7, #76
 1665 122e 1946     		mov	r1, r3
 1666 1230 FFF7FEFF 		bl	DAC_Init
 815:../src/init.c **** 
 816:../src/init.c **** 	// Enable DAC Channel1
 817:../src/init.c **** 	DAC_Cmd(DAC_Channel_1, ENABLE);
 1667              		.loc 1 817 0
 1668 1234 4FF00000 		mov	r0, #0
 1669 1238 4FF00101 		mov	r1, #1
 1670 123c FFF7FEFF 		bl	DAC_Cmd
 818:../src/init.c **** 
 819:../src/init.c **** 	// Enable DMA for DAC Channel1
 820:../src/init.c **** 	DAC_DMACmd(DAC_Channel_1, ENABLE);
 1671              		.loc 1 820 0
 1672 1240 4FF00000 		mov	r0, #0
 1673 1244 4FF00101 		mov	r1, #1
 1674 1248 FFF7FEFF 		bl	DAC_DMACmd
 821:../src/init.c **** 
 822:../src/init.c **** 
 823:../src/init.c **** 	// Setup channel 2
 824:../src/init.c **** 	DAC_InitStruct.DAC_Trigger = DAC_Trigger_None;
 1675              		.loc 1 824 0
 1676 124c 4FF00003 		mov	r3, #0
 1677 1250 FB64     		str	r3, [r7, #76]
 825:../src/init.c **** 	DAC_InitStruct.DAC_WaveGeneration = DAC_WaveGeneration_Triangle;//DAC_WaveGeneration_None;
 1678              		.loc 1 825 0
 1679 1252 4FF08003 		mov	r3, #128
 1680 1256 3B65     		str	r3, [r7, #80]
 826:../src/init.c **** 	DAC_InitStruct.DAC_LFSRUnmask_TriangleAmplitude = DAC_TriangleAmplitude_1023;
 1681              		.loc 1 826 0
 1682 1258 4FF41063 		mov	r3, #2304
 1683 125c 7B65     		str	r3, [r7, #84]
 827:../src/init.c **** 	DAC_InitStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 1684              		.loc 1 827 0
 1685 125e 4FF00003 		mov	r3, #0
 1686 1262 BB65     		str	r3, [r7, #88]
 828:../src/init.c **** 
 829:../src/init.c **** 
 830:../src/init.c **** 	DAC_Init(DAC_Channel_2, &DAC_InitStruct);
 1687              		.loc 1 830 0
 1688 1264 4FF01000 		mov	r0, #16
 1689 1268 07F14C03 		add	r3, r7, #76
 1690 126c 1946     		mov	r1, r3
 1691 126e FFF7FEFF 		bl	DAC_Init
 831:../src/init.c **** 	DAC_Cmd(DAC_Channel_2, ENABLE);
 1692              		.loc 1 831 0
 1693 1272 4FF01000 		mov	r0, #16
 1694 1276 4FF00101 		mov	r1, #1
 1695 127a FFF7FEFF 		bl	DAC_Cmd
 832:../src/init.c **** 
 833:../src/init.c **** 
 834:../src/init.c **** 	// End of DAC
 835:../src/init.c **** 
 836:../src/init.c **** 	NVIC_EnableInterrupts(ENABLE);
 1696              		.loc 1 836 0
 1697 127e 4FF00100 		mov	r0, #1
 1698 1282 FFF7FEFF 		bl	NVIC_EnableInterrupts
 837:../src/init.c **** }
 1699              		.loc 1 837 0
 1700 1286 07F1D807 		add	r7, r7, #216
 1701 128a BD46     		mov	sp, r7
 1702 128c 80BD     		pop	{r7, pc}
 1703              		.cfi_endproc
 1704              	.LFE110:
 1706              	.Letext0:
 1707              		.file 2 "c:\\program files (x86)\\codesourcery\\eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../..
 1708              		.file 3 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\Device\\STM32F4xx\\Include/s
 1709              		.file 4 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\STM32F4xx_StdPeriph_Driver\\
 1710              		.file 5 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\STM32F4xx_StdPeriph_Driver\\
 1711              		.file 6 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\STM32F4xx_StdPeriph_Driver\\
 1712              		.file 7 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\STM32F4xx_StdPeriph_Driver\\
 1713              		.file 8 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\STM32F4xx_StdPeriph_Driver\\
 1714              		.file 9 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\STM32F4xx_StdPeriph_Driver\\
 1715              		.file 10 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\STM32F4xx_StdPeriph_Driver\
 1716              		.file 11 "D:\\Jure\\Projekti\\Git\\AutoPilot\\AutoPilot_SW\\Libraries\\CMSIS\\Include/core_cm4.h"
 1717              		.file 12 "../src/var.h"
DEFINED SYMBOLS
                            *ABS*:00000000 init.c
C:\Users\Jure\AppData\Local\Temp\ccwfYQje.s:18     .text:00000000 $t
C:\Users\Jure\AppData\Local\Temp\ccwfYQje.s:23     .text:00000000 System_Config
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB1PeriphClockCmd
GPIO_Init
GPIO_PinAFConfig
GPIO_WriteBit
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_OC3Init
TIM_OC3PreloadConfig
TIM_OC4Init
TIM_OC4PreloadConfig
TIM_ARRPreloadConfig
TIM_BDTRConfig
TIM_CtrlPWMOutputs
TIM_Cmd
RCC_APB1PeriphClockCmd
TIM_ICInit
TIM_ITConfig
TIM_SelectOutputTrigger
USART_Init
USART_ITConfig
USART_Cmd
DMA_DeInit
I2C_Init
I2C_Cmd
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_ITConfig
ADC_Cmd
Sine12bit
DMA_Init
DMA_Cmd
DAC_Init
DAC_Cmd
DAC_DMACmd
NVIC_EnableInterrupts
