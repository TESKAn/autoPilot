   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"init.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	System_Config
  20              		.thumb
  21              		.thumb_func
  23              	System_Config:
  24              	.LFB110:
  25              		.file 1 "../src/init.c"
   1:../src/init.c **** /*
   2:../src/init.c ****  * init.c
   3:../src/init.c ****  *
   4:../src/init.c ****  *  Created on: 26. avg. 2012
   5:../src/init.c ****  *      Author: Jure
   6:../src/init.c ****  */
   7:../src/init.c **** 
   8:../src/init.c **** #include "allinclude.h"
   9:../src/init.c **** 
  10:../src/init.c **** void System_Config(void)
  11:../src/init.c **** {
  26              		.loc 1 11 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 160
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 A8B0     		sub	sp, sp, #160
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 168
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  12:../src/init.c **** 
  13:../src/init.c **** 	//make structure for configuring pins
  14:../src/init.c **** 	GPIO_InitTypeDef  GPIO_InitStructure;
  15:../src/init.c **** 
  16:../src/init.c **** 	//make structures for configuring timers
  17:../src/init.c **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
  18:../src/init.c **** 	TIM_ICInitTypeDef TIM_ICInitStruct;
  19:../src/init.c **** 	TIM_OCInitTypeDef TIM_OCInitStruct;
  20:../src/init.c **** 	TIM_BDTRInitTypeDef TIM_BDTRInitStruct;
  21:../src/init.c **** 	I2C_InitTypeDef I2CInitStruct;
  22:../src/init.c **** 	ADC_InitTypeDef ADC_InitStruct;
  23:../src/init.c **** 	ADC_CommonInitTypeDef ADC_CommonInitStructure;
  24:../src/init.c **** 	DAC_InitTypeDef DAC_InitStruct;
  25:../src/init.c **** 
  26:../src/init.c **** 
  27:../src/init.c **** 	//make structure for configuring USART
  28:../src/init.c **** 	USART_InitTypeDef USART_InitStructure;
  29:../src/init.c **** 
  30:../src/init.c **** 	// Configure GPIO pins
  31:../src/init.c **** 	/* GPIO Peripheral clock enable */
  32:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
  41              		.loc 1 32 0
  42 0006 4FF00100 		mov	r0, #1
  43 000a 4FF00101 		mov	r1, #1
  44 000e FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  33:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
  45              		.loc 1 33 0
  46 0012 4FF00200 		mov	r0, #2
  47 0016 4FF00101 		mov	r1, #1
  48 001a FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  34:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
  49              		.loc 1 34 0
  50 001e 4FF00400 		mov	r0, #4
  51 0022 4FF00101 		mov	r1, #1
  52 0026 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  35:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
  53              		.loc 1 35 0
  54 002a 4FF00800 		mov	r0, #8
  55 002e 4FF00101 		mov	r1, #1
  56 0032 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  36:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
  57              		.loc 1 36 0
  58 0036 4FF01000 		mov	r0, #16
  59 003a 4FF00101 		mov	r1, #1
  60 003e FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
  37:../src/init.c **** 
  38:../src/init.c **** 	//GPIO A
  39:../src/init.c **** 	// A4, A5 - DAC output
  40:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
  61              		.loc 1 40 0
  62 0042 4FF03003 		mov	r3, #48
  63 0046 C7F89830 		str	r3, [r7, #152]
  41:../src/init.c **** 	//set output type
  42:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
  64              		.loc 1 42 0
  65 004a 4FF00003 		mov	r3, #0
  66 004e 87F89E30 		strb	r3, [r7, #158]
  43:../src/init.c **** 	//set pull-up
  44:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
  67              		.loc 1 44 0
  68 0052 4FF00203 		mov	r3, #2
  69 0056 87F89F30 		strb	r3, [r7, #159]
  45:../src/init.c **** 	//set pin mode to alternate function
  46:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
  70              		.loc 1 46 0
  71 005a 4FF00303 		mov	r3, #3
  72 005e 87F89C30 		strb	r3, [r7, #156]
  47:../src/init.c **** 	//set pin speed
  48:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
  73              		.loc 1 48 0
  74 0062 4FF00003 		mov	r3, #0
  75 0066 87F89D30 		strb	r3, [r7, #157]
  49:../src/init.c **** 	//write mode to selected pins and selected port
  50:../src/init.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
  76              		.loc 1 50 0
  77 006a 4FF00000 		mov	r0, #0
  78 006e C4F20200 		movt	r0, 16386
  79 0072 07F19803 		add	r3, r7, #152
  80 0076 1946     		mov	r1, r3
  81 0078 FFF7FEFF 		bl	GPIO_Init
  51:../src/init.c **** 
  52:../src/init.c **** 
  53:../src/init.c **** 	// A0 - A3, A6, A7 timer output
  54:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM2);
  82              		.loc 1 54 0
  83 007c 4FF00000 		mov	r0, #0
  84 0080 C4F20200 		movt	r0, 16386
  85 0084 4FF00001 		mov	r1, #0
  86 0088 4FF00102 		mov	r2, #1
  87 008c FFF7FEFF 		bl	GPIO_PinAFConfig
  55:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
  88              		.loc 1 55 0
  89 0090 4FF00000 		mov	r0, #0
  90 0094 C4F20200 		movt	r0, 16386
  91 0098 4FF00101 		mov	r1, #1
  92 009c 4FF00102 		mov	r2, #1
  93 00a0 FFF7FEFF 		bl	GPIO_PinAFConfig
  56:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_TIM2);
  94              		.loc 1 56 0
  95 00a4 4FF00000 		mov	r0, #0
  96 00a8 C4F20200 		movt	r0, 16386
  97 00ac 4FF00201 		mov	r1, #2
  98 00b0 4FF00102 		mov	r2, #1
  99 00b4 FFF7FEFF 		bl	GPIO_PinAFConfig
  57:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_TIM2);
 100              		.loc 1 57 0
 101 00b8 4FF00000 		mov	r0, #0
 102 00bc C4F20200 		movt	r0, 16386
 103 00c0 4FF00301 		mov	r1, #3
 104 00c4 4FF00102 		mov	r2, #1
 105 00c8 FFF7FEFF 		bl	GPIO_PinAFConfig
  58:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);
 106              		.loc 1 58 0
 107 00cc 4FF00000 		mov	r0, #0
 108 00d0 C4F20200 		movt	r0, 16386
 109 00d4 4FF00601 		mov	r1, #6
 110 00d8 4FF00202 		mov	r2, #2
 111 00dc FFF7FEFF 		bl	GPIO_PinAFConfig
  59:../src/init.c **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_TIM3);
 112              		.loc 1 59 0
 113 00e0 4FF00000 		mov	r0, #0
 114 00e4 C4F20200 		movt	r0, 16386
 115 00e8 4FF00701 		mov	r1, #7
 116 00ec 4FF00202 		mov	r2, #2
 117 00f0 FFF7FEFF 		bl	GPIO_PinAFConfig
  60:../src/init.c **** 
  61:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_6 | GPI
 118              		.loc 1 61 0
 119 00f4 4FF0CF03 		mov	r3, #207
 120 00f8 C7F89830 		str	r3, [r7, #152]
  62:../src/init.c **** 	//set output type
  63:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 121              		.loc 1 63 0
 122 00fc 4FF00003 		mov	r3, #0
 123 0100 87F89E30 		strb	r3, [r7, #158]
  64:../src/init.c **** 	//set pull-up
  65:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 124              		.loc 1 65 0
 125 0104 4FF00203 		mov	r3, #2
 126 0108 87F89F30 		strb	r3, [r7, #159]
  66:../src/init.c **** 	//set pin mode to alternate function
  67:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 127              		.loc 1 67 0
 128 010c 4FF00203 		mov	r3, #2
 129 0110 87F89C30 		strb	r3, [r7, #156]
  68:../src/init.c **** 	//set pin speed
  69:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 130              		.loc 1 69 0
 131 0114 4FF00203 		mov	r3, #2
 132 0118 87F89D30 		strb	r3, [r7, #157]
  70:../src/init.c **** 	//write mode to selected pins and selected port
  71:../src/init.c **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 133              		.loc 1 71 0
 134 011c 4FF00000 		mov	r0, #0
 135 0120 C4F20200 		movt	r0, 16386
 136 0124 07F19803 		add	r3, r7, #152
 137 0128 1946     		mov	r1, r3
 138 012a FFF7FEFF 		bl	GPIO_Init
  72:../src/init.c **** 
  73:../src/init.c **** 	//GPIO B
  74:../src/init.c **** 	//connect pins B0 and B1 to timer output
  75:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_TIM3);
 139              		.loc 1 75 0
 140 012e 4FF48060 		mov	r0, #1024
 141 0132 C4F20200 		movt	r0, 16386
 142 0136 4FF00001 		mov	r1, #0
 143 013a 4FF00202 		mov	r2, #2
 144 013e FFF7FEFF 		bl	GPIO_PinAFConfig
  76:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_TIM3);
 145              		.loc 1 76 0
 146 0142 4FF48060 		mov	r0, #1024
 147 0146 C4F20200 		movt	r0, 16386
 148 014a 4FF00101 		mov	r1, #1
 149 014e 4FF00202 		mov	r2, #2
 150 0152 FFF7FEFF 		bl	GPIO_PinAFConfig
  77:../src/init.c **** 	//select pins 0 and 1
  78:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 151              		.loc 1 78 0
 152 0156 4FF00303 		mov	r3, #3
 153 015a C7F89830 		str	r3, [r7, #152]
  79:../src/init.c **** 	//set output type
  80:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 154              		.loc 1 80 0
 155 015e 4FF00003 		mov	r3, #0
 156 0162 87F89E30 		strb	r3, [r7, #158]
  81:../src/init.c **** 	//set pull-up
  82:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 157              		.loc 1 82 0
 158 0166 4FF00203 		mov	r3, #2
 159 016a 87F89F30 		strb	r3, [r7, #159]
  83:../src/init.c **** 	//set pin mode to alternate function
  84:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 160              		.loc 1 84 0
 161 016e 4FF00203 		mov	r3, #2
 162 0172 87F89C30 		strb	r3, [r7, #156]
  85:../src/init.c **** 	//set pin speed
  86:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 163              		.loc 1 86 0
 164 0176 4FF00203 		mov	r3, #2
 165 017a 87F89D30 		strb	r3, [r7, #157]
  87:../src/init.c **** 	//write mode to selected pins and selected port
  88:../src/init.c **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 166              		.loc 1 88 0
 167 017e 4FF48060 		mov	r0, #1024
 168 0182 C4F20200 		movt	r0, 16386
 169 0186 07F19803 		add	r3, r7, #152
 170 018a 1946     		mov	r1, r3
 171 018c FFF7FEFF 		bl	GPIO_Init
  89:../src/init.c **** 
  90:../src/init.c **** 	//connect pins B6 and B7 to USART
  91:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 172              		.loc 1 91 0
 173 0190 4FF48060 		mov	r0, #1024
 174 0194 C4F20200 		movt	r0, 16386
 175 0198 4FF00601 		mov	r1, #6
 176 019c 4FF00702 		mov	r2, #7
 177 01a0 FFF7FEFF 		bl	GPIO_PinAFConfig
  92:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 178              		.loc 1 92 0
 179 01a4 4FF48060 		mov	r0, #1024
 180 01a8 C4F20200 		movt	r0, 16386
 181 01ac 4FF00701 		mov	r1, #7
 182 01b0 4FF00702 		mov	r2, #7
 183 01b4 FFF7FEFF 		bl	GPIO_PinAFConfig
  93:../src/init.c **** 	//select pins 6 and 7
  94:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 184              		.loc 1 94 0
 185 01b8 4FF0C003 		mov	r3, #192
 186 01bc C7F89830 		str	r3, [r7, #152]
  95:../src/init.c **** 	//set output type
  96:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 187              		.loc 1 96 0
 188 01c0 4FF00003 		mov	r3, #0
 189 01c4 87F89E30 		strb	r3, [r7, #158]
  97:../src/init.c **** 	//set pull-up
  98:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 190              		.loc 1 98 0
 191 01c8 4FF00003 		mov	r3, #0
 192 01cc 87F89F30 		strb	r3, [r7, #159]
  99:../src/init.c **** 	//set pin mode to alternate function
 100:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 193              		.loc 1 100 0
 194 01d0 4FF00203 		mov	r3, #2
 195 01d4 87F89C30 		strb	r3, [r7, #156]
 101:../src/init.c **** 	//set pin speed
 102:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 196              		.loc 1 102 0
 197 01d8 4FF00203 		mov	r3, #2
 198 01dc 87F89D30 		strb	r3, [r7, #157]
 103:../src/init.c **** 	//write mode to selected pins and selected port
 104:../src/init.c **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 199              		.loc 1 104 0
 200 01e0 4FF48060 		mov	r0, #1024
 201 01e4 C4F20200 		movt	r0, 16386
 202 01e8 07F19803 		add	r3, r7, #152
 203 01ec 1946     		mov	r1, r3
 204 01ee FFF7FEFF 		bl	GPIO_Init
 105:../src/init.c **** 
 106:../src/init.c **** 	// Connect pins B10 and B11 to I2C 2
 107:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_I2C2);
 205              		.loc 1 107 0
 206 01f2 4FF48060 		mov	r0, #1024
 207 01f6 C4F20200 		movt	r0, 16386
 208 01fa 4FF00A01 		mov	r1, #10
 209 01fe 4FF00402 		mov	r2, #4
 210 0202 FFF7FEFF 		bl	GPIO_PinAFConfig
 108:../src/init.c **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_I2C2);
 211              		.loc 1 108 0
 212 0206 4FF48060 		mov	r0, #1024
 213 020a C4F20200 		movt	r0, 16386
 214 020e 4FF00B01 		mov	r1, #11
 215 0212 4FF00402 		mov	r2, #4
 216 0216 FFF7FEFF 		bl	GPIO_PinAFConfig
 109:../src/init.c **** 	// Select pins 10 and 11
 110:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 217              		.loc 1 110 0
 218 021a 4FF44063 		mov	r3, #3072
 219 021e C7F89830 		str	r3, [r7, #152]
 111:../src/init.c **** 	//set output type
 112:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;	// open drain output
 220              		.loc 1 112 0
 221 0222 4FF00103 		mov	r3, #1
 222 0226 87F89E30 		strb	r3, [r7, #158]
 113:../src/init.c **** 	//set pull-up
 114:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 223              		.loc 1 114 0
 224 022a 4FF00103 		mov	r3, #1
 225 022e 87F89F30 		strb	r3, [r7, #159]
 115:../src/init.c **** 	//set pin mode to alternate function
 116:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 226              		.loc 1 116 0
 227 0232 4FF00203 		mov	r3, #2
 228 0236 87F89C30 		strb	r3, [r7, #156]
 117:../src/init.c **** 	//set pin speed
 118:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 229              		.loc 1 118 0
 230 023a 4FF00203 		mov	r3, #2
 231 023e 87F89D30 		strb	r3, [r7, #157]
 119:../src/init.c **** 	//write mode to selected pins and selected port
 120:../src/init.c **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 232              		.loc 1 120 0
 233 0242 4FF48060 		mov	r0, #1024
 234 0246 C4F20200 		movt	r0, 16386
 235 024a 07F19803 		add	r3, r7, #152
 236 024e 1946     		mov	r1, r3
 237 0250 FFF7FEFF 		bl	GPIO_Init
 121:../src/init.c **** 
 122:../src/init.c **** 	//GPIO C
 123:../src/init.c **** 	//connect pins C0, C1, C2, C3 to ADC input
 124:../src/init.c **** 	//select pins 0, 1, 2, 3
 125:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 238              		.loc 1 125 0
 239 0254 4FF00F03 		mov	r3, #15
 240 0258 C7F89830 		str	r3, [r7, #152]
 126:../src/init.c **** 	//set output type
 127:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 241              		.loc 1 127 0
 242 025c 4FF00003 		mov	r3, #0
 243 0260 87F89E30 		strb	r3, [r7, #158]
 128:../src/init.c **** 	//set pull-up
 129:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 244              		.loc 1 129 0
 245 0264 4FF00003 		mov	r3, #0
 246 0268 87F89F30 		strb	r3, [r7, #159]
 130:../src/init.c **** 	//set pin mode to alternate function
 131:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 247              		.loc 1 131 0
 248 026c 4FF00303 		mov	r3, #3
 249 0270 87F89C30 		strb	r3, [r7, #156]
 132:../src/init.c **** 	//set pin speed
 133:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 250              		.loc 1 133 0
 251 0274 4FF00103 		mov	r3, #1
 252 0278 87F89D30 		strb	r3, [r7, #157]
 134:../src/init.c **** 	//write mode to selected pins and selected port
 135:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 253              		.loc 1 135 0
 254 027c 4FF40060 		mov	r0, #2048
 255 0280 C4F20200 		movt	r0, 16386
 256 0284 07F19803 		add	r3, r7, #152
 257 0288 1946     		mov	r1, r3
 258 028a FFF7FEFF 		bl	GPIO_Init
 136:../src/init.c **** 
 137:../src/init.c **** 	//connect pins C6, C7, C8, C9 to timer input
 138:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_TIM8);
 259              		.loc 1 138 0
 260 028e 4FF40060 		mov	r0, #2048
 261 0292 C4F20200 		movt	r0, 16386
 262 0296 4FF00601 		mov	r1, #6
 263 029a 4FF00302 		mov	r2, #3
 264 029e FFF7FEFF 		bl	GPIO_PinAFConfig
 139:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_TIM8);
 265              		.loc 1 139 0
 266 02a2 4FF40060 		mov	r0, #2048
 267 02a6 C4F20200 		movt	r0, 16386
 268 02aa 4FF00701 		mov	r1, #7
 269 02ae 4FF00302 		mov	r2, #3
 270 02b2 FFF7FEFF 		bl	GPIO_PinAFConfig
 140:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_TIM8);
 271              		.loc 1 140 0
 272 02b6 4FF40060 		mov	r0, #2048
 273 02ba C4F20200 		movt	r0, 16386
 274 02be 4FF00801 		mov	r1, #8
 275 02c2 4FF00302 		mov	r2, #3
 276 02c6 FFF7FEFF 		bl	GPIO_PinAFConfig
 141:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_TIM8);
 277              		.loc 1 141 0
 278 02ca 4FF40060 		mov	r0, #2048
 279 02ce C4F20200 		movt	r0, 16386
 280 02d2 4FF00901 		mov	r1, #9
 281 02d6 4FF00302 		mov	r2, #3
 282 02da FFF7FEFF 		bl	GPIO_PinAFConfig
 142:../src/init.c **** 	//select pins 0 and 1
 143:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
 283              		.loc 1 143 0
 284 02de 4FF47073 		mov	r3, #960
 285 02e2 C7F89830 		str	r3, [r7, #152]
 144:../src/init.c **** 	//set output type
 145:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 286              		.loc 1 145 0
 287 02e6 4FF00003 		mov	r3, #0
 288 02ea 87F89E30 		strb	r3, [r7, #158]
 146:../src/init.c **** 	//set pull-up
 147:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 289              		.loc 1 147 0
 290 02ee 4FF00203 		mov	r3, #2
 291 02f2 87F89F30 		strb	r3, [r7, #159]
 148:../src/init.c **** 	//set pin mode to alternate function
 149:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 292              		.loc 1 149 0
 293 02f6 4FF00203 		mov	r3, #2
 294 02fa 87F89C30 		strb	r3, [r7, #156]
 150:../src/init.c **** 	//set pin speed
 151:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 295              		.loc 1 151 0
 296 02fe 4FF00203 		mov	r3, #2
 297 0302 87F89D30 		strb	r3, [r7, #157]
 152:../src/init.c **** 	//write mode to selected pins and selected port
 153:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 298              		.loc 1 153 0
 299 0306 4FF40060 		mov	r0, #2048
 300 030a C4F20200 		movt	r0, 16386
 301 030e 07F19803 		add	r3, r7, #152
 302 0312 1946     		mov	r1, r3
 303 0314 FFF7FEFF 		bl	GPIO_Init
 154:../src/init.c **** 
 155:../src/init.c **** 	//connect pins C10 and C11 to USART
 156:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART3);
 304              		.loc 1 156 0
 305 0318 4FF40060 		mov	r0, #2048
 306 031c C4F20200 		movt	r0, 16386
 307 0320 4FF00A01 		mov	r1, #10
 308 0324 4FF00702 		mov	r2, #7
 309 0328 FFF7FEFF 		bl	GPIO_PinAFConfig
 157:../src/init.c **** 	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_USART3);
 310              		.loc 1 157 0
 311 032c 4FF40060 		mov	r0, #2048
 312 0330 C4F20200 		movt	r0, 16386
 313 0334 4FF00B01 		mov	r1, #11
 314 0338 4FF00702 		mov	r2, #7
 315 033c FFF7FEFF 		bl	GPIO_PinAFConfig
 158:../src/init.c **** 	//select pins 10 and 11
 159:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
 316              		.loc 1 159 0
 317 0340 4FF44063 		mov	r3, #3072
 318 0344 C7F89830 		str	r3, [r7, #152]
 160:../src/init.c **** 	//set output type
 161:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 319              		.loc 1 161 0
 320 0348 4FF00003 		mov	r3, #0
 321 034c 87F89E30 		strb	r3, [r7, #158]
 162:../src/init.c **** 	//set pull-up
 163:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 322              		.loc 1 163 0
 323 0350 4FF00003 		mov	r3, #0
 324 0354 87F89F30 		strb	r3, [r7, #159]
 164:../src/init.c **** 	//set pin mode to alternate function
 165:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 325              		.loc 1 165 0
 326 0358 4FF00203 		mov	r3, #2
 327 035c 87F89C30 		strb	r3, [r7, #156]
 166:../src/init.c **** 	//set pin speed
 167:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 328              		.loc 1 167 0
 329 0360 4FF00203 		mov	r3, #2
 330 0364 87F89D30 		strb	r3, [r7, #157]
 168:../src/init.c **** 	//write mode to selected pins and selected port
 169:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 331              		.loc 1 169 0
 332 0368 4FF40060 		mov	r0, #2048
 333 036c C4F20200 		movt	r0, 16386
 334 0370 07F19803 		add	r3, r7, #152
 335 0374 1946     		mov	r1, r3
 336 0376 FFF7FEFF 		bl	GPIO_Init
 170:../src/init.c **** 	// Set C12 as input
 171:../src/init.c **** 	// Select C12
 172:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 337              		.loc 1 172 0
 338 037a 4FF48053 		mov	r3, #4096
 339 037e C7F89830 		str	r3, [r7, #152]
 173:../src/init.c **** 	//set output type
 174:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 340              		.loc 1 174 0
 341 0382 4FF00003 		mov	r3, #0
 342 0386 87F89E30 		strb	r3, [r7, #158]
 175:../src/init.c **** 	//set pull-up
 176:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 343              		.loc 1 176 0
 344 038a 4FF00003 		mov	r3, #0
 345 038e 87F89F30 		strb	r3, [r7, #159]
 177:../src/init.c **** 	//set pin mode to alternate function
 178:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 346              		.loc 1 178 0
 347 0392 4FF00003 		mov	r3, #0
 348 0396 87F89C30 		strb	r3, [r7, #156]
 179:../src/init.c **** 	//set pin speed
 180:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 349              		.loc 1 180 0
 350 039a 4FF00003 		mov	r3, #0
 351 039e 87F89D30 		strb	r3, [r7, #157]
 181:../src/init.c **** 	//write mode to selected pins and selected port
 182:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 352              		.loc 1 182 0
 353 03a2 4FF40060 		mov	r0, #2048
 354 03a6 C4F20200 		movt	r0, 16386
 355 03aa 07F19803 		add	r3, r7, #152
 356 03ae 1946     		mov	r1, r3
 357 03b0 FFF7FEFF 		bl	GPIO_Init
 183:../src/init.c **** 	// Set C4 as output
 184:../src/init.c **** 	// Select C4
 185:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 358              		.loc 1 185 0
 359 03b4 4FF01003 		mov	r3, #16
 360 03b8 C7F89830 		str	r3, [r7, #152]
 186:../src/init.c **** 	//set output type
 187:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 361              		.loc 1 187 0
 362 03bc 4FF00003 		mov	r3, #0
 363 03c0 87F89E30 		strb	r3, [r7, #158]
 188:../src/init.c **** 	//set pull-up
 189:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 364              		.loc 1 189 0
 365 03c4 4FF00203 		mov	r3, #2
 366 03c8 87F89F30 		strb	r3, [r7, #159]
 190:../src/init.c **** 	//set pin mode to alternate function
 191:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 367              		.loc 1 191 0
 368 03cc 4FF00103 		mov	r3, #1
 369 03d0 87F89C30 		strb	r3, [r7, #156]
 192:../src/init.c **** 	//set pin speed
 193:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 370              		.loc 1 193 0
 371 03d4 4FF00003 		mov	r3, #0
 372 03d8 87F89D30 		strb	r3, [r7, #157]
 194:../src/init.c **** 	//write mode to selected pins and selected port
 195:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 373              		.loc 1 195 0
 374 03dc 4FF40060 		mov	r0, #2048
 375 03e0 C4F20200 		movt	r0, 16386
 376 03e4 07F19803 		add	r3, r7, #152
 377 03e8 1946     		mov	r1, r3
 378 03ea FFF7FEFF 		bl	GPIO_Init
 196:../src/init.c **** 	// Set pin to 0
 197:../src/init.c **** 	GPIO_WriteBit(GPIOC, GPIO_Pin_4, 0);
 379              		.loc 1 197 0
 380 03ee 4FF40060 		mov	r0, #2048
 381 03f2 C4F20200 		movt	r0, 16386
 382 03f6 4FF01001 		mov	r1, #16
 383 03fa 4FF00002 		mov	r2, #0
 384 03fe FFF7FEFF 		bl	GPIO_WriteBit
 198:../src/init.c **** 	// Set C5 as input
 199:../src/init.c **** 	// Select C5
 200:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 385              		.loc 1 200 0
 386 0402 4FF02003 		mov	r3, #32
 387 0406 C7F89830 		str	r3, [r7, #152]
 201:../src/init.c **** 	//set output type
 202:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 388              		.loc 1 202 0
 389 040a 4FF00003 		mov	r3, #0
 390 040e 87F89E30 		strb	r3, [r7, #158]
 203:../src/init.c **** 	//set pull-up
 204:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 391              		.loc 1 204 0
 392 0412 4FF00003 		mov	r3, #0
 393 0416 87F89F30 		strb	r3, [r7, #159]
 205:../src/init.c **** 	//set pin mode to alternate function
 206:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 394              		.loc 1 206 0
 395 041a 4FF00003 		mov	r3, #0
 396 041e 87F89C30 		strb	r3, [r7, #156]
 207:../src/init.c **** 	//set pin speed
 208:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 397              		.loc 1 208 0
 398 0422 4FF00003 		mov	r3, #0
 399 0426 87F89D30 		strb	r3, [r7, #157]
 209:../src/init.c **** 	//write mode to selected pins and selected port
 210:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 400              		.loc 1 210 0
 401 042a 4FF40060 		mov	r0, #2048
 402 042e C4F20200 		movt	r0, 16386
 403 0432 07F19803 		add	r3, r7, #152
 404 0436 1946     		mov	r1, r3
 405 0438 FFF7FEFF 		bl	GPIO_Init
 211:../src/init.c **** 	// Set C15 as output, set to 1, pull - up
 212:../src/init.c **** 	// Select C15
 213:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 406              		.loc 1 213 0
 407 043c 4FF40043 		mov	r3, #32768
 408 0440 C7F89830 		str	r3, [r7, #152]
 214:../src/init.c **** 	//set output type
 215:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 409              		.loc 1 215 0
 410 0444 4FF00003 		mov	r3, #0
 411 0448 87F89E30 		strb	r3, [r7, #158]
 216:../src/init.c **** 	//set pull-up
 217:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 412              		.loc 1 217 0
 413 044c 4FF00103 		mov	r3, #1
 414 0450 87F89F30 		strb	r3, [r7, #159]
 218:../src/init.c **** 	//set pin mode to alternate function
 219:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 415              		.loc 1 219 0
 416 0454 4FF00103 		mov	r3, #1
 417 0458 87F89C30 		strb	r3, [r7, #156]
 220:../src/init.c **** 	//set pin speed
 221:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 418              		.loc 1 221 0
 419 045c 4FF00003 		mov	r3, #0
 420 0460 87F89D30 		strb	r3, [r7, #157]
 222:../src/init.c **** 	//write mode to selected pins and selected port
 223:../src/init.c **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 421              		.loc 1 223 0
 422 0464 4FF40060 		mov	r0, #2048
 423 0468 C4F20200 		movt	r0, 16386
 424 046c 07F19803 		add	r3, r7, #152
 425 0470 1946     		mov	r1, r3
 426 0472 FFF7FEFF 		bl	GPIO_Init
 224:../src/init.c **** 	// Set pin to 1
 225:../src/init.c **** 	GPIO_WriteBit(GPIOC, GPIO_Pin_15, 1);
 427              		.loc 1 225 0
 428 0476 4FF40060 		mov	r0, #2048
 429 047a C4F20200 		movt	r0, 16386
 430 047e 4FF40041 		mov	r1, #32768
 431 0482 4FF00102 		mov	r2, #1
 432 0486 FFF7FEFF 		bl	GPIO_WriteBit
 226:../src/init.c **** 
 227:../src/init.c **** 
 228:../src/init.c **** 	//GPIO D
 229:../src/init.c **** 	//connect pins D5 and D6 to USART2
 230:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
 433              		.loc 1 230 0
 434 048a 4FF44060 		mov	r0, #3072
 435 048e C4F20200 		movt	r0, 16386
 436 0492 4FF00501 		mov	r1, #5
 437 0496 4FF00702 		mov	r2, #7
 438 049a FFF7FEFF 		bl	GPIO_PinAFConfig
 231:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);
 439              		.loc 1 231 0
 440 049e 4FF44060 		mov	r0, #3072
 441 04a2 C4F20200 		movt	r0, 16386
 442 04a6 4FF00601 		mov	r1, #6
 443 04aa 4FF00702 		mov	r2, #7
 444 04ae FFF7FEFF 		bl	GPIO_PinAFConfig
 232:../src/init.c **** 	//select pins 5 and 6
 233:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
 445              		.loc 1 233 0
 446 04b2 4FF06003 		mov	r3, #96
 447 04b6 C7F89830 		str	r3, [r7, #152]
 234:../src/init.c **** 	//set output type
 235:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 448              		.loc 1 235 0
 449 04ba 4FF00003 		mov	r3, #0
 450 04be 87F89E30 		strb	r3, [r7, #158]
 236:../src/init.c **** 	//set pull-up
 237:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 451              		.loc 1 237 0
 452 04c2 4FF00003 		mov	r3, #0
 453 04c6 87F89F30 		strb	r3, [r7, #159]
 238:../src/init.c **** 	//set pin mode to alternate function
 239:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 454              		.loc 1 239 0
 455 04ca 4FF00203 		mov	r3, #2
 456 04ce 87F89C30 		strb	r3, [r7, #156]
 240:../src/init.c **** 	//set pin speed
 241:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 457              		.loc 1 241 0
 458 04d2 4FF00203 		mov	r3, #2
 459 04d6 87F89D30 		strb	r3, [r7, #157]
 242:../src/init.c **** 	//write mode to selected pins and selected port
 243:../src/init.c **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 460              		.loc 1 243 0
 461 04da 4FF44060 		mov	r0, #3072
 462 04de C4F20200 		movt	r0, 16386
 463 04e2 07F19803 		add	r3, r7, #152
 464 04e6 1946     		mov	r1, r3
 465 04e8 FFF7FEFF 		bl	GPIO_Init
 244:../src/init.c **** 	// Pins 8, 9, 10 as output low
 245:../src/init.c **** 	//select pins 8,9,10
 246:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10;
 466              		.loc 1 246 0
 467 04ec 4FF4E063 		mov	r3, #1792
 468 04f0 C7F89830 		str	r3, [r7, #152]
 247:../src/init.c **** 	//set output type
 248:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 469              		.loc 1 248 0
 470 04f4 4FF00003 		mov	r3, #0
 471 04f8 87F89E30 		strb	r3, [r7, #158]
 249:../src/init.c **** 	//set pull-up
 250:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 472              		.loc 1 250 0
 473 04fc 4FF00003 		mov	r3, #0
 474 0500 87F89F30 		strb	r3, [r7, #159]
 251:../src/init.c **** 	//set pin mode to alternate function
 252:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 475              		.loc 1 252 0
 476 0504 4FF00103 		mov	r3, #1
 477 0508 87F89C30 		strb	r3, [r7, #156]
 253:../src/init.c **** 	//set pin speed
 254:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 478              		.loc 1 254 0
 479 050c 4FF00003 		mov	r3, #0
 480 0510 87F89D30 		strb	r3, [r7, #157]
 255:../src/init.c **** 	//write mode to selected pins and selected port
 256:../src/init.c **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 481              		.loc 1 256 0
 482 0514 4FF44060 		mov	r0, #3072
 483 0518 C4F20200 		movt	r0, 16386
 484 051c 07F19803 		add	r3, r7, #152
 485 0520 1946     		mov	r1, r3
 486 0522 FFF7FEFF 		bl	GPIO_Init
 257:../src/init.c **** 	// Set pins to 0
 258:../src/init.c **** 	GPIO_WriteBit(GPIOD, GPIO_Pin_8, 0);
 487              		.loc 1 258 0
 488 0526 4FF44060 		mov	r0, #3072
 489 052a C4F20200 		movt	r0, 16386
 490 052e 4FF48071 		mov	r1, #256
 491 0532 4FF00002 		mov	r2, #0
 492 0536 FFF7FEFF 		bl	GPIO_WriteBit
 259:../src/init.c **** 	GPIO_WriteBit(GPIOD, GPIO_Pin_9, 0);
 493              		.loc 1 259 0
 494 053a 4FF44060 		mov	r0, #3072
 495 053e C4F20200 		movt	r0, 16386
 496 0542 4FF40071 		mov	r1, #512
 497 0546 4FF00002 		mov	r2, #0
 498 054a FFF7FEFF 		bl	GPIO_WriteBit
 260:../src/init.c **** 	GPIO_WriteBit(GPIOD, GPIO_Pin_10, 0);
 499              		.loc 1 260 0
 500 054e 4FF44060 		mov	r0, #3072
 501 0552 C4F20200 		movt	r0, 16386
 502 0556 4FF48061 		mov	r1, #1024
 503 055a 4FF00002 		mov	r2, #0
 504 055e FFF7FEFF 		bl	GPIO_WriteBit
 261:../src/init.c **** 
 262:../src/init.c **** 	//configure structure
 263:../src/init.c **** 	//select pins
 264:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 505              		.loc 1 264 0
 506 0562 4FF00103 		mov	r3, #1
 507 0566 C7F89830 		str	r3, [r7, #152]
 265:../src/init.c **** 	//set output type
 266:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 508              		.loc 1 266 0
 509 056a 4FF00003 		mov	r3, #0
 510 056e 87F89E30 		strb	r3, [r7, #158]
 267:../src/init.c **** 	//set pin speed
 268:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 511              		.loc 1 268 0
 512 0572 4FF00203 		mov	r3, #2
 513 0576 87F89D30 		strb	r3, [r7, #157]
 269:../src/init.c **** 	//set pull-up
 270:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 514              		.loc 1 270 0
 515 057a 4FF00003 		mov	r3, #0
 516 057e 87F89F30 		strb	r3, [r7, #159]
 271:../src/init.c **** 	//set pin mode
 272:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 517              		.loc 1 272 0
 518 0582 4FF00103 		mov	r3, #1
 519 0586 87F89C30 		strb	r3, [r7, #156]
 273:../src/init.c **** 	//write mode to selected pins and selected port
 274:../src/init.c **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 520              		.loc 1 274 0
 521 058a 4FF44060 		mov	r0, #3072
 522 058e C4F20200 		movt	r0, 16386
 523 0592 07F19803 		add	r3, r7, #152
 524 0596 1946     		mov	r1, r3
 525 0598 FFF7FEFF 		bl	GPIO_Init
 275:../src/init.c **** 
 276:../src/init.c **** 	//connect pins D12, D13, D14, D15 to timer input
 277:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 526              		.loc 1 277 0
 527 059c 4FF44060 		mov	r0, #3072
 528 05a0 C4F20200 		movt	r0, 16386
 529 05a4 4FF00C01 		mov	r1, #12
 530 05a8 4FF00202 		mov	r2, #2
 531 05ac FFF7FEFF 		bl	GPIO_PinAFConfig
 278:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 532              		.loc 1 278 0
 533 05b0 4FF44060 		mov	r0, #3072
 534 05b4 C4F20200 		movt	r0, 16386
 535 05b8 4FF00D01 		mov	r1, #13
 536 05bc 4FF00202 		mov	r2, #2
 537 05c0 FFF7FEFF 		bl	GPIO_PinAFConfig
 279:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 538              		.loc 1 279 0
 539 05c4 4FF44060 		mov	r0, #3072
 540 05c8 C4F20200 		movt	r0, 16386
 541 05cc 4FF00E01 		mov	r1, #14
 542 05d0 4FF00202 		mov	r2, #2
 543 05d4 FFF7FEFF 		bl	GPIO_PinAFConfig
 280:../src/init.c **** 	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 544              		.loc 1 280 0
 545 05d8 4FF44060 		mov	r0, #3072
 546 05dc C4F20200 		movt	r0, 16386
 547 05e0 4FF00F01 		mov	r1, #15
 548 05e4 4FF00202 		mov	r2, #2
 549 05e8 FFF7FEFF 		bl	GPIO_PinAFConfig
 281:../src/init.c **** 	//select pins 12 - 15
 282:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 550              		.loc 1 282 0
 551 05ec 4FF47043 		mov	r3, #61440
 552 05f0 C7F89830 		str	r3, [r7, #152]
 283:../src/init.c **** 	//set output type
 284:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 553              		.loc 1 284 0
 554 05f4 4FF00003 		mov	r3, #0
 555 05f8 87F89E30 		strb	r3, [r7, #158]
 285:../src/init.c **** 	//set pull-up
 286:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 556              		.loc 1 286 0
 557 05fc 4FF00203 		mov	r3, #2
 558 0600 87F89F30 		strb	r3, [r7, #159]
 287:../src/init.c **** 	//set pin mode to alternate function
 288:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 559              		.loc 1 288 0
 560 0604 4FF00203 		mov	r3, #2
 561 0608 87F89C30 		strb	r3, [r7, #156]
 289:../src/init.c **** 	//set pin speed
 290:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 562              		.loc 1 290 0
 563 060c 4FF00203 		mov	r3, #2
 564 0610 87F89D30 		strb	r3, [r7, #157]
 291:../src/init.c **** 	//write mode to selected pins and selected port
 292:../src/init.c **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 565              		.loc 1 292 0
 566 0614 4FF44060 		mov	r0, #3072
 567 0618 C4F20200 		movt	r0, 16386
 568 061c 07F19803 		add	r3, r7, #152
 569 0620 1946     		mov	r1, r3
 570 0622 FFF7FEFF 		bl	GPIO_Init
 293:../src/init.c **** 
 294:../src/init.c **** 	//GPIO E
 295:../src/init.c **** 	//connect pin E5 to timer input
 296:../src/init.c **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource5, GPIO_AF_TIM9);
 571              		.loc 1 296 0
 572 0626 4FF48050 		mov	r0, #4096
 573 062a C4F20200 		movt	r0, 16386
 574 062e 4FF00501 		mov	r1, #5
 575 0632 4FF00302 		mov	r2, #3
 576 0636 FFF7FEFF 		bl	GPIO_PinAFConfig
 297:../src/init.c **** 	//select pins 12 - 15
 298:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 577              		.loc 1 298 0
 578 063a 4FF02003 		mov	r3, #32
 579 063e C7F89830 		str	r3, [r7, #152]
 299:../src/init.c **** 	//set output type
 300:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	// push/pull
 580              		.loc 1 300 0
 581 0642 4FF00003 		mov	r3, #0
 582 0646 87F89E30 		strb	r3, [r7, #158]
 301:../src/init.c **** 	//set pull-up
 302:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 583              		.loc 1 302 0
 584 064a 4FF00203 		mov	r3, #2
 585 064e 87F89F30 		strb	r3, [r7, #159]
 303:../src/init.c **** 	//set pin mode to alternate function
 304:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 586              		.loc 1 304 0
 587 0652 4FF00203 		mov	r3, #2
 588 0656 87F89C30 		strb	r3, [r7, #156]
 305:../src/init.c **** 	//set pin speed
 306:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 589              		.loc 1 306 0
 590 065a 4FF00203 		mov	r3, #2
 591 065e 87F89D30 		strb	r3, [r7, #157]
 307:../src/init.c **** 	//write mode to selected pins and selected port
 308:../src/init.c **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 592              		.loc 1 308 0
 593 0662 4FF48050 		mov	r0, #4096
 594 0666 C4F20200 		movt	r0, 16386
 595 066a 07F19803 		add	r3, r7, #152
 596 066e 1946     		mov	r1, r3
 597 0670 FFF7FEFF 		bl	GPIO_Init
 309:../src/init.c **** 
 310:../src/init.c **** 	//config GPIOE pins 9,11,13,14 for output compare
 311:../src/init.c **** 	//set AF pin source to TIM1
 312:../src/init.c **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource9, GPIO_AF_TIM1);
 598              		.loc 1 312 0
 599 0674 4FF48050 		mov	r0, #4096
 600 0678 C4F20200 		movt	r0, 16386
 601 067c 4FF00901 		mov	r1, #9
 602 0680 4FF00102 		mov	r2, #1
 603 0684 FFF7FEFF 		bl	GPIO_PinAFConfig
 313:../src/init.c **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_TIM1);
 604              		.loc 1 313 0
 605 0688 4FF48050 		mov	r0, #4096
 606 068c C4F20200 		movt	r0, 16386
 607 0690 4FF00B01 		mov	r1, #11
 608 0694 4FF00102 		mov	r2, #1
 609 0698 FFF7FEFF 		bl	GPIO_PinAFConfig
 314:../src/init.c **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_TIM1);
 610              		.loc 1 314 0
 611 069c 4FF48050 		mov	r0, #4096
 612 06a0 C4F20200 		movt	r0, 16386
 613 06a4 4FF00D01 		mov	r1, #13
 614 06a8 4FF00102 		mov	r2, #1
 615 06ac FFF7FEFF 		bl	GPIO_PinAFConfig
 315:../src/init.c **** 	GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_TIM1);
 616              		.loc 1 315 0
 617 06b0 4FF48050 		mov	r0, #4096
 618 06b4 C4F20200 		movt	r0, 16386
 619 06b8 4FF00E01 		mov	r1, #14
 620 06bc 4FF00102 		mov	r2, #1
 621 06c0 FFF7FEFF 		bl	GPIO_PinAFConfig
 316:../src/init.c **** 	//configure structure
 317:../src/init.c **** 	//select pins
 318:../src/init.c **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_14;
 622              		.loc 1 318 0
 623 06c4 4FF4D443 		mov	r3, #27136
 624 06c8 C7F89830 		str	r3, [r7, #152]
 319:../src/init.c **** 	//set output type
 320:../src/init.c **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 625              		.loc 1 320 0
 626 06cc 4FF00003 		mov	r3, #0
 627 06d0 87F89E30 		strb	r3, [r7, #158]
 321:../src/init.c **** 	//set pin speed
 322:../src/init.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 628              		.loc 1 322 0
 629 06d4 4FF00203 		mov	r3, #2
 630 06d8 87F89D30 		strb	r3, [r7, #157]
 323:../src/init.c **** 	//set pull-up
 324:../src/init.c **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 631              		.loc 1 324 0
 632 06dc 4FF00203 		mov	r3, #2
 633 06e0 87F89F30 		strb	r3, [r7, #159]
 325:../src/init.c **** 	//set pin mode
 326:../src/init.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 634              		.loc 1 326 0
 635 06e4 4FF00203 		mov	r3, #2
 636 06e8 87F89C30 		strb	r3, [r7, #156]
 327:../src/init.c **** 	//write mode to selected pins and selected port
 328:../src/init.c **** 	GPIO_Init(GPIOE, &GPIO_InitStructure);
 637              		.loc 1 328 0
 638 06ec 4FF48050 		mov	r0, #4096
 639 06f0 C4F20200 		movt	r0, 16386
 640 06f4 07F19803 		add	r3, r7, #152
 641 06f8 1946     		mov	r1, r3
 642 06fa FFF7FEFF 		bl	GPIO_Init
 329:../src/init.c **** 
 330:../src/init.c **** 
 331:../src/init.c **** 	// Configure all the timers
 332:../src/init.c **** 
 333:../src/init.c **** 	// Timer 1
 334:../src/init.c **** 	// Enable clock(s)
 335:../src/init.c **** 	// Clock = 84 MHz
 336:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 643              		.loc 1 336 0
 644 06fe 4FF00100 		mov	r0, #1
 645 0702 4FF00101 		mov	r1, #1
 646 0706 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 337:../src/init.c **** 	// Populate structure
 338:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 647              		.loc 1 338 0
 648 070a 4FF00003 		mov	r3, #0
 649 070e A7F89430 		strh	r3, [r7, #148]	@ movhi
 339:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 650              		.loc 1 339 0
 651 0712 4FF00003 		mov	r3, #0
 652 0716 A7F88E30 		strh	r3, [r7, #142]	@ movhi
 340:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM1_PERIOD;
 653              		.loc 1 340 0
 654 071a 47F6C853 		movw	r3, #32200
 655 071e C7F89030 		str	r3, [r7, #144]
 341:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM1_PRESCALER;
 656              		.loc 1 341 0
 657 0722 4FF05403 		mov	r3, #84
 658 0726 A7F88C30 		strh	r3, [r7, #140]	@ movhi
 342:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 659              		.loc 1 342 0
 660 072a 4FF00003 		mov	r3, #0
 661 072e 87F89630 		strb	r3, [r7, #150]
 343:../src/init.c **** 	// Configure timer 1
 344:../src/init.c **** 	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStruct);
 662              		.loc 1 344 0
 663 0732 4FF00000 		mov	r0, #0
 664 0736 C4F20100 		movt	r0, 16385
 665 073a 07F18C03 		add	r3, r7, #140
 666 073e 1946     		mov	r1, r3
 667 0740 FFF7FEFF 		bl	TIM_TimeBaseInit
 345:../src/init.c **** 
 346:../src/init.c **** 	// Populate structure
 347:../src/init.c **** 	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 668              		.loc 1 347 0
 669 0744 4FF06003 		mov	r3, #96
 670 0748 A7F86C30 		strh	r3, [r7, #108]	@ movhi
 348:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 671              		.loc 1 348 0
 672 074c 4FF00103 		mov	r3, #1
 673 0750 A7F86E30 		strh	r3, [r7, #110]	@ movhi
 349:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputNState = TIM_OutputNState_Disable;
 674              		.loc 1 349 0
 675 0754 4FF00003 		mov	r3, #0
 676 0758 A7F87030 		strh	r3, [r7, #112]	@ movhi
 350:../src/init.c **** 	TIM_OCInitStruct.TIM_Pulse = TIM1_PULSE;
 677              		.loc 1 350 0
 678 075c 40F63403 		movw	r3, #2100
 679 0760 7B67     		str	r3, [r7, #116]
 351:../src/init.c **** 	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 680              		.loc 1 351 0
 681 0762 4FF00003 		mov	r3, #0
 682 0766 A7F87830 		strh	r3, [r7, #120]	@ movhi
 352:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNPolarity = TIM_OCNPolarity_High;
 683              		.loc 1 352 0
 684 076a 4FF00003 		mov	r3, #0
 685 076e A7F87A30 		strh	r3, [r7, #122]	@ movhi
 353:../src/init.c **** 	TIM_OCInitStruct.TIM_OCIdleState = TIM_OCIdleState_Reset;
 686              		.loc 1 353 0
 687 0772 4FF00003 		mov	r3, #0
 688 0776 A7F87C30 		strh	r3, [r7, #124]	@ movhi
 354:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 689              		.loc 1 354 0
 690 077a 4FF00003 		mov	r3, #0
 691 077e A7F87E30 		strh	r3, [r7, #126]	@ movhi
 355:../src/init.c **** 	// Configure output compare, channel 1
 356:../src/init.c **** 	TIM_OC1Init(TIM1, &TIM_OCInitStruct);
 692              		.loc 1 356 0
 693 0782 4FF00000 		mov	r0, #0
 694 0786 C4F20100 		movt	r0, 16385
 695 078a 07F16C03 		add	r3, r7, #108
 696 078e 1946     		mov	r1, r3
 697 0790 FFF7FEFF 		bl	TIM_OC1Init
 357:../src/init.c **** 	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 698              		.loc 1 357 0
 699 0794 4FF00000 		mov	r0, #0
 700 0798 C4F20100 		movt	r0, 16385
 701 079c 4FF00801 		mov	r1, #8
 702 07a0 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 358:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 703              		.loc 1 358 0
 704 07a4 4FF00103 		mov	r3, #1
 705 07a8 A7F86E30 		strh	r3, [r7, #110]	@ movhi
 359:../src/init.c **** 	TIM_OC2Init(TIM1, &TIM_OCInitStruct);
 706              		.loc 1 359 0
 707 07ac 4FF00000 		mov	r0, #0
 708 07b0 C4F20100 		movt	r0, 16385
 709 07b4 07F16C03 		add	r3, r7, #108
 710 07b8 1946     		mov	r1, r3
 711 07ba FFF7FEFF 		bl	TIM_OC2Init
 360:../src/init.c **** 	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 712              		.loc 1 360 0
 713 07be 4FF00000 		mov	r0, #0
 714 07c2 C4F20100 		movt	r0, 16385
 715 07c6 4FF00801 		mov	r1, #8
 716 07ca FFF7FEFF 		bl	TIM_OC2PreloadConfig
 361:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 717              		.loc 1 361 0
 718 07ce 4FF00103 		mov	r3, #1
 719 07d2 A7F86E30 		strh	r3, [r7, #110]	@ movhi
 362:../src/init.c **** 	TIM_OC3Init(TIM1, &TIM_OCInitStruct);
 720              		.loc 1 362 0
 721 07d6 4FF00000 		mov	r0, #0
 722 07da C4F20100 		movt	r0, 16385
 723 07de 07F16C03 		add	r3, r7, #108
 724 07e2 1946     		mov	r1, r3
 725 07e4 FFF7FEFF 		bl	TIM_OC3Init
 363:../src/init.c **** 	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 726              		.loc 1 363 0
 727 07e8 4FF00000 		mov	r0, #0
 728 07ec C4F20100 		movt	r0, 16385
 729 07f0 4FF00801 		mov	r1, #8
 730 07f4 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 364:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 731              		.loc 1 364 0
 732 07f8 4FF00103 		mov	r3, #1
 733 07fc A7F86E30 		strh	r3, [r7, #110]	@ movhi
 365:../src/init.c **** 	TIM_OC4Init(TIM1, &TIM_OCInitStruct);
 734              		.loc 1 365 0
 735 0800 4FF00000 		mov	r0, #0
 736 0804 C4F20100 		movt	r0, 16385
 737 0808 07F16C03 		add	r3, r7, #108
 738 080c 1946     		mov	r1, r3
 739 080e FFF7FEFF 		bl	TIM_OC4Init
 366:../src/init.c **** 	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 740              		.loc 1 366 0
 741 0812 4FF00000 		mov	r0, #0
 742 0816 C4F20100 		movt	r0, 16385
 743 081a 4FF00801 		mov	r1, #8
 744 081e FFF7FEFF 		bl	TIM_OC4PreloadConfig
 367:../src/init.c **** 
 368:../src/init.c **** 	TIM_ARRPreloadConfig(TIM1, ENABLE);
 745              		.loc 1 368 0
 746 0822 4FF00000 		mov	r0, #0
 747 0826 C4F20100 		movt	r0, 16385
 748 082a 4FF00101 		mov	r1, #1
 749 082e FFF7FEFF 		bl	TIM_ARRPreloadConfig
 369:../src/init.c **** 
 370:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSRState = TIM_OSSRState_Disable;
 750              		.loc 1 370 0
 751 0832 4FF00003 		mov	r3, #0
 752 0836 A7F85C30 		strh	r3, [r7, #92]	@ movhi
 371:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSIState = TIM_OSSIState_Disable;
 753              		.loc 1 371 0
 754 083a 4FF00003 		mov	r3, #0
 755 083e A7F85E30 		strh	r3, [r7, #94]	@ movhi
 372:../src/init.c **** 	TIM_BDTRInitStruct.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 756              		.loc 1 372 0
 757 0842 4FF00003 		mov	r3, #0
 758 0846 A7F86030 		strh	r3, [r7, #96]	@ movhi
 373:../src/init.c **** 	TIM_BDTRInitStruct.TIM_DeadTime = 0;
 759              		.loc 1 373 0
 760 084a 4FF00003 		mov	r3, #0
 761 084e A7F86230 		strh	r3, [r7, #98]	@ movhi
 374:../src/init.c **** 	TIM_BDTRInitStruct.TIM_Break= TIM_Break_Disable;
 762              		.loc 1 374 0
 763 0852 4FF00003 		mov	r3, #0
 764 0856 A7F86430 		strh	r3, [r7, #100]	@ movhi
 375:../src/init.c **** 	TIM_BDTRInitStruct.TIM_BreakPolarity = TIM_BreakPolarity_Low;
 765              		.loc 1 375 0
 766 085a 4FF00003 		mov	r3, #0
 767 085e A7F86630 		strh	r3, [r7, #102]	@ movhi
 376:../src/init.c **** 	TIM_BDTRInitStruct.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 768              		.loc 1 376 0
 769 0862 4FF00003 		mov	r3, #0
 770 0866 A7F86830 		strh	r3, [r7, #104]	@ movhi
 377:../src/init.c **** 
 378:../src/init.c **** 	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStruct);
 771              		.loc 1 378 0
 772 086a 4FF00000 		mov	r0, #0
 773 086e C4F20100 		movt	r0, 16385
 774 0872 07F15C03 		add	r3, r7, #92
 775 0876 1946     		mov	r1, r3
 776 0878 FFF7FEFF 		bl	TIM_BDTRConfig
 379:../src/init.c **** 
 380:../src/init.c **** 	// Required for timers 1 or 8
 381:../src/init.c **** 	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 777              		.loc 1 381 0
 778 087c 4FF00000 		mov	r0, #0
 779 0880 C4F20100 		movt	r0, 16385
 780 0884 4FF00101 		mov	r1, #1
 781 0888 FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 382:../src/init.c **** 
 383:../src/init.c **** 	// Enable interrupts
 384:../src/init.c **** 	// TIM_ITConfig(TIM1, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 385:../src/init.c **** 	// Enable timer
 386:../src/init.c **** 	TIM_Cmd(TIM1, ENABLE);
 782              		.loc 1 386 0
 783 088c 4FF00000 		mov	r0, #0
 784 0890 C4F20100 		movt	r0, 16385
 785 0894 4FF00101 		mov	r1, #1
 786 0898 FFF7FEFF 		bl	TIM_Cmd
 387:../src/init.c **** 	// End of Timer 1
 388:../src/init.c **** 
 389:../src/init.c **** 	// Timer 2
 390:../src/init.c **** 	// Enable clock(s)
 391:../src/init.c **** 	// Clock = 42 MHz
 392:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 787              		.loc 1 392 0
 788 089c 4FF00100 		mov	r0, #1
 789 08a0 4FF00101 		mov	r1, #1
 790 08a4 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 393:../src/init.c **** 	// Populate structure
 394:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 791              		.loc 1 394 0
 792 08a8 4FF00003 		mov	r3, #0
 793 08ac A7F89430 		strh	r3, [r7, #148]	@ movhi
 395:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 794              		.loc 1 395 0
 795 08b0 4FF00003 		mov	r3, #0
 796 08b4 A7F88E30 		strh	r3, [r7, #142]	@ movhi
 396:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM2_PERIOD;
 797              		.loc 1 396 0
 798 08b8 47F6C853 		movw	r3, #32200
 799 08bc C7F89030 		str	r3, [r7, #144]
 397:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM2_PRESCALER;
 800              		.loc 1 397 0
 801 08c0 4FF02A03 		mov	r3, #42
 802 08c4 A7F88C30 		strh	r3, [r7, #140]	@ movhi
 398:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 803              		.loc 1 398 0
 804 08c8 4FF00003 		mov	r3, #0
 805 08cc 87F89630 		strb	r3, [r7, #150]
 399:../src/init.c **** 	// Configure timer 2
 400:../src/init.c **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStruct);
 806              		.loc 1 400 0
 807 08d0 4FF08040 		mov	r0, #1073741824
 808 08d4 07F18C03 		add	r3, r7, #140
 809 08d8 1946     		mov	r1, r3
 810 08da FFF7FEFF 		bl	TIM_TimeBaseInit
 401:../src/init.c **** 
 402:../src/init.c **** 	// Populate structure
 403:../src/init.c **** 	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 811              		.loc 1 403 0
 812 08de 4FF06003 		mov	r3, #96
 813 08e2 A7F86C30 		strh	r3, [r7, #108]	@ movhi
 404:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 814              		.loc 1 404 0
 815 08e6 4FF00103 		mov	r3, #1
 816 08ea A7F86E30 		strh	r3, [r7, #110]	@ movhi
 405:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputNState = TIM_OutputNState_Disable;
 817              		.loc 1 405 0
 818 08ee 4FF00003 		mov	r3, #0
 819 08f2 A7F87030 		strh	r3, [r7, #112]	@ movhi
 406:../src/init.c **** 	TIM_OCInitStruct.TIM_Pulse = TIM2_PULSE;
 820              		.loc 1 406 0
 821 08f6 40F63403 		movw	r3, #2100
 822 08fa 7B67     		str	r3, [r7, #116]
 407:../src/init.c **** 	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 823              		.loc 1 407 0
 824 08fc 4FF00003 		mov	r3, #0
 825 0900 A7F87830 		strh	r3, [r7, #120]	@ movhi
 408:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNPolarity = TIM_OCNPolarity_High;
 826              		.loc 1 408 0
 827 0904 4FF00003 		mov	r3, #0
 828 0908 A7F87A30 		strh	r3, [r7, #122]	@ movhi
 409:../src/init.c **** 	TIM_OCInitStruct.TIM_OCIdleState = TIM_OCIdleState_Reset;
 829              		.loc 1 409 0
 830 090c 4FF00003 		mov	r3, #0
 831 0910 A7F87C30 		strh	r3, [r7, #124]	@ movhi
 410:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 832              		.loc 1 410 0
 833 0914 4FF00003 		mov	r3, #0
 834 0918 A7F87E30 		strh	r3, [r7, #126]	@ movhi
 411:../src/init.c **** 	// Configure output compare, channel 2
 412:../src/init.c **** 	TIM_OC1Init(TIM2, &TIM_OCInitStruct);
 835              		.loc 1 412 0
 836 091c 4FF08040 		mov	r0, #1073741824
 837 0920 07F16C03 		add	r3, r7, #108
 838 0924 1946     		mov	r1, r3
 839 0926 FFF7FEFF 		bl	TIM_OC1Init
 413:../src/init.c **** 	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 840              		.loc 1 413 0
 841 092a 4FF08040 		mov	r0, #1073741824
 842 092e 4FF00801 		mov	r1, #8
 843 0932 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 414:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 844              		.loc 1 414 0
 845 0936 4FF00103 		mov	r3, #1
 846 093a A7F86E30 		strh	r3, [r7, #110]	@ movhi
 415:../src/init.c **** 	TIM_OC2Init(TIM2, &TIM_OCInitStruct);
 847              		.loc 1 415 0
 848 093e 4FF08040 		mov	r0, #1073741824
 849 0942 07F16C03 		add	r3, r7, #108
 850 0946 1946     		mov	r1, r3
 851 0948 FFF7FEFF 		bl	TIM_OC2Init
 416:../src/init.c **** 	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 852              		.loc 1 416 0
 853 094c 4FF08040 		mov	r0, #1073741824
 854 0950 4FF00801 		mov	r1, #8
 855 0954 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 417:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 856              		.loc 1 417 0
 857 0958 4FF00103 		mov	r3, #1
 858 095c A7F86E30 		strh	r3, [r7, #110]	@ movhi
 418:../src/init.c **** 	TIM_OC3Init(TIM2, &TIM_OCInitStruct);
 859              		.loc 1 418 0
 860 0960 4FF08040 		mov	r0, #1073741824
 861 0964 07F16C03 		add	r3, r7, #108
 862 0968 1946     		mov	r1, r3
 863 096a FFF7FEFF 		bl	TIM_OC3Init
 419:../src/init.c **** 	TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 864              		.loc 1 419 0
 865 096e 4FF08040 		mov	r0, #1073741824
 866 0972 4FF00801 		mov	r1, #8
 867 0976 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 420:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 868              		.loc 1 420 0
 869 097a 4FF00103 		mov	r3, #1
 870 097e A7F86E30 		strh	r3, [r7, #110]	@ movhi
 421:../src/init.c **** 	TIM_OC4Init(TIM2, &TIM_OCInitStruct);
 871              		.loc 1 421 0
 872 0982 4FF08040 		mov	r0, #1073741824
 873 0986 07F16C03 		add	r3, r7, #108
 874 098a 1946     		mov	r1, r3
 875 098c FFF7FEFF 		bl	TIM_OC4Init
 422:../src/init.c **** 	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 876              		.loc 1 422 0
 877 0990 4FF08040 		mov	r0, #1073741824
 878 0994 4FF00801 		mov	r1, #8
 879 0998 FFF7FEFF 		bl	TIM_OC4PreloadConfig
 423:../src/init.c **** 
 424:../src/init.c **** 	TIM_ARRPreloadConfig(TIM2, ENABLE);
 880              		.loc 1 424 0
 881 099c 4FF08040 		mov	r0, #1073741824
 882 09a0 4FF00101 		mov	r1, #1
 883 09a4 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 425:../src/init.c **** 
 426:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSRState = TIM_OSSRState_Disable;
 884              		.loc 1 426 0
 885 09a8 4FF00003 		mov	r3, #0
 886 09ac A7F85C30 		strh	r3, [r7, #92]	@ movhi
 427:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSIState = TIM_OSSIState_Disable;
 887              		.loc 1 427 0
 888 09b0 4FF00003 		mov	r3, #0
 889 09b4 A7F85E30 		strh	r3, [r7, #94]	@ movhi
 428:../src/init.c **** 	TIM_BDTRInitStruct.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 890              		.loc 1 428 0
 891 09b8 4FF00003 		mov	r3, #0
 892 09bc A7F86030 		strh	r3, [r7, #96]	@ movhi
 429:../src/init.c **** 	TIM_BDTRInitStruct.TIM_DeadTime = 0;
 893              		.loc 1 429 0
 894 09c0 4FF00003 		mov	r3, #0
 895 09c4 A7F86230 		strh	r3, [r7, #98]	@ movhi
 430:../src/init.c **** 	TIM_BDTRInitStruct.TIM_Break= TIM_Break_Disable;
 896              		.loc 1 430 0
 897 09c8 4FF00003 		mov	r3, #0
 898 09cc A7F86430 		strh	r3, [r7, #100]	@ movhi
 431:../src/init.c **** 	TIM_BDTRInitStruct.TIM_BreakPolarity = TIM_BreakPolarity_Low;
 899              		.loc 1 431 0
 900 09d0 4FF00003 		mov	r3, #0
 901 09d4 A7F86630 		strh	r3, [r7, #102]	@ movhi
 432:../src/init.c **** 	TIM_BDTRInitStruct.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 902              		.loc 1 432 0
 903 09d8 4FF00003 		mov	r3, #0
 904 09dc A7F86830 		strh	r3, [r7, #104]	@ movhi
 433:../src/init.c **** 
 434:../src/init.c **** 	TIM_BDTRConfig(TIM2, &TIM_BDTRInitStruct);
 905              		.loc 1 434 0
 906 09e0 4FF08040 		mov	r0, #1073741824
 907 09e4 07F15C03 		add	r3, r7, #92
 908 09e8 1946     		mov	r1, r3
 909 09ea FFF7FEFF 		bl	TIM_BDTRConfig
 435:../src/init.c **** 
 436:../src/init.c **** 	// Required for timers 1 or 8
 437:../src/init.c **** 	//TIM_CtrlPWMOutputs(TIM2, ENABLE);
 438:../src/init.c **** 
 439:../src/init.c **** 	// Enable interrupts
 440:../src/init.c **** 	// TIM_ITConfig(TIM1, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 441:../src/init.c **** 	// Enable timer
 442:../src/init.c **** 	TIM_Cmd(TIM2, ENABLE);
 910              		.loc 1 442 0
 911 09ee 4FF08040 		mov	r0, #1073741824
 912 09f2 4FF00101 		mov	r1, #1
 913 09f6 FFF7FEFF 		bl	TIM_Cmd
 443:../src/init.c **** 	// End of Timer 2
 444:../src/init.c **** 
 445:../src/init.c **** 	// Timer 3
 446:../src/init.c **** 	// Enable clock(s)
 447:../src/init.c **** 	// Clock = 42 MHz
 448:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 914              		.loc 1 448 0
 915 09fa 4FF00200 		mov	r0, #2
 916 09fe 4FF00101 		mov	r1, #1
 917 0a02 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 449:../src/init.c **** 	// Populate structure
 450:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 918              		.loc 1 450 0
 919 0a06 4FF00003 		mov	r3, #0
 920 0a0a A7F89430 		strh	r3, [r7, #148]	@ movhi
 451:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 921              		.loc 1 451 0
 922 0a0e 4FF00003 		mov	r3, #0
 923 0a12 A7F88E30 		strh	r3, [r7, #142]	@ movhi
 452:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM3_PERIOD;
 924              		.loc 1 452 0
 925 0a16 47F6C853 		movw	r3, #32200
 926 0a1a C7F89030 		str	r3, [r7, #144]
 453:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM3_PRESCALER;
 927              		.loc 1 453 0
 928 0a1e 4FF02A03 		mov	r3, #42
 929 0a22 A7F88C30 		strh	r3, [r7, #140]	@ movhi
 454:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 930              		.loc 1 454 0
 931 0a26 4FF00003 		mov	r3, #0
 932 0a2a 87F89630 		strb	r3, [r7, #150]
 455:../src/init.c **** 	// Configure timer 3
 456:../src/init.c **** 	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseInitStruct);
 933              		.loc 1 456 0
 934 0a2e 4FF48060 		mov	r0, #1024
 935 0a32 C4F20000 		movt	r0, 16384
 936 0a36 07F18C03 		add	r3, r7, #140
 937 0a3a 1946     		mov	r1, r3
 938 0a3c FFF7FEFF 		bl	TIM_TimeBaseInit
 457:../src/init.c **** 
 458:../src/init.c **** 	// Populate structure
 459:../src/init.c **** 	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 939              		.loc 1 459 0
 940 0a40 4FF06003 		mov	r3, #96
 941 0a44 A7F86C30 		strh	r3, [r7, #108]	@ movhi
 460:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 942              		.loc 1 460 0
 943 0a48 4FF00103 		mov	r3, #1
 944 0a4c A7F86E30 		strh	r3, [r7, #110]	@ movhi
 461:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputNState = TIM_OutputNState_Disable;
 945              		.loc 1 461 0
 946 0a50 4FF00003 		mov	r3, #0
 947 0a54 A7F87030 		strh	r3, [r7, #112]	@ movhi
 462:../src/init.c **** 	TIM_OCInitStruct.TIM_Pulse = TIM3_PULSE;
 948              		.loc 1 462 0
 949 0a58 40F63403 		movw	r3, #2100
 950 0a5c 7B67     		str	r3, [r7, #116]
 463:../src/init.c **** 	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 951              		.loc 1 463 0
 952 0a5e 4FF00003 		mov	r3, #0
 953 0a62 A7F87830 		strh	r3, [r7, #120]	@ movhi
 464:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNPolarity = TIM_OCNPolarity_High;
 954              		.loc 1 464 0
 955 0a66 4FF00003 		mov	r3, #0
 956 0a6a A7F87A30 		strh	r3, [r7, #122]	@ movhi
 465:../src/init.c **** 	TIM_OCInitStruct.TIM_OCIdleState = TIM_OCIdleState_Reset;
 957              		.loc 1 465 0
 958 0a6e 4FF00003 		mov	r3, #0
 959 0a72 A7F87C30 		strh	r3, [r7, #124]	@ movhi
 466:../src/init.c **** 	TIM_OCInitStruct.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 960              		.loc 1 466 0
 961 0a76 4FF00003 		mov	r3, #0
 962 0a7a A7F87E30 		strh	r3, [r7, #126]	@ movhi
 467:../src/init.c **** 	// Configure output compare, channel 3
 468:../src/init.c **** 	TIM_OC1Init(TIM3, &TIM_OCInitStruct);
 963              		.loc 1 468 0
 964 0a7e 4FF48060 		mov	r0, #1024
 965 0a82 C4F20000 		movt	r0, 16384
 966 0a86 07F16C03 		add	r3, r7, #108
 967 0a8a 1946     		mov	r1, r3
 968 0a8c FFF7FEFF 		bl	TIM_OC1Init
 469:../src/init.c **** 	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 969              		.loc 1 469 0
 970 0a90 4FF48060 		mov	r0, #1024
 971 0a94 C4F20000 		movt	r0, 16384
 972 0a98 4FF00801 		mov	r1, #8
 973 0a9c FFF7FEFF 		bl	TIM_OC1PreloadConfig
 470:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 974              		.loc 1 470 0
 975 0aa0 4FF00103 		mov	r3, #1
 976 0aa4 A7F86E30 		strh	r3, [r7, #110]	@ movhi
 471:../src/init.c **** 	TIM_OC2Init(TIM3, &TIM_OCInitStruct);
 977              		.loc 1 471 0
 978 0aa8 4FF48060 		mov	r0, #1024
 979 0aac C4F20000 		movt	r0, 16384
 980 0ab0 07F16C03 		add	r3, r7, #108
 981 0ab4 1946     		mov	r1, r3
 982 0ab6 FFF7FEFF 		bl	TIM_OC2Init
 472:../src/init.c **** 	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
 983              		.loc 1 472 0
 984 0aba 4FF48060 		mov	r0, #1024
 985 0abe C4F20000 		movt	r0, 16384
 986 0ac2 4FF00801 		mov	r1, #8
 987 0ac6 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 473:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 988              		.loc 1 473 0
 989 0aca 4FF00103 		mov	r3, #1
 990 0ace A7F86E30 		strh	r3, [r7, #110]	@ movhi
 474:../src/init.c **** 	TIM_OC3Init(TIM3, &TIM_OCInitStruct);
 991              		.loc 1 474 0
 992 0ad2 4FF48060 		mov	r0, #1024
 993 0ad6 C4F20000 		movt	r0, 16384
 994 0ada 07F16C03 		add	r3, r7, #108
 995 0ade 1946     		mov	r1, r3
 996 0ae0 FFF7FEFF 		bl	TIM_OC3Init
 475:../src/init.c **** 	TIM_OC3PreloadConfig(TIM3, TIM_OCPreload_Enable);
 997              		.loc 1 475 0
 998 0ae4 4FF48060 		mov	r0, #1024
 999 0ae8 C4F20000 		movt	r0, 16384
 1000 0aec 4FF00801 		mov	r1, #8
 1001 0af0 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 476:../src/init.c **** 	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 1002              		.loc 1 476 0
 1003 0af4 4FF00103 		mov	r3, #1
 1004 0af8 A7F86E30 		strh	r3, [r7, #110]	@ movhi
 477:../src/init.c **** 	TIM_OC4Init(TIM3, &TIM_OCInitStruct);
 1005              		.loc 1 477 0
 1006 0afc 4FF48060 		mov	r0, #1024
 1007 0b00 C4F20000 		movt	r0, 16384
 1008 0b04 07F16C03 		add	r3, r7, #108
 1009 0b08 1946     		mov	r1, r3
 1010 0b0a FFF7FEFF 		bl	TIM_OC4Init
 478:../src/init.c **** 	TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
 1011              		.loc 1 478 0
 1012 0b0e 4FF48060 		mov	r0, #1024
 1013 0b12 C4F20000 		movt	r0, 16384
 1014 0b16 4FF00801 		mov	r1, #8
 1015 0b1a FFF7FEFF 		bl	TIM_OC4PreloadConfig
 479:../src/init.c **** 
 480:../src/init.c **** 	TIM_ARRPreloadConfig(TIM3, ENABLE);
 1016              		.loc 1 480 0
 1017 0b1e 4FF48060 		mov	r0, #1024
 1018 0b22 C4F20000 		movt	r0, 16384
 1019 0b26 4FF00101 		mov	r1, #1
 1020 0b2a FFF7FEFF 		bl	TIM_ARRPreloadConfig
 481:../src/init.c **** 
 482:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSRState = TIM_OSSRState_Disable;
 1021              		.loc 1 482 0
 1022 0b2e 4FF00003 		mov	r3, #0
 1023 0b32 A7F85C30 		strh	r3, [r7, #92]	@ movhi
 483:../src/init.c **** 	TIM_BDTRInitStruct.TIM_OSSIState = TIM_OSSIState_Disable;
 1024              		.loc 1 483 0
 1025 0b36 4FF00003 		mov	r3, #0
 1026 0b3a A7F85E30 		strh	r3, [r7, #94]	@ movhi
 484:../src/init.c **** 	TIM_BDTRInitStruct.TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 1027              		.loc 1 484 0
 1028 0b3e 4FF00003 		mov	r3, #0
 1029 0b42 A7F86030 		strh	r3, [r7, #96]	@ movhi
 485:../src/init.c **** 	TIM_BDTRInitStruct.TIM_DeadTime = 0;
 1030              		.loc 1 485 0
 1031 0b46 4FF00003 		mov	r3, #0
 1032 0b4a A7F86230 		strh	r3, [r7, #98]	@ movhi
 486:../src/init.c **** 	TIM_BDTRInitStruct.TIM_Break= TIM_Break_Disable;
 1033              		.loc 1 486 0
 1034 0b4e 4FF00003 		mov	r3, #0
 1035 0b52 A7F86430 		strh	r3, [r7, #100]	@ movhi
 487:../src/init.c **** 	TIM_BDTRInitStruct.TIM_BreakPolarity = TIM_BreakPolarity_Low;
 1036              		.loc 1 487 0
 1037 0b56 4FF00003 		mov	r3, #0
 1038 0b5a A7F86630 		strh	r3, [r7, #102]	@ movhi
 488:../src/init.c **** 	TIM_BDTRInitStruct.TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 1039              		.loc 1 488 0
 1040 0b5e 4FF00003 		mov	r3, #0
 1041 0b62 A7F86830 		strh	r3, [r7, #104]	@ movhi
 489:../src/init.c **** 
 490:../src/init.c **** 	TIM_BDTRConfig(TIM3, &TIM_BDTRInitStruct);
 1042              		.loc 1 490 0
 1043 0b66 4FF48060 		mov	r0, #1024
 1044 0b6a C4F20000 		movt	r0, 16384
 1045 0b6e 07F15C03 		add	r3, r7, #92
 1046 0b72 1946     		mov	r1, r3
 1047 0b74 FFF7FEFF 		bl	TIM_BDTRConfig
 491:../src/init.c **** 
 492:../src/init.c **** 	// Required for timers 1 or 8
 493:../src/init.c **** 	//TIM_CtrlPWMOutputs(TIM2, ENABLE);
 494:../src/init.c **** 
 495:../src/init.c **** 	// Enable interrupts
 496:../src/init.c **** 	// TIM_ITConfig(TIM1, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 497:../src/init.c **** 	// Enable timer
 498:../src/init.c **** 	TIM_Cmd(TIM3, ENABLE);
 1048              		.loc 1 498 0
 1049 0b78 4FF48060 		mov	r0, #1024
 1050 0b7c C4F20000 		movt	r0, 16384
 1051 0b80 4FF00101 		mov	r1, #1
 1052 0b84 FFF7FEFF 		bl	TIM_Cmd
 499:../src/init.c **** 	// End of Timer 3
 500:../src/init.c **** 
 501:../src/init.c **** 	// Timer 4 - input capture
 502:../src/init.c **** 	// Enable clock(s)
 503:../src/init.c **** 	// Clock = 42 MHz
 504:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 1053              		.loc 1 504 0
 1054 0b88 4FF00400 		mov	r0, #4
 1055 0b8c 4FF00101 		mov	r1, #1
 1056 0b90 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 505:../src/init.c **** 	// Populate structure
 506:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 1057              		.loc 1 506 0
 1058 0b94 4FF00003 		mov	r3, #0
 1059 0b98 A7F89430 		strh	r3, [r7, #148]	@ movhi
 507:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 1060              		.loc 1 507 0
 1061 0b9c 4FF00003 		mov	r3, #0
 1062 0ba0 A7F88E30 		strh	r3, [r7, #142]	@ movhi
 508:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM4_PERIOD;
 1063              		.loc 1 508 0
 1064 0ba4 4FF6FF73 		movw	r3, #65535
 1065 0ba8 C7F89030 		str	r3, [r7, #144]
 509:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM4_PRESCALER;
 1066              		.loc 1 509 0
 1067 0bac 4FF02A03 		mov	r3, #42
 1068 0bb0 A7F88C30 		strh	r3, [r7, #140]	@ movhi
 510:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 1069              		.loc 1 510 0
 1070 0bb4 4FF00003 		mov	r3, #0
 1071 0bb8 87F89630 		strb	r3, [r7, #150]
 511:../src/init.c **** 	// Configure timer 4
 512:../src/init.c **** 	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStruct);
 1072              		.loc 1 512 0
 1073 0bbc 4FF40060 		mov	r0, #2048
 1074 0bc0 C4F20000 		movt	r0, 16384
 1075 0bc4 07F18C03 		add	r3, r7, #140
 1076 0bc8 1946     		mov	r1, r3
 1077 0bca FFF7FEFF 		bl	TIM_TimeBaseInit
 513:../src/init.c **** 
 514:../src/init.c **** 	// Populate structure
 515:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
 1078              		.loc 1 515 0
 1079 0bce 4FF00003 		mov	r3, #0
 1080 0bd2 A7F88030 		strh	r3, [r7, #128]	@ movhi
 516:../src/init.c **** 	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 1081              		.loc 1 516 0
 1082 0bd6 4FF00A03 		mov	r3, #10
 1083 0bda A7F88230 		strh	r3, [r7, #130]	@ movhi
 517:../src/init.c **** 	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
 1084              		.loc 1 517 0
 1085 0bde 4FF00103 		mov	r3, #1
 1086 0be2 A7F88430 		strh	r3, [r7, #132]	@ movhi
 518:../src/init.c **** 	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 1087              		.loc 1 518 0
 1088 0be6 4FF00003 		mov	r3, #0
 1089 0bea A7F88630 		strh	r3, [r7, #134]	@ movhi
 519:../src/init.c **** 	TIM_ICInitStruct.TIM_ICFilter = TIM4_FILTER;
 1090              		.loc 1 519 0
 1091 0bee 4FF00103 		mov	r3, #1
 1092 0bf2 A7F88830 		strh	r3, [r7, #136]	@ movhi
 520:../src/init.c **** 	TIM_ICInit(TIM4, &TIM_ICInitStruct);
 1093              		.loc 1 520 0
 1094 0bf6 4FF40060 		mov	r0, #2048
 1095 0bfa C4F20000 		movt	r0, 16384
 1096 0bfe 07F18003 		add	r3, r7, #128
 1097 0c02 1946     		mov	r1, r3
 1098 0c04 FFF7FEFF 		bl	TIM_ICInit
 521:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_2;
 1099              		.loc 1 521 0
 1100 0c08 4FF00403 		mov	r3, #4
 1101 0c0c A7F88030 		strh	r3, [r7, #128]	@ movhi
 522:../src/init.c **** 	TIM_ICInit(TIM4, &TIM_ICInitStruct);
 1102              		.loc 1 522 0
 1103 0c10 4FF40060 		mov	r0, #2048
 1104 0c14 C4F20000 		movt	r0, 16384
 1105 0c18 07F18003 		add	r3, r7, #128
 1106 0c1c 1946     		mov	r1, r3
 1107 0c1e FFF7FEFF 		bl	TIM_ICInit
 523:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_3;
 1108              		.loc 1 523 0
 1109 0c22 4FF00803 		mov	r3, #8
 1110 0c26 A7F88030 		strh	r3, [r7, #128]	@ movhi
 524:../src/init.c **** 	TIM_ICInit(TIM4, &TIM_ICInitStruct);
 1111              		.loc 1 524 0
 1112 0c2a 4FF40060 		mov	r0, #2048
 1113 0c2e C4F20000 		movt	r0, 16384
 1114 0c32 07F18003 		add	r3, r7, #128
 1115 0c36 1946     		mov	r1, r3
 1116 0c38 FFF7FEFF 		bl	TIM_ICInit
 525:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_4;
 1117              		.loc 1 525 0
 1118 0c3c 4FF00C03 		mov	r3, #12
 1119 0c40 A7F88030 		strh	r3, [r7, #128]	@ movhi
 526:../src/init.c **** 	TIM_ICInit(TIM4, &TIM_ICInitStruct);
 1120              		.loc 1 526 0
 1121 0c44 4FF40060 		mov	r0, #2048
 1122 0c48 C4F20000 		movt	r0, 16384
 1123 0c4c 07F18003 		add	r3, r7, #128
 1124 0c50 1946     		mov	r1, r3
 1125 0c52 FFF7FEFF 		bl	TIM_ICInit
 527:../src/init.c **** 
 528:../src/init.c **** 	// Configure interrupt
 529:../src/init.c **** 	TIM_ITConfig(TIM4, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 1126              		.loc 1 529 0
 1127 0c56 4FF40060 		mov	r0, #2048
 1128 0c5a C4F20000 		movt	r0, 16384
 1129 0c5e 4FF01E01 		mov	r1, #30
 1130 0c62 4FF00102 		mov	r2, #1
 1131 0c66 FFF7FEFF 		bl	TIM_ITConfig
 530:../src/init.c **** 
 531:../src/init.c **** 	// Enable timer
 532:../src/init.c **** 	TIM_Cmd(TIM4, ENABLE);
 1132              		.loc 1 532 0
 1133 0c6a 4FF40060 		mov	r0, #2048
 1134 0c6e C4F20000 		movt	r0, 16384
 1135 0c72 4FF00101 		mov	r1, #1
 1136 0c76 FFF7FEFF 		bl	TIM_Cmd
 533:../src/init.c **** 
 534:../src/init.c **** 	// End of timer 4
 535:../src/init.c **** 
 536:../src/init.c **** 	// Timer 8 - input capture
 537:../src/init.c **** 	// Enable clock(s)
 538:../src/init.c **** 	// Clock = 84 MHz
 539:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 1137              		.loc 1 539 0
 1138 0c7a 4FF00200 		mov	r0, #2
 1139 0c7e 4FF00101 		mov	r1, #1
 1140 0c82 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 540:../src/init.c **** 	// Populate structure
 541:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 1141              		.loc 1 541 0
 1142 0c86 4FF00003 		mov	r3, #0
 1143 0c8a A7F89430 		strh	r3, [r7, #148]	@ movhi
 542:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 1144              		.loc 1 542 0
 1145 0c8e 4FF00003 		mov	r3, #0
 1146 0c92 A7F88E30 		strh	r3, [r7, #142]	@ movhi
 543:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM8_PERIOD;
 1147              		.loc 1 543 0
 1148 0c96 4FF6FF73 		movw	r3, #65535
 1149 0c9a C7F89030 		str	r3, [r7, #144]
 544:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM8_PRESCALER;
 1150              		.loc 1 544 0
 1151 0c9e 4FF05403 		mov	r3, #84
 1152 0ca2 A7F88C30 		strh	r3, [r7, #140]	@ movhi
 545:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 1153              		.loc 1 545 0
 1154 0ca6 4FF00003 		mov	r3, #0
 1155 0caa 87F89630 		strb	r3, [r7, #150]
 546:../src/init.c **** 	// Configure timer 8
 547:../src/init.c **** 	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseInitStruct);
 1156              		.loc 1 547 0
 1157 0cae 4FF48060 		mov	r0, #1024
 1158 0cb2 C4F20100 		movt	r0, 16385
 1159 0cb6 07F18C03 		add	r3, r7, #140
 1160 0cba 1946     		mov	r1, r3
 1161 0cbc FFF7FEFF 		bl	TIM_TimeBaseInit
 548:../src/init.c **** 
 549:../src/init.c **** 	// Populate structure
 550:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_1;
 1162              		.loc 1 550 0
 1163 0cc0 4FF00003 		mov	r3, #0
 1164 0cc4 A7F88030 		strh	r3, [r7, #128]	@ movhi
 551:../src/init.c **** 	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 1165              		.loc 1 551 0
 1166 0cc8 4FF00A03 		mov	r3, #10
 1167 0ccc A7F88230 		strh	r3, [r7, #130]	@ movhi
 552:../src/init.c **** 	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
 1168              		.loc 1 552 0
 1169 0cd0 4FF00103 		mov	r3, #1
 1170 0cd4 A7F88430 		strh	r3, [r7, #132]	@ movhi
 553:../src/init.c **** 	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 1171              		.loc 1 553 0
 1172 0cd8 4FF00003 		mov	r3, #0
 1173 0cdc A7F88630 		strh	r3, [r7, #134]	@ movhi
 554:../src/init.c **** 	TIM_ICInitStruct.TIM_ICFilter = TIM8_FILTER;
 1174              		.loc 1 554 0
 1175 0ce0 4FF00103 		mov	r3, #1
 1176 0ce4 A7F88830 		strh	r3, [r7, #136]	@ movhi
 555:../src/init.c **** 	TIM_ICInit(TIM8, &TIM_ICInitStruct);
 1177              		.loc 1 555 0
 1178 0ce8 4FF48060 		mov	r0, #1024
 1179 0cec C4F20100 		movt	r0, 16385
 1180 0cf0 07F18003 		add	r3, r7, #128
 1181 0cf4 1946     		mov	r1, r3
 1182 0cf6 FFF7FEFF 		bl	TIM_ICInit
 556:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_2;
 1183              		.loc 1 556 0
 1184 0cfa 4FF00403 		mov	r3, #4
 1185 0cfe A7F88030 		strh	r3, [r7, #128]	@ movhi
 557:../src/init.c **** 	TIM_ICInit(TIM8, &TIM_ICInitStruct);
 1186              		.loc 1 557 0
 1187 0d02 4FF48060 		mov	r0, #1024
 1188 0d06 C4F20100 		movt	r0, 16385
 1189 0d0a 07F18003 		add	r3, r7, #128
 1190 0d0e 1946     		mov	r1, r3
 1191 0d10 FFF7FEFF 		bl	TIM_ICInit
 558:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_3;
 1192              		.loc 1 558 0
 1193 0d14 4FF00803 		mov	r3, #8
 1194 0d18 A7F88030 		strh	r3, [r7, #128]	@ movhi
 559:../src/init.c **** 	TIM_ICInit(TIM8, &TIM_ICInitStruct);
 1195              		.loc 1 559 0
 1196 0d1c 4FF48060 		mov	r0, #1024
 1197 0d20 C4F20100 		movt	r0, 16385
 1198 0d24 07F18003 		add	r3, r7, #128
 1199 0d28 1946     		mov	r1, r3
 1200 0d2a FFF7FEFF 		bl	TIM_ICInit
 560:../src/init.c **** 	TIM_ICInitStruct.TIM_Channel = TIM_Channel_4;
 1201              		.loc 1 560 0
 1202 0d2e 4FF00C03 		mov	r3, #12
 1203 0d32 A7F88030 		strh	r3, [r7, #128]	@ movhi
 561:../src/init.c **** 	TIM_ICInit(TIM8, &TIM_ICInitStruct);
 1204              		.loc 1 561 0
 1205 0d36 4FF48060 		mov	r0, #1024
 1206 0d3a C4F20100 		movt	r0, 16385
 1207 0d3e 07F18003 		add	r3, r7, #128
 1208 0d42 1946     		mov	r1, r3
 1209 0d44 FFF7FEFF 		bl	TIM_ICInit
 562:../src/init.c **** 
 563:../src/init.c **** 	// Configure interrupt
 564:../src/init.c **** 	TIM_ITConfig(TIM8, TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4, ENABLE);
 1210              		.loc 1 564 0
 1211 0d48 4FF48060 		mov	r0, #1024
 1212 0d4c C4F20100 		movt	r0, 16385
 1213 0d50 4FF01E01 		mov	r1, #30
 1214 0d54 4FF00102 		mov	r2, #1
 1215 0d58 FFF7FEFF 		bl	TIM_ITConfig
 565:../src/init.c **** 
 566:../src/init.c **** 	// Enable timer
 567:../src/init.c **** 	TIM_Cmd(TIM8, ENABLE);
 1216              		.loc 1 567 0
 1217 0d5c 4FF48060 		mov	r0, #1024
 1218 0d60 C4F20100 		movt	r0, 16385
 1219 0d64 4FF00101 		mov	r1, #1
 1220 0d68 FFF7FEFF 		bl	TIM_Cmd
 568:../src/init.c **** 
 569:../src/init.c **** 	// End of timer 8
 570:../src/init.c **** 
 571:../src/init.c **** 	// Timer 14 - timing for MODBUS
 572:../src/init.c **** 	//enable clock(s)
 573:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
 1221              		.loc 1 573 0
 1222 0d6c 4FF48070 		mov	r0, #256
 1223 0d70 4FF00101 		mov	r1, #1
 1224 0d74 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 574:../src/init.c **** 	//populate structure
 575:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_ClockDivision = TIM_CKD_DIV1;	//1 - 4
 1225              		.loc 1 575 0
 1226 0d78 4FF00003 		mov	r3, #0
 1227 0d7c A7F89430 		strh	r3, [r7, #148]	@ movhi
 576:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 1228              		.loc 1 576 0
 1229 0d80 4FF00003 		mov	r3, #0
 1230 0d84 A7F88E30 		strh	r3, [r7, #142]	@ movhi
 577:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Period = TIM14_PERIOD;
 1231              		.loc 1 577 0
 1232 0d88 4FF47A73 		mov	r3, #1000
 1233 0d8c C7F89030 		str	r3, [r7, #144]
 578:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_Prescaler = TIM14_PRESCALER;
 1234              		.loc 1 578 0
 1235 0d90 4FF05403 		mov	r3, #84
 1236 0d94 A7F88C30 		strh	r3, [r7, #140]	@ movhi
 579:../src/init.c **** 	TIM_TimeBaseInitStruct.TIM_RepetitionCounter = 0;
 1237              		.loc 1 579 0
 1238 0d98 4FF00003 		mov	r3, #0
 1239 0d9c 87F89630 		strb	r3, [r7, #150]
 580:../src/init.c **** 	//configure timer 14
 581:../src/init.c **** 	TIM_TimeBaseInit(TIM14, &TIM_TimeBaseInitStruct);
 1240              		.loc 1 581 0
 1241 0da0 4FF40050 		mov	r0, #8192
 1242 0da4 C4F20000 		movt	r0, 16384
 1243 0da8 07F18C03 		add	r3, r7, #140
 1244 0dac 1946     		mov	r1, r3
 1245 0dae FFF7FEFF 		bl	TIM_TimeBaseInit
 582:../src/init.c **** 	//enable interrupt
 583:../src/init.c **** 	TIM_ITConfig(TIM14, TIM_IT_Update, ENABLE);
 1246              		.loc 1 583 0
 1247 0db2 4FF40050 		mov	r0, #8192
 1248 0db6 C4F20000 		movt	r0, 16384
 1249 0dba 4FF00101 		mov	r1, #1
 1250 0dbe 4FF00102 		mov	r2, #1
 1251 0dc2 FFF7FEFF 		bl	TIM_ITConfig
 584:../src/init.c **** 	// Enable reload
 585:../src/init.c **** 	//TIM_ARRPreloadConfig(TIM14, ENABLE);
 586:../src/init.c **** 	//enable timer
 587:../src/init.c **** 	TIM_Cmd(TIM14, ENABLE);
 1252              		.loc 1 587 0
 1253 0dc6 4FF40050 		mov	r0, #8192
 1254 0dca C4F20000 		movt	r0, 16384
 1255 0dce 4FF00101 		mov	r1, #1
 1256 0dd2 FFF7FEFF 		bl	TIM_Cmd
 588:../src/init.c **** 
 589:../src/init.c **** 
 590:../src/init.c **** 	// End of timer 14
 591:../src/init.c **** 
 592:../src/init.c **** 	// Configure USART2
 593:../src/init.c **** 	//Remember to set GPIO pins in GPIO configuration
 594:../src/init.c **** 	//enable peripheral clock
 595:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE); //for USART1 and USART6
 1257              		.loc 1 595 0
 1258 0dd6 4FF01000 		mov	r0, #16
 1259 0dda 4FF00101 		mov	r1, #1
 1260 0dde FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 596:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2 | RCC_APB1Periph_USART3, ENABLE); //for USART2, USART
 1261              		.loc 1 596 0
 1262 0de2 4FF4C020 		mov	r0, #393216
 1263 0de6 4FF00101 		mov	r1, #1
 1264 0dea FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 597:../src/init.c **** 	//program port parameters
 598:../src/init.c **** 	//set baud rate
 599:../src/init.c **** 	USART_InitStructure.USART_BaudRate = 38400;
 1265              		.loc 1 599 0
 1266 0dee 4FF41643 		mov	r3, #38400
 1267 0df2 7B60     		str	r3, [r7, #4]
 600:../src/init.c **** 	//flow control
 601:../src/init.c **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 1268              		.loc 1 601 0
 1269 0df4 4FF00003 		mov	r3, #0
 1270 0df8 3B82     		strh	r3, [r7, #16]	@ movhi
 602:../src/init.c **** 	//enable receiver and transmitter
 603:../src/init.c **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 1271              		.loc 1 603 0
 1272 0dfa 4FF00C03 		mov	r3, #12
 1273 0dfe FB81     		strh	r3, [r7, #14]	@ movhi
 604:../src/init.c **** 	//parity
 605:../src/init.c **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 1274              		.loc 1 605 0
 1275 0e00 4FF00003 		mov	r3, #0
 1276 0e04 BB81     		strh	r3, [r7, #12]	@ movhi
 606:../src/init.c **** 	//stop bits
 607:../src/init.c **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1277              		.loc 1 607 0
 1278 0e06 4FF00003 		mov	r3, #0
 1279 0e0a 7B81     		strh	r3, [r7, #10]	@ movhi
 608:../src/init.c **** 	//word length
 609:../src/init.c **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1280              		.loc 1 609 0
 1281 0e0c 4FF00003 		mov	r3, #0
 1282 0e10 3B81     		strh	r3, [r7, #8]	@ movhi
 610:../src/init.c **** 	//start port
 611:../src/init.c **** 	USART_Init(USART2, &USART_InitStructure);
 1283              		.loc 1 611 0
 1284 0e12 4FF48840 		mov	r0, #17408
 1285 0e16 C4F20000 		movt	r0, 16384
 1286 0e1a 07F10403 		add	r3, r7, #4
 1287 0e1e 1946     		mov	r1, r3
 1288 0e20 FFF7FEFF 		bl	USART_Init
 612:../src/init.c **** 
 613:../src/init.c **** 	//enable interrupt - RX not empty, transfer complete
 614:../src/init.c **** 	//USART_ITConfig(USART2, USART_IT_RXNE | USART_IT_TC, ENABLE);
 615:../src/init.c **** 	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 1289              		.loc 1 615 0
 1290 0e24 4FF48840 		mov	r0, #17408
 1291 0e28 C4F20000 		movt	r0, 16384
 1292 0e2c 40F22551 		movw	r1, #1317
 1293 0e30 4FF00102 		mov	r2, #1
 1294 0e34 FFF7FEFF 		bl	USART_ITConfig
 616:../src/init.c **** 
 617:../src/init.c **** 	//enable module 2
 618:../src/init.c **** 	USART_Cmd(USART2, ENABLE);
 1295              		.loc 1 618 0
 1296 0e38 4FF48840 		mov	r0, #17408
 1297 0e3c C4F20000 		movt	r0, 16384
 1298 0e40 4FF00101 		mov	r1, #1
 1299 0e44 FFF7FEFF 		bl	USART_Cmd
 619:../src/init.c **** 
 620:../src/init.c **** 	// Configure USART2 DMA
 621:../src/init.c **** 	//enable peripheral clock
 622:../src/init.c **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 1300              		.loc 1 622 0
 1301 0e48 4FF40010 		mov	r0, #2097152
 1302 0e4c 4FF00101 		mov	r1, #1
 1303 0e50 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 623:../src/init.c **** 	//configure USART2 DMA channel
 624:../src/init.c **** 	//deinit DMA channel
 625:../src/init.c **** 	DMA_DeInit(DMA_USART2);
 1304              		.loc 1 625 0
 1305 0e54 46F2A000 		movw	r0, #24736
 1306 0e58 C4F20200 		movt	r0, 16386
 1307 0e5c FFF7FEFF 		bl	DMA_DeInit
 626:../src/init.c **** 	//enable interrupts if needed
 627:../src/init.c **** 	//DMA_IT_TC - transfer complete interrupt
 628:../src/init.c **** 	//DMA_ITConfig(DMA1_Stream6, DMA_IT_TC, ENABLE);
 629:../src/init.c **** 
 630:../src/init.c **** 
 631:../src/init.c **** 
 632:../src/init.c **** 	//configure module 1 - current/voltage/temperature sensor
 633:../src/init.c **** 	//set baud rate
 634:../src/init.c **** 	USART_InitStructure.USART_BaudRate = 19200;
 1308              		.loc 1 634 0
 1309 0e60 4FF49643 		mov	r3, #19200
 1310 0e64 7B60     		str	r3, [r7, #4]
 635:../src/init.c **** 	//flow control
 636:../src/init.c **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 1311              		.loc 1 636 0
 1312 0e66 4FF00003 		mov	r3, #0
 1313 0e6a 3B82     		strh	r3, [r7, #16]	@ movhi
 637:../src/init.c **** 	//enable receiver and transmitter
 638:../src/init.c **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 1314              		.loc 1 638 0
 1315 0e6c 4FF00C03 		mov	r3, #12
 1316 0e70 FB81     		strh	r3, [r7, #14]	@ movhi
 639:../src/init.c **** 	//parity
 640:../src/init.c **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 1317              		.loc 1 640 0
 1318 0e72 4FF00003 		mov	r3, #0
 1319 0e76 BB81     		strh	r3, [r7, #12]	@ movhi
 641:../src/init.c **** 	//stop bits
 642:../src/init.c **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1320              		.loc 1 642 0
 1321 0e78 4FF00003 		mov	r3, #0
 1322 0e7c 7B81     		strh	r3, [r7, #10]	@ movhi
 643:../src/init.c **** 	//word length
 644:../src/init.c **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1323              		.loc 1 644 0
 1324 0e7e 4FF00003 		mov	r3, #0
 1325 0e82 3B81     		strh	r3, [r7, #8]	@ movhi
 645:../src/init.c **** 	//start port
 646:../src/init.c **** 	USART_Init(USART1, &USART_InitStructure);
 1326              		.loc 1 646 0
 1327 0e84 4FF48050 		mov	r0, #4096
 1328 0e88 C4F20100 		movt	r0, 16385
 1329 0e8c 07F10403 		add	r3, r7, #4
 1330 0e90 1946     		mov	r1, r3
 1331 0e92 FFF7FEFF 		bl	USART_Init
 647:../src/init.c **** 
 648:../src/init.c **** 	//enable interrupt - RX not empty, transfer complete
 649:../src/init.c **** 	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 1332              		.loc 1 649 0
 1333 0e96 4FF48050 		mov	r0, #4096
 1334 0e9a C4F20100 		movt	r0, 16385
 1335 0e9e 40F22551 		movw	r1, #1317
 1336 0ea2 4FF00102 		mov	r2, #1
 1337 0ea6 FFF7FEFF 		bl	USART_ITConfig
 650:../src/init.c **** 
 651:../src/init.c **** 	//enable module 1
 652:../src/init.c **** 	USART_Cmd(USART1, ENABLE);
 1338              		.loc 1 652 0
 1339 0eaa 4FF48050 		mov	r0, #4096
 1340 0eae C4F20100 		movt	r0, 16385
 1341 0eb2 4FF00101 		mov	r1, #1
 1342 0eb6 FFF7FEFF 		bl	USART_Cmd
 653:../src/init.c **** 
 654:../src/init.c **** 
 655:../src/init.c **** 	//configure module 3 - GPS
 656:../src/init.c **** 	//set baud rate
 657:../src/init.c **** 	USART_InitStructure.USART_BaudRate = 9600;
 1343              		.loc 1 657 0
 1344 0eba 4FF41653 		mov	r3, #9600
 1345 0ebe 7B60     		str	r3, [r7, #4]
 658:../src/init.c **** 	//flow control
 659:../src/init.c **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 1346              		.loc 1 659 0
 1347 0ec0 4FF00003 		mov	r3, #0
 1348 0ec4 3B82     		strh	r3, [r7, #16]	@ movhi
 660:../src/init.c **** 	//enable receiver and transmitter
 661:../src/init.c **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 1349              		.loc 1 661 0
 1350 0ec6 4FF00C03 		mov	r3, #12
 1351 0eca FB81     		strh	r3, [r7, #14]	@ movhi
 662:../src/init.c **** 	//parity
 663:../src/init.c **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 1352              		.loc 1 663 0
 1353 0ecc 4FF00003 		mov	r3, #0
 1354 0ed0 BB81     		strh	r3, [r7, #12]	@ movhi
 664:../src/init.c **** 	//stop bits
 665:../src/init.c **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1355              		.loc 1 665 0
 1356 0ed2 4FF00003 		mov	r3, #0
 1357 0ed6 7B81     		strh	r3, [r7, #10]	@ movhi
 666:../src/init.c **** 	//word length
 667:../src/init.c **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1358              		.loc 1 667 0
 1359 0ed8 4FF00003 		mov	r3, #0
 1360 0edc 3B81     		strh	r3, [r7, #8]	@ movhi
 668:../src/init.c **** 	//start port
 669:../src/init.c **** 	USART_Init(USART3, &USART_InitStructure);
 1361              		.loc 1 669 0
 1362 0ede 4FF49040 		mov	r0, #18432
 1363 0ee2 C4F20000 		movt	r0, 16384
 1364 0ee6 07F10403 		add	r3, r7, #4
 1365 0eea 1946     		mov	r1, r3
 1366 0eec FFF7FEFF 		bl	USART_Init
 670:../src/init.c **** 
 671:../src/init.c **** 	//enable interrupt - RX not empty, transfer complete
 672:../src/init.c **** 	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 1367              		.loc 1 672 0
 1368 0ef0 4FF49040 		mov	r0, #18432
 1369 0ef4 C4F20000 		movt	r0, 16384
 1370 0ef8 40F22551 		movw	r1, #1317
 1371 0efc 4FF00102 		mov	r2, #1
 1372 0f00 FFF7FEFF 		bl	USART_ITConfig
 673:../src/init.c **** 
 674:../src/init.c **** 	//enable module 3
 675:../src/init.c **** 	USART_Cmd(USART3, ENABLE);
 1373              		.loc 1 675 0
 1374 0f04 4FF49040 		mov	r0, #18432
 1375 0f08 C4F20000 		movt	r0, 16384
 1376 0f0c 4FF00101 		mov	r1, #1
 1377 0f10 FFF7FEFF 		bl	USART_Cmd
 676:../src/init.c **** 
 677:../src/init.c **** 	// Configure USART3 DMA
 678:../src/init.c **** 	//enable peripheral clock
 679:../src/init.c **** 	// Already enabled for USART2
 680:../src/init.c **** 	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 681:../src/init.c **** 	//configure USART3 DMA channel
 682:../src/init.c **** 	//deinit DMA channel
 683:../src/init.c **** 	DMA_DeInit(DMA_USART3);
 1378              		.loc 1 683 0
 1379 0f14 46F27000 		movw	r0, #24688
 1380 0f18 C4F20200 		movt	r0, 16386
 1381 0f1c FFF7FEFF 		bl	DMA_DeInit
 684:../src/init.c **** 	//enable interrupts if needed
 685:../src/init.c **** 	//DMA_IT_TC - transfer complete interrupt
 686:../src/init.c **** 	//DMA_ITConfig(DMA1_Stream6, DMA_IT_TC, ENABLE);
 687:../src/init.c **** 
 688:../src/init.c **** 
 689:../src/init.c **** 	// I2C2 config
 690:../src/init.c **** 	// Configure I2C 2 for sensor communication
 691:../src/init.c **** 	// Enable peripheral clock
 692:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 1382              		.loc 1 692 0
 1383 0f20 4FF48000 		mov	r0, #4194304
 1384 0f24 4FF00101 		mov	r1, #1
 1385 0f28 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 693:../src/init.c **** 	// Set clock to 100 kHz
 694:../src/init.c **** 	I2CInitStruct.I2C_ClockSpeed = 400000;
 1386              		.loc 1 694 0
 1387 0f2c 4FF4D453 		mov	r3, #6784
 1388 0f30 C0F20603 		movt	r3, 6
 1389 0f34 FB64     		str	r3, [r7, #76]
 695:../src/init.c **** 	I2CInitStruct.I2C_Mode = I2C_Mode_I2C;
 1390              		.loc 1 695 0
 1391 0f36 4FF00003 		mov	r3, #0
 1392 0f3a A7F85030 		strh	r3, [r7, #80]	@ movhi
 696:../src/init.c **** 	I2CInitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 1393              		.loc 1 696 0
 1394 0f3e 4BF6FF73 		movw	r3, #49151
 1395 0f42 A7F85230 		strh	r3, [r7, #82]	@ movhi
 697:../src/init.c **** 	I2CInitStruct.I2C_OwnAddress1 = 0x00;
 1396              		.loc 1 697 0
 1397 0f46 4FF00003 		mov	r3, #0
 1398 0f4a A7F85430 		strh	r3, [r7, #84]	@ movhi
 698:../src/init.c **** 	I2CInitStruct.I2C_Ack = I2C_Ack_Enable;
 1399              		.loc 1 698 0
 1400 0f4e 4FF48063 		mov	r3, #1024
 1401 0f52 A7F85630 		strh	r3, [r7, #86]	@ movhi
 699:../src/init.c **** 	I2CInitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 1402              		.loc 1 699 0
 1403 0f56 4FF48043 		mov	r3, #16384
 1404 0f5a A7F85830 		strh	r3, [r7, #88]	@ movhi
 700:../src/init.c **** 	I2C_Init(I2C2, &I2CInitStruct);
 1405              		.loc 1 700 0
 1406 0f5e 4FF4B040 		mov	r0, #22528
 1407 0f62 C4F20000 		movt	r0, 16384
 1408 0f66 07F14C03 		add	r3, r7, #76
 1409 0f6a 1946     		mov	r1, r3
 1410 0f6c FFF7FEFF 		bl	I2C_Init
 701:../src/init.c **** 	// Configure interrupts
 702:../src/init.c **** 	// Enable event interrupt and buf empty interrupt event and error interrupt event
 703:../src/init.c **** 	// Do not enable BUF interrupt if using DMA
 704:../src/init.c **** 	// I2C_IT_BUF, I2C_IT_EVT, I2C_IT_ERR
 705:../src/init.c **** 	//I2C_ITConfig(I2C2, I2C_IT_BUF | I2C_IT_EVT | I2C_IT_ERR, ENABLE);
 706:../src/init.c **** 	// Configure DMA
 707:../src/init.c **** 	DMA_DeInit(DMA_I2C2_TX);
 1411              		.loc 1 707 0
 1412 0f70 46F2B800 		movw	r0, #24760
 1413 0f74 C4F20200 		movt	r0, 16386
 1414 0f78 FFF7FEFF 		bl	DMA_DeInit
 708:../src/init.c **** 	DMA_DeInit(DMA_I2C2_RX);
 1415              		.loc 1 708 0
 1416 0f7c 46F25800 		movw	r0, #24664
 1417 0f80 C4F20200 		movt	r0, 16386
 1418 0f84 FFF7FEFF 		bl	DMA_DeInit
 709:../src/init.c **** 	// Configure DMA1 stream 3 transfer complete interrupt
 710:../src/init.c **** 	//DMA_ITConfig(DMA1_Stream3, DMA_IT_TC | DMA_IT_DME | DMA_IT_FE, ENABLE);
 711:../src/init.c **** 	// Configure DMA1 stream 7 transfer complete interrupt
 712:../src/init.c **** 	//DMA_ITConfig(DMA1_Stream7, DMA_IT_TC | DMA_IT_DME | DMA_IT_FE, ENABLE);
 713:../src/init.c **** 	// Enable I2C 2
 714:../src/init.c **** 	I2C_Cmd(I2C2, ENABLE);
 1419              		.loc 1 714 0
 1420 0f88 4FF4B040 		mov	r0, #22528
 1421 0f8c C4F20000 		movt	r0, 16384
 1422 0f90 4FF00101 		mov	r1, #1
 1423 0f94 FFF7FEFF 		bl	I2C_Cmd
 715:../src/init.c **** 
 716:../src/init.c **** 	// ADC converter init
 717:../src/init.c **** 	// Enable clock(s) (84 MHz)
 718:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 1424              		.loc 1 718 0
 1425 0f98 4FF48070 		mov	r0, #256
 1426 0f9c 4FF00101 		mov	r1, #1
 1427 0fa0 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 719:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 1428              		.loc 1 719 0
 1429 0fa4 4FF40070 		mov	r0, #512
 1430 0fa8 4FF00101 		mov	r1, #1
 1431 0fac FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 720:../src/init.c **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
 1432              		.loc 1 720 0
 1433 0fb0 4FF48060 		mov	r0, #1024
 1434 0fb4 4FF00101 		mov	r1, #1
 1435 0fb8 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 721:../src/init.c **** 	// ADC Common configuration
 722:../src/init.c **** 	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 1436              		.loc 1 722 0
 1437 0fbc 4FF00003 		mov	r3, #0
 1438 0fc0 7B62     		str	r3, [r7, #36]
 723:../src/init.c **** 	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 1439              		.loc 1 723 0
 1440 0fc2 4FF00003 		mov	r3, #0
 1441 0fc6 3B63     		str	r3, [r7, #48]
 724:../src/init.c **** 	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 1442              		.loc 1 724 0
 1443 0fc8 4FF00003 		mov	r3, #0
 1444 0fcc FB62     		str	r3, [r7, #44]
 725:../src/init.c **** 	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div8;
 1445              		.loc 1 725 0
 1446 0fce 4FF44033 		mov	r3, #196608
 1447 0fd2 BB62     		str	r3, [r7, #40]
 726:../src/init.c **** 	ADC_CommonInit(&ADC_CommonInitStructure);
 1448              		.loc 1 726 0
 1449 0fd4 07F12403 		add	r3, r7, #36
 1450 0fd8 1846     		mov	r0, r3
 1451 0fda FFF7FEFF 		bl	ADC_CommonInit
 727:../src/init.c **** 
 728:../src/init.c **** 	// Configure
 729:../src/init.c **** 	ADC_InitStruct.ADC_Resolution = ADC_Resolution_12b;
 1452              		.loc 1 729 0
 1453 0fde 4FF00003 		mov	r3, #0
 1454 0fe2 7B63     		str	r3, [r7, #52]
 730:../src/init.c **** 	ADC_InitStruct.ADC_ScanConvMode = DISABLE;
 1455              		.loc 1 730 0
 1456 0fe4 4FF00003 		mov	r3, #0
 1457 0fe8 87F83830 		strb	r3, [r7, #56]
 731:../src/init.c **** 	ADC_InitStruct.ADC_ContinuousConvMode = DISABLE;
 1458              		.loc 1 731 0
 1459 0fec 4FF00003 		mov	r3, #0
 1460 0ff0 87F83930 		strb	r3, [r7, #57]
 732:../src/init.c **** 	ADC_InitStruct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 1461              		.loc 1 732 0
 1462 0ff4 4FF00003 		mov	r3, #0
 1463 0ff8 FB63     		str	r3, [r7, #60]
 733:../src/init.c **** 	ADC_InitStruct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 1464              		.loc 1 733 0
 1465 0ffa 4FF00003 		mov	r3, #0
 1466 0ffe 3B64     		str	r3, [r7, #64]
 734:../src/init.c **** 	ADC_InitStruct.ADC_DataAlign = ADC_DataAlign_Right;
 1467              		.loc 1 734 0
 1468 1000 4FF00003 		mov	r3, #0
 1469 1004 7B64     		str	r3, [r7, #68]
 735:../src/init.c **** 	ADC_InitStruct.ADC_NbrOfConversion = 2;
 1470              		.loc 1 735 0
 1471 1006 4FF00203 		mov	r3, #2
 1472 100a 87F84830 		strb	r3, [r7, #72]
 736:../src/init.c **** 
 737:../src/init.c **** 	ADC_Init(ADC1, &ADC_InitStruct);
 1473              		.loc 1 737 0
 1474 100e 4FF40050 		mov	r0, #8192
 1475 1012 C4F20100 		movt	r0, 16385
 1476 1016 07F13403 		add	r3, r7, #52
 1477 101a 1946     		mov	r1, r3
 1478 101c FFF7FEFF 		bl	ADC_Init
 738:../src/init.c **** 	ADC_InitStruct.ADC_NbrOfConversion = 1;
 1479              		.loc 1 738 0
 1480 1020 4FF00103 		mov	r3, #1
 1481 1024 87F84830 		strb	r3, [r7, #72]
 739:../src/init.c **** 	ADC_Init(ADC2, &ADC_InitStruct);
 1482              		.loc 1 739 0
 1483 1028 4FF40450 		mov	r0, #8448
 1484 102c C4F20100 		movt	r0, 16385
 1485 1030 07F13403 		add	r3, r7, #52
 1486 1034 1946     		mov	r1, r3
 1487 1036 FFF7FEFF 		bl	ADC_Init
 740:../src/init.c **** 	ADC_Init(ADC3, &ADC_InitStruct);
 1488              		.loc 1 740 0
 1489 103a 4FF40850 		mov	r0, #8704
 1490 103e C4F20100 		movt	r0, 16385
 1491 1042 07F13403 		add	r3, r7, #52
 1492 1046 1946     		mov	r1, r3
 1493 1048 FFF7FEFF 		bl	ADC_Init
 741:../src/init.c **** 
 742:../src/init.c **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_3Cycles);
 1494              		.loc 1 742 0
 1495 104c 4FF40050 		mov	r0, #8192
 1496 1050 C4F20100 		movt	r0, 16385
 1497 1054 4FF00A01 		mov	r1, #10
 1498 1058 4FF00102 		mov	r2, #1
 1499 105c 4FF00003 		mov	r3, #0
 1500 1060 FFF7FEFF 		bl	ADC_RegularChannelConfig
 743:../src/init.c **** 	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 2, ADC_SampleTime_3Cycles);
 1501              		.loc 1 743 0
 1502 1064 4FF40050 		mov	r0, #8192
 1503 1068 C4F20100 		movt	r0, 16385
 1504 106c 4FF00B01 		mov	r1, #11
 1505 1070 4FF00202 		mov	r2, #2
 1506 1074 4FF00003 		mov	r3, #0
 1507 1078 FFF7FEFF 		bl	ADC_RegularChannelConfig
 744:../src/init.c **** 	ADC_RegularChannelConfig(ADC2, ADC_Channel_12, 1, ADC_SampleTime_3Cycles);
 1508              		.loc 1 744 0
 1509 107c 4FF40450 		mov	r0, #8448
 1510 1080 C4F20100 		movt	r0, 16385
 1511 1084 4FF00C01 		mov	r1, #12
 1512 1088 4FF00102 		mov	r2, #1
 1513 108c 4FF00003 		mov	r3, #0
 1514 1090 FFF7FEFF 		bl	ADC_RegularChannelConfig
 745:../src/init.c **** 	ADC_RegularChannelConfig(ADC3, ADC_Channel_13, 1, ADC_SampleTime_3Cycles);
 1515              		.loc 1 745 0
 1516 1094 4FF40850 		mov	r0, #8704
 1517 1098 C4F20100 		movt	r0, 16385
 1518 109c 4FF00D01 		mov	r1, #13
 1519 10a0 4FF00102 		mov	r2, #1
 1520 10a4 4FF00003 		mov	r3, #0
 1521 10a8 FFF7FEFF 		bl	ADC_RegularChannelConfig
 746:../src/init.c **** 
 747:../src/init.c **** 	// Configure interrupt
 748:../src/init.c **** 	ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
 1522              		.loc 1 748 0
 1523 10ac 4FF40050 		mov	r0, #8192
 1524 10b0 C4F20100 		movt	r0, 16385
 1525 10b4 40F20521 		movw	r1, #517
 1526 10b8 4FF00102 		mov	r2, #1
 1527 10bc FFF7FEFF 		bl	ADC_ITConfig
 749:../src/init.c **** 	ADC_ITConfig(ADC2, ADC_IT_EOC, ENABLE);
 1528              		.loc 1 749 0
 1529 10c0 4FF40450 		mov	r0, #8448
 1530 10c4 C4F20100 		movt	r0, 16385
 1531 10c8 40F20521 		movw	r1, #517
 1532 10cc 4FF00102 		mov	r2, #1
 1533 10d0 FFF7FEFF 		bl	ADC_ITConfig
 750:../src/init.c **** 	ADC_ITConfig(ADC3, ADC_IT_EOC, ENABLE);
 1534              		.loc 1 750 0
 1535 10d4 4FF40850 		mov	r0, #8704
 1536 10d8 C4F20100 		movt	r0, 16385
 1537 10dc 40F20521 		movw	r1, #517
 1538 10e0 4FF00102 		mov	r2, #1
 1539 10e4 FFF7FEFF 		bl	ADC_ITConfig
 751:../src/init.c **** 	// Set interrupt after all channels are scanned
 752:../src/init.c **** 	//ADC_EOCOnEachRegularChannelCmd(ADC1, ENABLE);
 753:../src/init.c **** 
 754:../src/init.c **** 	// Enable ADC
 755:../src/init.c **** 	ADC_Cmd(ADC1, ENABLE);
 1540              		.loc 1 755 0
 1541 10e8 4FF40050 		mov	r0, #8192
 1542 10ec C4F20100 		movt	r0, 16385
 1543 10f0 4FF00101 		mov	r1, #1
 1544 10f4 FFF7FEFF 		bl	ADC_Cmd
 756:../src/init.c **** 	ADC_Cmd(ADC2, ENABLE);
 1545              		.loc 1 756 0
 1546 10f8 4FF40450 		mov	r0, #8448
 1547 10fc C4F20100 		movt	r0, 16385
 1548 1100 4FF00101 		mov	r1, #1
 1549 1104 FFF7FEFF 		bl	ADC_Cmd
 757:../src/init.c **** 	ADC_Cmd(ADC3, ENABLE);
 1550              		.loc 1 757 0
 1551 1108 4FF40850 		mov	r0, #8704
 1552 110c C4F20100 		movt	r0, 16385
 1553 1110 4FF00101 		mov	r1, #1
 1554 1114 FFF7FEFF 		bl	ADC_Cmd
 758:../src/init.c **** 
 759:../src/init.c **** 	// End of ADC
 760:../src/init.c **** /*
 761:../src/init.c **** 	// DAC init
 762:../src/init.c **** 	// Enable clock
 763:../src/init.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 764:../src/init.c **** 	DAC_InitStruct.DAC_Trigger = DAC_Trigger_None;
 765:../src/init.c **** 	DAC_InitStruct.DAC_WaveGeneration = DAC_WaveGeneration_None;
 766:../src/init.c **** 	DAC_InitStruct.DAC_LFSRUnmask_TriangleAmplitude = DAC_TriangleAmplitude_1;
 767:../src/init.c **** 	DAC_InitStruct.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 768:../src/init.c **** 
 769:../src/init.c **** 	DAC_Init(DAC_Channel_1, &DAC_InitStruct);
 770:../src/init.c **** 	DAC_Cmd(DAC_Channel_1, ENABLE);
 771:../src/init.c **** 
 772:../src/init.c **** 	DAC_Init(DAC_Channel_2, &DAC_InitStruct);
 773:../src/init.c **** 	DAC_Cmd(DAC_Channel_2, ENABLE);
 774:../src/init.c **** 
 775:../src/init.c **** */
 776:../src/init.c **** 	// End of DAC
 777:../src/init.c **** 
 778:../src/init.c **** 	NVIC_EnableInterrupts(ENABLE);
 1555              		.loc 1 778 0
 1556 1118 4FF00100 		mov	r0, #1
 1557 111c FFF7FEFF 		bl	NVIC_EnableInterrupts
 779:../src/init.c **** }
 1558              		.loc 1 779 0
 1559 1120 07F1A007 		add	r7, r7, #160
 1560 1124 BD46     		mov	sp, r7
 1561 1126 80BD     		pop	{r7, pc}
 1562              		.cfi_endproc
 1563              	.LFE110:
 1565              	.Letext0:
 1566              		.file 2 "c:\\program files (x86)\\codesourcery\\eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../..
 1567              		.file 3 "C:\\Users\\Jure\\workspace\\TemplateProject\\Libraries\\Device\\STM32F4xx\\Include/stm32f
 1568              		.file 4 "C:\\Users\\Jure\\workspace\\TemplateProject\\Libraries\\STM32F4xx_StdPeriph_Driver\\inc/s
 1569              		.file 5 "C:\\Users\\Jure\\workspace\\TemplateProject\\Libraries\\STM32F4xx_StdPeriph_Driver\\inc/s
 1570              		.file 6 "C:\\Users\\Jure\\workspace\\TemplateProject\\Libraries\\STM32F4xx_StdPeriph_Driver\\inc/s
 1571              		.file 7 "C:\\Users\\Jure\\workspace\\TemplateProject\\Libraries\\STM32F4xx_StdPeriph_Driver\\inc/s
 1572              		.file 8 "C:\\Users\\Jure\\workspace\\TemplateProject\\Libraries\\STM32F4xx_StdPeriph_Driver\\inc/s
 1573              		.file 9 "C:\\Users\\Jure\\workspace\\TemplateProject\\Libraries\\STM32F4xx_StdPeriph_Driver\\inc/s
 1574              		.file 10 "C:\\Users\\Jure\\workspace\\TemplateProject\\Libraries\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 init.c
C:\Users\Jure\AppData\Local\Temp\cchPJ39U.s:18     .text:00000000 $t
C:\Users\Jure\AppData\Local\Temp\cchPJ39U.s:23     .text:00000000 System_Config
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB1PeriphClockCmd
GPIO_Init
GPIO_PinAFConfig
GPIO_WriteBit
RCC_APB2PeriphClockCmd
TIM_TimeBaseInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_OC3Init
TIM_OC3PreloadConfig
TIM_OC4Init
TIM_OC4PreloadConfig
TIM_ARRPreloadConfig
TIM_BDTRConfig
TIM_CtrlPWMOutputs
TIM_Cmd
RCC_APB1PeriphClockCmd
TIM_ICInit
TIM_ITConfig
USART_Init
USART_ITConfig
USART_Cmd
DMA_DeInit
I2C_Init
I2C_Cmd
ADC_CommonInit
ADC_Init
ADC_RegularChannelConfig
ADC_ITConfig
ADC_Cmd
NVIC_EnableInterrupts
