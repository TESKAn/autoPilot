   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"events.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	ADC_IRQHandler
  20              		.thumb
  21              		.thumb_func
  23              	ADC_IRQHandler:
  24              	.LFB110:
  25              		.file 1 "../src/events.c"
   1:../src/events.c **** /*
   2:../src/events.c ****  * events.c
   3:../src/events.c ****  *
   4:../src/events.c ****  *  Created on: 26. avg. 2012
   5:../src/events.c ****  *      Author: Jure
   6:../src/events.c ****  */
   7:../src/events.c **** 
   8:../src/events.c **** #include "allinclude.h"
   9:../src/events.c **** 
  10:../src/events.c **** /**
  11:../src/events.c ****   * @brief  This function handles ADC event interrupt request.
  12:../src/events.c ****   * @param  None
  13:../src/events.c ****   * @retval None
  14:../src/events.c ****   * @services ADC
  15:../src/events.c ****   */
  16:../src/events.c **** void ADC_IRQHandler(void)
  17:../src/events.c **** {
  26              		.loc 1 17 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 82B0     		sub	sp, sp, #8
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 16
  38 0004 00AF     		add	r7, sp, #0
  39              	.LCFI2:
  40              		.cfi_def_cfa_register 7
  18:../src/events.c **** 	uint16_t result = 0;
  41              		.loc 1 18 0
  42 0006 4FF00003 		mov	r3, #0
  43 000a FB80     		strh	r3, [r7, #6]	@ movhi
  19:../src/events.c **** 	// Check interrupt source - ADC1, ADC2 or ADC3
  20:../src/events.c **** 	if(ADC_GetITStatus(ADC1, ADC_IT_EOC) != (u16)RESET)
  44              		.loc 1 20 0
  45 000c 4FF40050 		mov	r0, #8192
  46 0010 C4F20100 		movt	r0, 16385
  47 0014 40F20521 		movw	r1, #517
  48 0018 FFF7FEFF 		bl	ADC_GetITStatus
  49 001c 0346     		mov	r3, r0
  50 001e 002B     		cmp	r3, #0
  51 0020 1ED0     		beq	.L2
  21:../src/events.c **** 	{
  22:../src/events.c **** 		// Channel 1
  23:../src/events.c **** 		// Get conversion result
  24:../src/events.c **** 		result = ADC_GetConversionValue(ADC1);
  52              		.loc 1 24 0
  53 0022 4FF40050 		mov	r0, #8192
  54 0026 C4F20100 		movt	r0, 16385
  55 002a FFF7FEFF 		bl	ADC_GetConversionValue
  56 002e 0346     		mov	r3, r0
  57 0030 FB80     		strh	r3, [r7, #6]	@ movhi
  25:../src/events.c **** 		// Store value
  26:../src/events.c **** 		AIN0 = result;
  58              		.loc 1 26 0
  59 0032 40F20003 		movw	r3, #:lower16:MODBUSReg
  60 0036 C0F20003 		movt	r3, #:upper16:MODBUSReg
  61 003a FA88     		ldrh	r2, [r7, #6]	@ movhi
  62 003c A3F88420 		strh	r2, [r3, #132]	@ movhi
  27:../src/events.c **** 		// Clear flag
  28:../src/events.c **** 		ADC_ClearFlag(ADC1, ADC_FLAG_EOC);
  63              		.loc 1 28 0
  64 0040 4FF40050 		mov	r0, #8192
  65 0044 C4F20100 		movt	r0, 16385
  66 0048 4FF00201 		mov	r1, #2
  67 004c FFF7FEFF 		bl	ADC_ClearFlag
  29:../src/events.c **** 		// Clear interrupt
  30:../src/events.c **** 		ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
  68              		.loc 1 30 0
  69 0050 4FF40050 		mov	r0, #8192
  70 0054 C4F20100 		movt	r0, 16385
  71 0058 40F20521 		movw	r1, #517
  72 005c FFF7FEFF 		bl	ADC_ClearITPendingBit
  73              	.L2:
  31:../src/events.c **** 	}
  32:../src/events.c **** 	if(ADC_GetITStatus(ADC2, ADC_IT_EOC) != (u16)RESET)
  74              		.loc 1 32 0
  75 0060 4FF40450 		mov	r0, #8448
  76 0064 C4F20100 		movt	r0, 16385
  77 0068 40F20521 		movw	r1, #517
  78 006c FFF7FEFF 		bl	ADC_GetITStatus
  79 0070 0346     		mov	r3, r0
  80 0072 002B     		cmp	r3, #0
  81 0074 1ED0     		beq	.L3
  33:../src/events.c **** 	{
  34:../src/events.c **** 		// Channel 2
  35:../src/events.c **** 		// Get conversion result
  36:../src/events.c **** 		result = ADC_GetConversionValue(ADC2);
  82              		.loc 1 36 0
  83 0076 4FF40450 		mov	r0, #8448
  84 007a C4F20100 		movt	r0, 16385
  85 007e FFF7FEFF 		bl	ADC_GetConversionValue
  86 0082 0346     		mov	r3, r0
  87 0084 FB80     		strh	r3, [r7, #6]	@ movhi
  37:../src/events.c **** 		// Store value
  38:../src/events.c **** 		AIN2 = result;
  88              		.loc 1 38 0
  89 0086 40F20003 		movw	r3, #:lower16:MODBUSReg
  90 008a C0F20003 		movt	r3, #:upper16:MODBUSReg
  91 008e FA88     		ldrh	r2, [r7, #6]	@ movhi
  92 0090 A3F88820 		strh	r2, [r3, #136]	@ movhi
  39:../src/events.c **** 		// Clear flag
  40:../src/events.c **** 		ADC_ClearFlag(ADC2, ADC_FLAG_EOC);
  93              		.loc 1 40 0
  94 0094 4FF40450 		mov	r0, #8448
  95 0098 C4F20100 		movt	r0, 16385
  96 009c 4FF00201 		mov	r1, #2
  97 00a0 FFF7FEFF 		bl	ADC_ClearFlag
  41:../src/events.c **** 		// Clear interrupt
  42:../src/events.c **** 		ADC_ClearITPendingBit(ADC2, ADC_IT_EOC);
  98              		.loc 1 42 0
  99 00a4 4FF40450 		mov	r0, #8448
 100 00a8 C4F20100 		movt	r0, 16385
 101 00ac 40F20521 		movw	r1, #517
 102 00b0 FFF7FEFF 		bl	ADC_ClearITPendingBit
 103              	.L3:
  43:../src/events.c **** 	}
  44:../src/events.c **** 	if(ADC_GetITStatus(ADC3, ADC_IT_EOC) != (u16)RESET)
 104              		.loc 1 44 0
 105 00b4 4FF40850 		mov	r0, #8704
 106 00b8 C4F20100 		movt	r0, 16385
 107 00bc 40F20521 		movw	r1, #517
 108 00c0 FFF7FEFF 		bl	ADC_GetITStatus
 109 00c4 0346     		mov	r3, r0
 110 00c6 002B     		cmp	r3, #0
 111 00c8 1ED0     		beq	.L1
  45:../src/events.c **** 	{
  46:../src/events.c **** 		// Channel 3
  47:../src/events.c **** 		// Get conversion result
  48:../src/events.c **** 		result = ADC_GetConversionValue(ADC3);
 112              		.loc 1 48 0
 113 00ca 4FF40850 		mov	r0, #8704
 114 00ce C4F20100 		movt	r0, 16385
 115 00d2 FFF7FEFF 		bl	ADC_GetConversionValue
 116 00d6 0346     		mov	r3, r0
 117 00d8 FB80     		strh	r3, [r7, #6]	@ movhi
  49:../src/events.c **** 		// Store value
  50:../src/events.c **** 		AIN3 = result;
 118              		.loc 1 50 0
 119 00da 40F20003 		movw	r3, #:lower16:MODBUSReg
 120 00de C0F20003 		movt	r3, #:upper16:MODBUSReg
 121 00e2 FA88     		ldrh	r2, [r7, #6]	@ movhi
 122 00e4 A3F88A20 		strh	r2, [r3, #138]	@ movhi
  51:../src/events.c **** 		// Clear flag
  52:../src/events.c **** 		ADC_ClearFlag(ADC3, ADC_FLAG_EOC);
 123              		.loc 1 52 0
 124 00e8 4FF40850 		mov	r0, #8704
 125 00ec C4F20100 		movt	r0, 16385
 126 00f0 4FF00201 		mov	r1, #2
 127 00f4 FFF7FEFF 		bl	ADC_ClearFlag
  53:../src/events.c **** 		// Clear interrupt
  54:../src/events.c **** 		ADC_ClearITPendingBit(ADC3, ADC_IT_EOC);
 128              		.loc 1 54 0
 129 00f8 4FF40850 		mov	r0, #8704
 130 00fc C4F20100 		movt	r0, 16385
 131 0100 40F20521 		movw	r1, #517
 132 0104 FFF7FEFF 		bl	ADC_ClearITPendingBit
 133              	.L1:
  55:../src/events.c **** 	}
  56:../src/events.c **** }
 134              		.loc 1 56 0
 135 0108 07F10807 		add	r7, r7, #8
 136 010c BD46     		mov	sp, r7
 137 010e 80BD     		pop	{r7, pc}
 138              		.cfi_endproc
 139              	.LFE110:
 141              		.align	2
 142              		.global	I2C2_EV_IRQHandler
 143              		.thumb
 144              		.thumb_func
 146              	I2C2_EV_IRQHandler:
 147              	.LFB111:
  57:../src/events.c **** 
  58:../src/events.c **** /**
  59:../src/events.c ****   * @brief  This function handles I2C 2 event interrupt request.
  60:../src/events.c ****   * @param  None
  61:../src/events.c ****   * @retval None
  62:../src/events.c ****   * @services I2C 2
  63:../src/events.c ****   */
  64:../src/events.c **** void I2C2_EV_IRQHandler(void)
  65:../src/events.c **** {
 148              		.loc 1 65 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153 0110 80B4     		push	{r7}
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 4
 156              		.cfi_offset 7, -4
 157 0112 00AF     		add	r7, sp, #0
 158              	.LCFI4:
 159              		.cfi_def_cfa_register 7
  66:../src/events.c **** 	// Clear all events
  67:../src/events.c **** }
 160              		.loc 1 67 0
 161 0114 BD46     		mov	sp, r7
 162 0116 80BC     		pop	{r7}
 163 0118 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE111:
 167 011a 00BF     		.align	2
 168              		.global	I2C2_ER_IRQHandler
 169              		.thumb
 170              		.thumb_func
 172              	I2C2_ER_IRQHandler:
 173              	.LFB112:
  68:../src/events.c **** 
  69:../src/events.c **** /**
  70:../src/events.c ****   * @brief  This function handles I2C 2 error interrupt request.
  71:../src/events.c ****   * @param  None
  72:../src/events.c ****   * @retval None
  73:../src/events.c ****   * @services I2C 2 error
  74:../src/events.c ****   */
  75:../src/events.c **** void I2C2_ER_IRQHandler(void)
  76:../src/events.c **** {
 174              		.loc 1 76 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178 011c 80B5     		push	{r7, lr}
 179              	.LCFI5:
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 14, -4
 182              		.cfi_offset 7, -8
 183 011e 00AF     		add	r7, sp, #0
 184              	.LCFI6:
 185              		.cfi_def_cfa_register 7
  77:../src/events.c **** 	I2C_ClearFlag(I2C2, I2C_FLAG_TIMEOUT | I2C_FLAG_PECERR | I2C_FLAG_OVR | I2C_FLAG_AF | I2C_FLAG_ARL
 186              		.loc 1 77 0
 187 0120 4FF4B040 		mov	r0, #22528
 188 0124 C4F20000 		movt	r0, 16384
 189 0128 4FF4BE41 		mov	r1, #24320
 190 012c C1F20001 		movt	r1, 4096
 191 0130 FFF7FEFF 		bl	I2C_ClearFlag
  78:../src/events.c **** }
 192              		.loc 1 78 0
 193 0134 80BD     		pop	{r7, pc}
 194              		.cfi_endproc
 195              	.LFE112:
 197 0136 00BF     		.align	2
 198              		.global	DMA1_Stream6_IRQHandler
 199              		.thumb
 200              		.thumb_func
 202              	DMA1_Stream6_IRQHandler:
 203              	.LFB113:
  79:../src/events.c **** 
  80:../src/events.c **** /**
  81:../src/events.c ****   * @brief  This function handles DMA1 stream6 event interrupt request.
  82:../src/events.c ****   * @param  None
  83:../src/events.c ****   * @retval None
  84:../src/events.c ****   * @services DMA1 stream 6
  85:../src/events.c ****   */
  86:../src/events.c **** void DMA1_Stream6_IRQHandler(void)
  87:../src/events.c **** {
 204              		.loc 1 87 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 1, uses_anonymous_args = 0
 208 0138 80B5     		push	{r7, lr}
 209              	.LCFI7:
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 14, -4
 212              		.cfi_offset 7, -8
 213 013a 00AF     		add	r7, sp, #0
 214              	.LCFI8:
 215              		.cfi_def_cfa_register 7
  88:../src/events.c **** 	DMA_ClearITPendingBit(DMA1_Stream6, DMA_IT_TC);
 216              		.loc 1 88 0
 217 013c 46F2A000 		movw	r0, #24736
 218 0140 C4F20200 		movt	r0, 16386
 219 0144 4FF01001 		mov	r1, #16
 220 0148 FFF7FEFF 		bl	DMA_ClearITPendingBit
  89:../src/events.c **** }
 221              		.loc 1 89 0
 222 014c 80BD     		pop	{r7, pc}
 223              		.cfi_endproc
 224              	.LFE113:
 226 014e 00BF     		.align	2
 227              		.global	DMA1_Stream4_IRQHandler
 228              		.thumb
 229              		.thumb_func
 231              	DMA1_Stream4_IRQHandler:
 232              	.LFB114:
  90:../src/events.c **** 
  91:../src/events.c **** /**
  92:../src/events.c ****   * @brief  This function handles DMA1 stream4 event interrupt request.
  93:../src/events.c ****   * @param  None
  94:../src/events.c ****   * @retval None
  95:../src/events.c ****   * @services DMA1 stream 4
  96:../src/events.c ****   */
  97:../src/events.c **** void DMA1_Stream4_IRQHandler(void)
  98:../src/events.c **** {
 233              		.loc 1 98 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 237 0150 80B5     		push	{r7, lr}
 238              	.LCFI9:
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 14, -4
 241              		.cfi_offset 7, -8
 242 0152 00AF     		add	r7, sp, #0
 243              	.LCFI10:
 244              		.cfi_def_cfa_register 7
  99:../src/events.c **** 	// Clear GPS is sending data
 100:../src/events.c **** 	GPS_SENDING = 0;
 245              		.loc 1 100 0
 246 0154 40F20003 		movw	r3, #:lower16:flag0
 247 0158 C0F20003 		movt	r3, #:upper16:flag0
 248 015c 1A78     		ldrb	r2, [r3, #0]
 249 015e 6FF34512 		bfc	r2, #5, #1
 250 0162 1A70     		strb	r2, [r3, #0]
 101:../src/events.c **** 	DMA_ClearITPendingBit(DMA1_Stream4, DMA_IT_TC);
 251              		.loc 1 101 0
 252 0164 46F27000 		movw	r0, #24688
 253 0168 C4F20200 		movt	r0, 16386
 254 016c 4FF01001 		mov	r1, #16
 255 0170 FFF7FEFF 		bl	DMA_ClearITPendingBit
 102:../src/events.c **** 	DMA_ITConfig(DMA_USART3, DMA_IT_TC, DISABLE);
 256              		.loc 1 102 0
 257 0174 46F27000 		movw	r0, #24688
 258 0178 C4F20200 		movt	r0, 16386
 259 017c 4FF01001 		mov	r1, #16
 260 0180 4FF00002 		mov	r2, #0
 261 0184 FFF7FEFF 		bl	DMA_ITConfig
 103:../src/events.c **** }
 262              		.loc 1 103 0
 263 0188 80BD     		pop	{r7, pc}
 264              		.cfi_endproc
 265              	.LFE114:
 267 018a 00BF     		.align	2
 268              		.global	DMA1_Stream3_IRQHandler
 269              		.thumb
 270              		.thumb_func
 272              	DMA1_Stream3_IRQHandler:
 273              	.LFB115:
 104:../src/events.c **** 
 105:../src/events.c **** /**
 106:../src/events.c ****   * @brief  This function handles DMA1 stream3 event interrupt request.
 107:../src/events.c ****   * @param  None
 108:../src/events.c ****   * @retval None
 109:../src/events.c ****   * @services DMA1 stream 3
 110:../src/events.c ****   */
 111:../src/events.c **** void DMA1_Stream3_IRQHandler(void)
 112:../src/events.c **** {
 274              		.loc 1 112 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 1, uses_anonymous_args = 0
 278 018c 80B5     		push	{r7, lr}
 279              	.LCFI11:
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 14, -4
 282              		.cfi_offset 7, -8
 283 018e 00AF     		add	r7, sp, #0
 284              	.LCFI12:
 285              		.cfi_def_cfa_register 7
 113:../src/events.c **** 	// Disable interrupts
 114:../src/events.c **** 	DMA_ITConfig(DMA1_Stream3, DMA_IT_TC | DMA_IT_DME | DMA_IT_FE, DISABLE);
 286              		.loc 1 114 0
 287 0190 46F25800 		movw	r0, #24664
 288 0194 C4F20200 		movt	r0, 16386
 289 0198 4FF09201 		mov	r1, #146
 290 019c 4FF00002 		mov	r2, #0
 291 01a0 FFF7FEFF 		bl	DMA_ITConfig
 115:../src/events.c **** 	/* Send I2Cx STOP Condition */
 116:../src/events.c **** 	I2C_GenerateSTOP(I2C2, ENABLE);
 292              		.loc 1 116 0
 293 01a4 4FF4B040 		mov	r0, #22528
 294 01a8 C4F20000 		movt	r0, 16384
 295 01ac 4FF00101 		mov	r1, #1
 296 01b0 FFF7FEFF 		bl	I2C_GenerateSTOP
 117:../src/events.c **** 
 118:../src/events.c **** 	/* Disable DMA RX Channel */
 119:../src/events.c **** 	DMA_Cmd(DMA_I2C2_RX, DISABLE);
 297              		.loc 1 119 0
 298 01b4 46F25800 		movw	r0, #24664
 299 01b8 C4F20200 		movt	r0, 16386
 300 01bc 4FF00001 		mov	r1, #0
 301 01c0 FFF7FEFF 		bl	DMA_Cmd
 120:../src/events.c **** 
 121:../src/events.c **** 	/* Wait until I2Cx_DMA_STREAM_RX disabled or time out */
 122:../src/events.c **** 	while (DMA_GetCmdStatus(DMA_I2C2_RX)!= DISABLE)
 302              		.loc 1 122 0
 303 01c4 00BF     		nop
 304              	.L10:
 305              		.loc 1 122 0 is_stmt 0 discriminator 1
 306 01c6 46F25800 		movw	r0, #24664
 307 01ca C4F20200 		movt	r0, 16386
 308 01ce FFF7FEFF 		bl	DMA_GetCmdStatus
 309 01d2 0346     		mov	r3, r0
 310 01d4 002B     		cmp	r3, #0
 311 01d6 F6D1     		bne	.L10
 123:../src/events.c **** 	{}
 124:../src/events.c **** 	/* Disable I2C DMA request */
 125:../src/events.c **** 	I2C_DMACmd(I2C2,DISABLE);
 312              		.loc 1 125 0 is_stmt 1
 313 01d8 4FF4B040 		mov	r0, #22528
 314 01dc C4F20000 		movt	r0, 16384
 315 01e0 4FF00001 		mov	r1, #0
 316 01e4 FFF7FEFF 		bl	I2C_DMACmd
 126:../src/events.c **** 	DMA_ClearITPendingBit(DMA1_Stream3, DMA_IT_TC);
 317              		.loc 1 126 0
 318 01e8 46F25800 		movw	r0, #24664
 319 01ec C4F20200 		movt	r0, 16386
 320 01f0 4FF01001 		mov	r1, #16
 321 01f4 FFF7FEFF 		bl	DMA_ClearITPendingBit
 127:../src/events.c **** 	// Set flag to mark has data
 128:../src/events.c **** 	COPYI2C = 1;
 322              		.loc 1 128 0
 323 01f8 40F20003 		movw	r3, #:lower16:flag0
 324 01fc C0F20003 		movt	r3, #:upper16:flag0
 325 0200 1A78     		ldrb	r2, [r3, #0]
 326 0202 42F00102 		orr	r2, r2, #1
 327 0206 1A70     		strb	r2, [r3, #0]
 129:../src/events.c **** 	// Clear receive in progress
 130:../src/events.c **** 	I2C2_WAITINGDATA = 0;
 328              		.loc 1 130 0
 329 0208 40F20003 		movw	r3, #:lower16:flag0
 330 020c C0F20003 		movt	r3, #:upper16:flag0
 331 0210 1A78     		ldrb	r2, [r3, #0]
 332 0212 6FF3C302 		bfc	r2, #3, #1
 333 0216 1A70     		strb	r2, [r3, #0]
 131:../src/events.c **** }
 334              		.loc 1 131 0
 335 0218 80BD     		pop	{r7, pc}
 336              		.cfi_endproc
 337              	.LFE115:
 339 021a 00BF     		.align	2
 340              		.global	TIM4_IRQHandler
 341              		.thumb
 342              		.thumb_func
 344              	TIM4_IRQHandler:
 345              	.LFB116:
 132:../src/events.c **** 
 133:../src/events.c **** 
 134:../src/events.c **** /**
 135:../src/events.c ****   * @brief  This function handles Timer 4 event interrupt request.
 136:../src/events.c ****   * @param  None
 137:../src/events.c ****   * @retval None
 138:../src/events.c ****   * @services TIM4
 139:../src/events.c ****   */
 140:../src/events.c **** void TIM4_IRQHandler(void)
 141:../src/events.c **** {
 346              		.loc 1 141 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 8
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350 021c 80B5     		push	{r7, lr}
 351              	.LCFI13:
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 14, -4
 354              		.cfi_offset 7, -8
 355 021e 82B0     		sub	sp, sp, #8
 356              	.LCFI14:
 357              		.cfi_def_cfa_offset 16
 358 0220 00AF     		add	r7, sp, #0
 359              	.LCFI15:
 360              		.cfi_def_cfa_register 7
 142:../src/events.c **** 	uint32_t dataTemp = 0;
 361              		.loc 1 142 0
 362 0222 4FF00003 		mov	r3, #0
 363 0226 3B60     		str	r3, [r7, #0]
 143:../src/events.c **** 	uint32_t result = 0;
 364              		.loc 1 143 0
 365 0228 4FF00003 		mov	r3, #0
 366 022c 7B60     		str	r3, [r7, #4]
 144:../src/events.c **** 	if((TIM4->SR & TIM_FLAG_CC1) != (u16)RESET)
 367              		.loc 1 144 0
 368 022e 4FF40063 		mov	r3, #2048
 369 0232 C4F20003 		movt	r3, 16384
 370 0236 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 371 0238 9BB2     		uxth	r3, r3
 372 023a 03F00203 		and	r3, r3, #2
 373 023e 002B     		cmp	r3, #0
 374 0240 6ED0     		beq	.L12
 145:../src/events.c **** 	{
 146:../src/events.c **** 		// CC on channel 1
 147:../src/events.c **** 		dataTemp = TIM_GetCapture1(TIM4);
 375              		.loc 1 147 0
 376 0242 4FF40060 		mov	r0, #2048
 377 0246 C4F20000 		movt	r0, 16384
 378 024a FFF7FEFF 		bl	TIM_GetCapture1
 379 024e 3860     		str	r0, [r7, #0]
 148:../src/events.c **** 		// Calculate time
 149:../src/events.c **** 		// Check value
 150:../src/events.c **** 		if(dataTemp > TIM4_IC1_PreviousValue)
 380              		.loc 1 150 0
 381 0250 40F20003 		movw	r3, #:lower16:TIM4_IC1_PreviousValue
 382 0254 C0F20003 		movt	r3, #:upper16:TIM4_IC1_PreviousValue
 383 0258 1B68     		ldr	r3, [r3, #0]
 384 025a 3A68     		ldr	r2, [r7, #0]
 385 025c 9A42     		cmp	r2, r3
 386 025e 08D9     		bls	.L13
 151:../src/events.c **** 		{
 152:../src/events.c **** 			result = dataTemp - TIM4_IC1_PreviousValue;
 387              		.loc 1 152 0
 388 0260 40F20003 		movw	r3, #:lower16:TIM4_IC1_PreviousValue
 389 0264 C0F20003 		movt	r3, #:upper16:TIM4_IC1_PreviousValue
 390 0268 1B68     		ldr	r3, [r3, #0]
 391 026a 3A68     		ldr	r2, [r7, #0]
 392 026c D31A     		subs	r3, r2, r3
 393 026e 7B60     		str	r3, [r7, #4]
 394 0270 0AE0     		b	.L14
 395              	.L13:
 153:../src/events.c **** 		}
 154:../src/events.c **** 		else
 155:../src/events.c **** 		{
 156:../src/events.c **** 			result = (TIM4_PERIOD - TIM4_IC1_PreviousValue) + dataTemp;
 396              		.loc 1 156 0
 397 0272 40F20003 		movw	r3, #:lower16:TIM4_IC1_PreviousValue
 398 0276 C0F20003 		movt	r3, #:upper16:TIM4_IC1_PreviousValue
 399 027a 1B68     		ldr	r3, [r3, #0]
 400 027c 3A68     		ldr	r2, [r7, #0]
 401 027e D21A     		subs	r2, r2, r3
 402 0280 4FF6FF73 		movw	r3, #65535
 403 0284 D318     		adds	r3, r2, r3
 404 0286 7B60     		str	r3, [r7, #4]
 405              	.L14:
 157:../src/events.c **** 		}
 158:../src/events.c **** 		// Check input polarity
 159:../src/events.c **** 		if(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_12) != 0)
 406              		.loc 1 159 0
 407 0288 4FF44060 		mov	r0, #3072
 408 028c C4F20200 		movt	r0, 16386
 409 0290 4FF48051 		mov	r1, #4096
 410 0294 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 411 0298 0346     		mov	r3, r0
 412 029a 002B     		cmp	r3, #0
 413 029c 06D0     		beq	.L15
 160:../src/events.c **** 		{
 161:../src/events.c **** 			// Input is not 0, transition from low to high
 162:../src/events.c **** 			TIM4_IC1_LowWidth = result;
 414              		.loc 1 162 0
 415 029e 40F20003 		movw	r3, #:lower16:TIM4_IC1_LowWidth
 416 02a2 C0F20003 		movt	r3, #:upper16:TIM4_IC1_LowWidth
 417 02a6 7A68     		ldr	r2, [r7, #4]
 418 02a8 1A60     		str	r2, [r3, #0]
 419 02aa 32E0     		b	.L16
 420              	.L15:
 163:../src/events.c **** 		}
 164:../src/events.c **** 		else
 165:../src/events.c **** 		{
 166:../src/events.c **** 			// Else transition from high to low
 167:../src/events.c **** 			TIM4_IC1_HighWidth = result;
 421              		.loc 1 167 0
 422 02ac 40F20003 		movw	r3, #:lower16:TIM4_IC1_HighWidth
 423 02b0 C0F20003 		movt	r3, #:upper16:TIM4_IC1_HighWidth
 424 02b4 7A68     		ldr	r2, [r7, #4]
 425 02b6 1A60     		str	r2, [r3, #0]
 168:../src/events.c **** 			PWMIN_1 = (uint16_t)TIM4_IC1_HighWidth;
 426              		.loc 1 168 0
 427 02b8 40F20003 		movw	r3, #:lower16:TIM4_IC1_HighWidth
 428 02bc C0F20003 		movt	r3, #:upper16:TIM4_IC1_HighWidth
 429 02c0 1B68     		ldr	r3, [r3, #0]
 430 02c2 9AB2     		uxth	r2, r3
 431 02c4 40F20003 		movw	r3, #:lower16:MODBUSReg
 432 02c8 C0F20003 		movt	r3, #:upper16:MODBUSReg
 433 02cc A3F85A20 		strh	r2, [r3, #90]	@ movhi
 169:../src/events.c **** 			if(PWM_PASSTHROUGH)
 434              		.loc 1 169 0
 435 02d0 40F20003 		movw	r3, #:lower16:flag0
 436 02d4 C0F20003 		movt	r3, #:upper16:flag0
 437 02d8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 438 02da 23F07F03 		bic	r3, r3, #127
 439 02de DBB2     		uxtb	r3, r3
 440 02e0 002B     		cmp	r3, #0
 441 02e2 16D0     		beq	.L16
 170:../src/events.c **** 			{
 171:../src/events.c **** 				TIM_SetCompare1(TIM2, PWMIN_1);
 442              		.loc 1 171 0
 443 02e4 40F20003 		movw	r3, #:lower16:MODBUSReg
 444 02e8 C0F20003 		movt	r3, #:upper16:MODBUSReg
 445 02ec B3F85A30 		ldrh	r3, [r3, #90]
 446 02f0 4FF08040 		mov	r0, #1073741824
 447 02f4 1946     		mov	r1, r3
 448 02f6 FFF7FEFF 		bl	TIM_SetCompare1
 172:../src/events.c **** 				PWMOUT_1 = PWMIN_1;
 449              		.loc 1 172 0
 450 02fa 40F20003 		movw	r3, #:lower16:MODBUSReg
 451 02fe C0F20003 		movt	r3, #:upper16:MODBUSReg
 452 0302 B3F85A20 		ldrh	r2, [r3, #90]
 453 0306 40F20003 		movw	r3, #:lower16:MODBUSReg
 454 030a C0F20003 		movt	r3, #:upper16:MODBUSReg
 455 030e A3F86C20 		strh	r2, [r3, #108]	@ movhi
 456              	.L16:
 173:../src/events.c **** 			}
 174:../src/events.c **** 		}
 175:../src/events.c **** 		TIM4_IC1_PreviousValue = dataTemp;
 457              		.loc 1 175 0
 458 0312 40F20003 		movw	r3, #:lower16:TIM4_IC1_PreviousValue
 459 0316 C0F20003 		movt	r3, #:upper16:TIM4_IC1_PreviousValue
 460 031a 3A68     		ldr	r2, [r7, #0]
 461 031c 1A60     		str	r2, [r3, #0]
 462 031e 69E1     		b	.L11
 463              	.L12:
 176:../src/events.c **** 	}
 177:../src/events.c **** 
 178:../src/events.c **** 	else if((TIM4->SR & TIM_FLAG_CC2) != (u16)RESET)
 464              		.loc 1 178 0
 465 0320 4FF40063 		mov	r3, #2048
 466 0324 C4F20003 		movt	r3, 16384
 467 0328 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 468 032a 9BB2     		uxth	r3, r3
 469 032c 03F00403 		and	r3, r3, #4
 470 0330 002B     		cmp	r3, #0
 471 0332 6ED0     		beq	.L18
 179:../src/events.c **** 	{
 180:../src/events.c **** 		// CC on channel 2
 181:../src/events.c **** 		dataTemp = TIM_GetCapture2(TIM4);
 472              		.loc 1 181 0
 473 0334 4FF40060 		mov	r0, #2048
 474 0338 C4F20000 		movt	r0, 16384
 475 033c FFF7FEFF 		bl	TIM_GetCapture2
 476 0340 3860     		str	r0, [r7, #0]
 182:../src/events.c **** 		// Calculate time
 183:../src/events.c **** 		// Check value
 184:../src/events.c **** 		if(dataTemp > TIM4_IC2_PreviousValue)
 477              		.loc 1 184 0
 478 0342 40F20003 		movw	r3, #:lower16:TIM4_IC2_PreviousValue
 479 0346 C0F20003 		movt	r3, #:upper16:TIM4_IC2_PreviousValue
 480 034a 1B68     		ldr	r3, [r3, #0]
 481 034c 3A68     		ldr	r2, [r7, #0]
 482 034e 9A42     		cmp	r2, r3
 483 0350 08D9     		bls	.L19
 185:../src/events.c **** 		{
 186:../src/events.c **** 			result = dataTemp - TIM4_IC2_PreviousValue;
 484              		.loc 1 186 0
 485 0352 40F20003 		movw	r3, #:lower16:TIM4_IC2_PreviousValue
 486 0356 C0F20003 		movt	r3, #:upper16:TIM4_IC2_PreviousValue
 487 035a 1B68     		ldr	r3, [r3, #0]
 488 035c 3A68     		ldr	r2, [r7, #0]
 489 035e D31A     		subs	r3, r2, r3
 490 0360 7B60     		str	r3, [r7, #4]
 491 0362 0AE0     		b	.L20
 492              	.L19:
 187:../src/events.c **** 		}
 188:../src/events.c **** 		else
 189:../src/events.c **** 		{
 190:../src/events.c **** 			result = (TIM4_PERIOD - TIM4_IC2_PreviousValue) + dataTemp;
 493              		.loc 1 190 0
 494 0364 40F20003 		movw	r3, #:lower16:TIM4_IC2_PreviousValue
 495 0368 C0F20003 		movt	r3, #:upper16:TIM4_IC2_PreviousValue
 496 036c 1B68     		ldr	r3, [r3, #0]
 497 036e 3A68     		ldr	r2, [r7, #0]
 498 0370 D21A     		subs	r2, r2, r3
 499 0372 4FF6FF73 		movw	r3, #65535
 500 0376 D318     		adds	r3, r2, r3
 501 0378 7B60     		str	r3, [r7, #4]
 502              	.L20:
 191:../src/events.c **** 		}
 192:../src/events.c **** 		// Check input polarity
 193:../src/events.c **** 		if(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_13) != 0)
 503              		.loc 1 193 0
 504 037a 4FF44060 		mov	r0, #3072
 505 037e C4F20200 		movt	r0, 16386
 506 0382 4FF40051 		mov	r1, #8192
 507 0386 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 508 038a 0346     		mov	r3, r0
 509 038c 002B     		cmp	r3, #0
 510 038e 06D0     		beq	.L21
 194:../src/events.c **** 		{
 195:../src/events.c **** 			// Input is not 0, transition from low to high
 196:../src/events.c **** 			TIM4_IC2_LowWidth = result;
 511              		.loc 1 196 0
 512 0390 40F20003 		movw	r3, #:lower16:TIM4_IC2_LowWidth
 513 0394 C0F20003 		movt	r3, #:upper16:TIM4_IC2_LowWidth
 514 0398 7A68     		ldr	r2, [r7, #4]
 515 039a 1A60     		str	r2, [r3, #0]
 516 039c 32E0     		b	.L22
 517              	.L21:
 197:../src/events.c **** 		}
 198:../src/events.c **** 		else
 199:../src/events.c **** 		{
 200:../src/events.c **** 			// Else transition from high to low
 201:../src/events.c **** 			TIM4_IC2_HighWidth = result;
 518              		.loc 1 201 0
 519 039e 40F20003 		movw	r3, #:lower16:TIM4_IC2_HighWidth
 520 03a2 C0F20003 		movt	r3, #:upper16:TIM4_IC2_HighWidth
 521 03a6 7A68     		ldr	r2, [r7, #4]
 522 03a8 1A60     		str	r2, [r3, #0]
 202:../src/events.c **** 			PWMIN_2 = (uint16_t)TIM4_IC2_HighWidth;
 523              		.loc 1 202 0
 524 03aa 40F20003 		movw	r3, #:lower16:TIM4_IC2_HighWidth
 525 03ae C0F20003 		movt	r3, #:upper16:TIM4_IC2_HighWidth
 526 03b2 1B68     		ldr	r3, [r3, #0]
 527 03b4 9AB2     		uxth	r2, r3
 528 03b6 40F20003 		movw	r3, #:lower16:MODBUSReg
 529 03ba C0F20003 		movt	r3, #:upper16:MODBUSReg
 530 03be A3F85C20 		strh	r2, [r3, #92]	@ movhi
 203:../src/events.c **** 			if(PWM_PASSTHROUGH)
 531              		.loc 1 203 0
 532 03c2 40F20003 		movw	r3, #:lower16:flag0
 533 03c6 C0F20003 		movt	r3, #:upper16:flag0
 534 03ca 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 535 03cc 23F07F03 		bic	r3, r3, #127
 536 03d0 DBB2     		uxtb	r3, r3
 537 03d2 002B     		cmp	r3, #0
 538 03d4 16D0     		beq	.L22
 204:../src/events.c **** 			{
 205:../src/events.c **** 				TIM_SetCompare2(TIM2, PWMIN_2);
 539              		.loc 1 205 0
 540 03d6 40F20003 		movw	r3, #:lower16:MODBUSReg
 541 03da C0F20003 		movt	r3, #:upper16:MODBUSReg
 542 03de B3F85C30 		ldrh	r3, [r3, #92]
 543 03e2 4FF08040 		mov	r0, #1073741824
 544 03e6 1946     		mov	r1, r3
 545 03e8 FFF7FEFF 		bl	TIM_SetCompare2
 206:../src/events.c **** 				PWMOUT_2 = PWMIN_2;
 546              		.loc 1 206 0
 547 03ec 40F20003 		movw	r3, #:lower16:MODBUSReg
 548 03f0 C0F20003 		movt	r3, #:upper16:MODBUSReg
 549 03f4 B3F85C20 		ldrh	r2, [r3, #92]
 550 03f8 40F20003 		movw	r3, #:lower16:MODBUSReg
 551 03fc C0F20003 		movt	r3, #:upper16:MODBUSReg
 552 0400 A3F86E20 		strh	r2, [r3, #110]	@ movhi
 553              	.L22:
 207:../src/events.c **** 			}
 208:../src/events.c **** 		}
 209:../src/events.c **** 		TIM4_IC2_PreviousValue = dataTemp;
 554              		.loc 1 209 0
 555 0404 40F20003 		movw	r3, #:lower16:TIM4_IC2_PreviousValue
 556 0408 C0F20003 		movt	r3, #:upper16:TIM4_IC2_PreviousValue
 557 040c 3A68     		ldr	r2, [r7, #0]
 558 040e 1A60     		str	r2, [r3, #0]
 559 0410 F0E0     		b	.L11
 560              	.L18:
 210:../src/events.c **** 	}
 211:../src/events.c **** 
 212:../src/events.c **** 	else if((TIM4->SR & TIM_FLAG_CC3) != (u16)RESET)
 561              		.loc 1 212 0
 562 0412 4FF40063 		mov	r3, #2048
 563 0416 C4F20003 		movt	r3, 16384
 564 041a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 565 041c 9BB2     		uxth	r3, r3
 566 041e 03F00803 		and	r3, r3, #8
 567 0422 002B     		cmp	r3, #0
 568 0424 6ED0     		beq	.L23
 213:../src/events.c **** 	{
 214:../src/events.c **** 		// CC on channel 3
 215:../src/events.c **** 		dataTemp = TIM_GetCapture3(TIM4);
 569              		.loc 1 215 0
 570 0426 4FF40060 		mov	r0, #2048
 571 042a C4F20000 		movt	r0, 16384
 572 042e FFF7FEFF 		bl	TIM_GetCapture3
 573 0432 3860     		str	r0, [r7, #0]
 216:../src/events.c **** 		// Calculate time
 217:../src/events.c **** 		// Check value
 218:../src/events.c **** 		if(dataTemp > TIM4_IC3_PreviousValue)
 574              		.loc 1 218 0
 575 0434 40F20003 		movw	r3, #:lower16:TIM4_IC3_PreviousValue
 576 0438 C0F20003 		movt	r3, #:upper16:TIM4_IC3_PreviousValue
 577 043c 1B68     		ldr	r3, [r3, #0]
 578 043e 3A68     		ldr	r2, [r7, #0]
 579 0440 9A42     		cmp	r2, r3
 580 0442 08D9     		bls	.L24
 219:../src/events.c **** 		{
 220:../src/events.c **** 			result = dataTemp - TIM4_IC3_PreviousValue;
 581              		.loc 1 220 0
 582 0444 40F20003 		movw	r3, #:lower16:TIM4_IC3_PreviousValue
 583 0448 C0F20003 		movt	r3, #:upper16:TIM4_IC3_PreviousValue
 584 044c 1B68     		ldr	r3, [r3, #0]
 585 044e 3A68     		ldr	r2, [r7, #0]
 586 0450 D31A     		subs	r3, r2, r3
 587 0452 7B60     		str	r3, [r7, #4]
 588 0454 0AE0     		b	.L25
 589              	.L24:
 221:../src/events.c **** 		}
 222:../src/events.c **** 		else
 223:../src/events.c **** 		{
 224:../src/events.c **** 			result = (TIM4_PERIOD - TIM4_IC3_PreviousValue) + dataTemp;
 590              		.loc 1 224 0
 591 0456 40F20003 		movw	r3, #:lower16:TIM4_IC3_PreviousValue
 592 045a C0F20003 		movt	r3, #:upper16:TIM4_IC3_PreviousValue
 593 045e 1B68     		ldr	r3, [r3, #0]
 594 0460 3A68     		ldr	r2, [r7, #0]
 595 0462 D21A     		subs	r2, r2, r3
 596 0464 4FF6FF73 		movw	r3, #65535
 597 0468 D318     		adds	r3, r2, r3
 598 046a 7B60     		str	r3, [r7, #4]
 599              	.L25:
 225:../src/events.c **** 		}
 226:../src/events.c **** 		// Check input polarity
 227:../src/events.c **** 		if(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_14) != 0)
 600              		.loc 1 227 0
 601 046c 4FF44060 		mov	r0, #3072
 602 0470 C4F20200 		movt	r0, 16386
 603 0474 4FF48041 		mov	r1, #16384
 604 0478 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 605 047c 0346     		mov	r3, r0
 606 047e 002B     		cmp	r3, #0
 607 0480 06D0     		beq	.L26
 228:../src/events.c **** 		{
 229:../src/events.c **** 			// Input is not 0, transition from low to high
 230:../src/events.c **** 			TIM4_IC3_LowWidth = result;
 608              		.loc 1 230 0
 609 0482 40F20003 		movw	r3, #:lower16:TIM4_IC3_LowWidth
 610 0486 C0F20003 		movt	r3, #:upper16:TIM4_IC3_LowWidth
 611 048a 7A68     		ldr	r2, [r7, #4]
 612 048c 1A60     		str	r2, [r3, #0]
 613 048e 32E0     		b	.L27
 614              	.L26:
 231:../src/events.c **** 		}
 232:../src/events.c **** 		else
 233:../src/events.c **** 		{
 234:../src/events.c **** 			// Else transition from high to low
 235:../src/events.c **** 			TIM4_IC3_HighWidth = result;
 615              		.loc 1 235 0
 616 0490 40F20003 		movw	r3, #:lower16:TIM4_IC3_HighWidth
 617 0494 C0F20003 		movt	r3, #:upper16:TIM4_IC3_HighWidth
 618 0498 7A68     		ldr	r2, [r7, #4]
 619 049a 1A60     		str	r2, [r3, #0]
 236:../src/events.c **** 			PWMIN_4 = (uint16_t)TIM4_IC3_HighWidth;
 620              		.loc 1 236 0
 621 049c 40F20003 		movw	r3, #:lower16:TIM4_IC3_HighWidth
 622 04a0 C0F20003 		movt	r3, #:upper16:TIM4_IC3_HighWidth
 623 04a4 1B68     		ldr	r3, [r3, #0]
 624 04a6 9AB2     		uxth	r2, r3
 625 04a8 40F20003 		movw	r3, #:lower16:MODBUSReg
 626 04ac C0F20003 		movt	r3, #:upper16:MODBUSReg
 627 04b0 A3F86020 		strh	r2, [r3, #96]	@ movhi
 237:../src/events.c **** 			if(PWM_PASSTHROUGH)
 628              		.loc 1 237 0
 629 04b4 40F20003 		movw	r3, #:lower16:flag0
 630 04b8 C0F20003 		movt	r3, #:upper16:flag0
 631 04bc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 632 04be 23F07F03 		bic	r3, r3, #127
 633 04c2 DBB2     		uxtb	r3, r3
 634 04c4 002B     		cmp	r3, #0
 635 04c6 16D0     		beq	.L27
 238:../src/events.c **** 			{
 239:../src/events.c **** 				TIM_SetCompare4(TIM2, PWMIN_4);
 636              		.loc 1 239 0
 637 04c8 40F20003 		movw	r3, #:lower16:MODBUSReg
 638 04cc C0F20003 		movt	r3, #:upper16:MODBUSReg
 639 04d0 B3F86030 		ldrh	r3, [r3, #96]
 640 04d4 4FF08040 		mov	r0, #1073741824
 641 04d8 1946     		mov	r1, r3
 642 04da FFF7FEFF 		bl	TIM_SetCompare4
 240:../src/events.c **** 				PWMOUT_4 = PWMIN_4;
 643              		.loc 1 240 0
 644 04de 40F20003 		movw	r3, #:lower16:MODBUSReg
 645 04e2 C0F20003 		movt	r3, #:upper16:MODBUSReg
 646 04e6 B3F86020 		ldrh	r2, [r3, #96]
 647 04ea 40F20003 		movw	r3, #:lower16:MODBUSReg
 648 04ee C0F20003 		movt	r3, #:upper16:MODBUSReg
 649 04f2 A3F87220 		strh	r2, [r3, #114]	@ movhi
 650              	.L27:
 241:../src/events.c **** 			}
 242:../src/events.c **** 		}
 243:../src/events.c **** 		TIM4_IC3_PreviousValue = dataTemp;
 651              		.loc 1 243 0
 652 04f6 40F20003 		movw	r3, #:lower16:TIM4_IC3_PreviousValue
 653 04fa C0F20003 		movt	r3, #:upper16:TIM4_IC3_PreviousValue
 654 04fe 3A68     		ldr	r2, [r7, #0]
 655 0500 1A60     		str	r2, [r3, #0]
 656 0502 77E0     		b	.L11
 657              	.L23:
 244:../src/events.c **** 	}
 245:../src/events.c **** 
 246:../src/events.c **** 	else if((TIM4->SR & TIM_FLAG_CC4) != (u16)RESET)
 658              		.loc 1 246 0
 659 0504 4FF40063 		mov	r3, #2048
 660 0508 C4F20003 		movt	r3, 16384
 661 050c 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 662 050e 9BB2     		uxth	r3, r3
 663 0510 03F01003 		and	r3, r3, #16
 664 0514 002B     		cmp	r3, #0
 665 0516 6DD0     		beq	.L11
 247:../src/events.c **** 	{
 248:../src/events.c **** 		// CC on channel 4
 249:../src/events.c **** 		dataTemp = TIM_GetCapture4(TIM4);
 666              		.loc 1 249 0
 667 0518 4FF40060 		mov	r0, #2048
 668 051c C4F20000 		movt	r0, 16384
 669 0520 FFF7FEFF 		bl	TIM_GetCapture4
 670 0524 3860     		str	r0, [r7, #0]
 250:../src/events.c **** 		// Calculate time
 251:../src/events.c **** 		// Check value
 252:../src/events.c **** 		if(dataTemp > TIM4_IC4_PreviousValue)
 671              		.loc 1 252 0
 672 0526 40F20003 		movw	r3, #:lower16:TIM4_IC4_PreviousValue
 673 052a C0F20003 		movt	r3, #:upper16:TIM4_IC4_PreviousValue
 674 052e 1B68     		ldr	r3, [r3, #0]
 675 0530 3A68     		ldr	r2, [r7, #0]
 676 0532 9A42     		cmp	r2, r3
 677 0534 08D9     		bls	.L28
 253:../src/events.c **** 		{
 254:../src/events.c **** 			result = dataTemp - TIM4_IC4_PreviousValue;
 678              		.loc 1 254 0
 679 0536 40F20003 		movw	r3, #:lower16:TIM4_IC4_PreviousValue
 680 053a C0F20003 		movt	r3, #:upper16:TIM4_IC4_PreviousValue
 681 053e 1B68     		ldr	r3, [r3, #0]
 682 0540 3A68     		ldr	r2, [r7, #0]
 683 0542 D31A     		subs	r3, r2, r3
 684 0544 7B60     		str	r3, [r7, #4]
 685 0546 0AE0     		b	.L29
 686              	.L28:
 255:../src/events.c **** 		}
 256:../src/events.c **** 		else
 257:../src/events.c **** 		{
 258:../src/events.c **** 			result = (TIM4_PERIOD - TIM4_IC4_PreviousValue) + dataTemp;
 687              		.loc 1 258 0
 688 0548 40F20003 		movw	r3, #:lower16:TIM4_IC4_PreviousValue
 689 054c C0F20003 		movt	r3, #:upper16:TIM4_IC4_PreviousValue
 690 0550 1B68     		ldr	r3, [r3, #0]
 691 0552 3A68     		ldr	r2, [r7, #0]
 692 0554 D21A     		subs	r2, r2, r3
 693 0556 4FF6FF73 		movw	r3, #65535
 694 055a D318     		adds	r3, r2, r3
 695 055c 7B60     		str	r3, [r7, #4]
 696              	.L29:
 259:../src/events.c **** 		}
 260:../src/events.c **** 		// Check input polarity
 261:../src/events.c **** 		if(GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_15) != 0)
 697              		.loc 1 261 0
 698 055e 4FF44060 		mov	r0, #3072
 699 0562 C4F20200 		movt	r0, 16386
 700 0566 4FF40041 		mov	r1, #32768
 701 056a FFF7FEFF 		bl	GPIO_ReadInputDataBit
 702 056e 0346     		mov	r3, r0
 703 0570 002B     		cmp	r3, #0
 704 0572 06D0     		beq	.L30
 262:../src/events.c **** 		{
 263:../src/events.c **** 			// Input is not 0, transition from low to high
 264:../src/events.c **** 			TIM4_IC4_LowWidth = result;
 705              		.loc 1 264 0
 706 0574 40F20003 		movw	r3, #:lower16:TIM4_IC4_LowWidth
 707 0578 C0F20003 		movt	r3, #:upper16:TIM4_IC4_LowWidth
 708 057c 7A68     		ldr	r2, [r7, #4]
 709 057e 1A60     		str	r2, [r3, #0]
 710 0580 32E0     		b	.L31
 711              	.L30:
 265:../src/events.c **** 		}
 266:../src/events.c **** 		else
 267:../src/events.c **** 		{
 268:../src/events.c **** 			// Else transition from high to low
 269:../src/events.c **** 			TIM4_IC4_HighWidth = result;
 712              		.loc 1 269 0
 713 0582 40F20003 		movw	r3, #:lower16:TIM4_IC4_HighWidth
 714 0586 C0F20003 		movt	r3, #:upper16:TIM4_IC4_HighWidth
 715 058a 7A68     		ldr	r2, [r7, #4]
 716 058c 1A60     		str	r2, [r3, #0]
 270:../src/events.c **** 			PWMIN_3 = (uint16_t)TIM4_IC4_HighWidth;
 717              		.loc 1 270 0
 718 058e 40F20003 		movw	r3, #:lower16:TIM4_IC4_HighWidth
 719 0592 C0F20003 		movt	r3, #:upper16:TIM4_IC4_HighWidth
 720 0596 1B68     		ldr	r3, [r3, #0]
 721 0598 9AB2     		uxth	r2, r3
 722 059a 40F20003 		movw	r3, #:lower16:MODBUSReg
 723 059e C0F20003 		movt	r3, #:upper16:MODBUSReg
 724 05a2 A3F85E20 		strh	r2, [r3, #94]	@ movhi
 271:../src/events.c **** 			if(PWM_PASSTHROUGH)
 725              		.loc 1 271 0
 726 05a6 40F20003 		movw	r3, #:lower16:flag0
 727 05aa C0F20003 		movt	r3, #:upper16:flag0
 728 05ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 729 05b0 23F07F03 		bic	r3, r3, #127
 730 05b4 DBB2     		uxtb	r3, r3
 731 05b6 002B     		cmp	r3, #0
 732 05b8 16D0     		beq	.L31
 272:../src/events.c **** 			{
 273:../src/events.c **** 				TIM_SetCompare3(TIM2, PWMIN_3);
 733              		.loc 1 273 0
 734 05ba 40F20003 		movw	r3, #:lower16:MODBUSReg
 735 05be C0F20003 		movt	r3, #:upper16:MODBUSReg
 736 05c2 B3F85E30 		ldrh	r3, [r3, #94]
 737 05c6 4FF08040 		mov	r0, #1073741824
 738 05ca 1946     		mov	r1, r3
 739 05cc FFF7FEFF 		bl	TIM_SetCompare3
 274:../src/events.c **** 				PWMOUT_3 = PWMIN_3;
 740              		.loc 1 274 0
 741 05d0 40F20003 		movw	r3, #:lower16:MODBUSReg
 742 05d4 C0F20003 		movt	r3, #:upper16:MODBUSReg
 743 05d8 B3F85E20 		ldrh	r2, [r3, #94]
 744 05dc 40F20003 		movw	r3, #:lower16:MODBUSReg
 745 05e0 C0F20003 		movt	r3, #:upper16:MODBUSReg
 746 05e4 A3F87020 		strh	r2, [r3, #112]	@ movhi
 747              	.L31:
 275:../src/events.c **** 			}
 276:../src/events.c **** 		}
 277:../src/events.c **** 		TIM4_IC4_PreviousValue = dataTemp;
 748              		.loc 1 277 0
 749 05e8 40F20003 		movw	r3, #:lower16:TIM4_IC4_PreviousValue
 750 05ec C0F20003 		movt	r3, #:upper16:TIM4_IC4_PreviousValue
 751 05f0 3A68     		ldr	r2, [r7, #0]
 752 05f2 1A60     		str	r2, [r3, #0]
 753              	.L11:
 278:../src/events.c **** 	}
 279:../src/events.c **** }
 754              		.loc 1 279 0
 755 05f4 07F10807 		add	r7, r7, #8
 756 05f8 BD46     		mov	sp, r7
 757 05fa 80BD     		pop	{r7, pc}
 758              		.cfi_endproc
 759              	.LFE116:
 761              		.align	2
 762              		.global	TIM8_CC_IRQHandler
 763              		.thumb
 764              		.thumb_func
 766              	TIM8_CC_IRQHandler:
 767              	.LFB117:
 280:../src/events.c **** 
 281:../src/events.c **** void TIM8_CC_IRQHandler(void)
 282:../src/events.c **** {
 768              		.loc 1 282 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 8
 771              		@ frame_needed = 1, uses_anonymous_args = 0
 772 05fc 80B5     		push	{r7, lr}
 773              	.LCFI16:
 774              		.cfi_def_cfa_offset 8
 775              		.cfi_offset 14, -4
 776              		.cfi_offset 7, -8
 777 05fe 82B0     		sub	sp, sp, #8
 778              	.LCFI17:
 779              		.cfi_def_cfa_offset 16
 780 0600 00AF     		add	r7, sp, #0
 781              	.LCFI18:
 782              		.cfi_def_cfa_register 7
 283:../src/events.c **** 	uint32_t dataTemp = 0;
 783              		.loc 1 283 0
 784 0602 4FF00003 		mov	r3, #0
 785 0606 3B60     		str	r3, [r7, #0]
 284:../src/events.c **** 	uint32_t result = 0;
 786              		.loc 1 284 0
 787 0608 4FF00003 		mov	r3, #0
 788 060c 7B60     		str	r3, [r7, #4]
 285:../src/events.c **** 	if((TIM8->SR & TIM_FLAG_CC1) != (u16)RESET)
 789              		.loc 1 285 0
 790 060e 4FF48063 		mov	r3, #1024
 791 0612 C4F20103 		movt	r3, 16385
 792 0616 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 793 0618 9BB2     		uxth	r3, r3
 794 061a 03F00203 		and	r3, r3, #2
 795 061e 002B     		cmp	r3, #0
 796 0620 70D0     		beq	.L33
 286:../src/events.c **** 	{
 287:../src/events.c **** 		// CC on channel 1
 288:../src/events.c **** 		dataTemp = TIM_GetCapture1(TIM8);
 797              		.loc 1 288 0
 798 0622 4FF48060 		mov	r0, #1024
 799 0626 C4F20100 		movt	r0, 16385
 800 062a FFF7FEFF 		bl	TIM_GetCapture1
 801 062e 3860     		str	r0, [r7, #0]
 289:../src/events.c **** 		// Calculate time
 290:../src/events.c **** 		// Check value
 291:../src/events.c **** 		if(dataTemp > TIM8_IC1_PreviousValue)
 802              		.loc 1 291 0
 803 0630 40F20003 		movw	r3, #:lower16:TIM8_IC1_PreviousValue
 804 0634 C0F20003 		movt	r3, #:upper16:TIM8_IC1_PreviousValue
 805 0638 1B68     		ldr	r3, [r3, #0]
 806 063a 3A68     		ldr	r2, [r7, #0]
 807 063c 9A42     		cmp	r2, r3
 808 063e 08D9     		bls	.L34
 292:../src/events.c **** 		{
 293:../src/events.c **** 			result = dataTemp - TIM8_IC1_PreviousValue;
 809              		.loc 1 293 0
 810 0640 40F20003 		movw	r3, #:lower16:TIM8_IC1_PreviousValue
 811 0644 C0F20003 		movt	r3, #:upper16:TIM8_IC1_PreviousValue
 812 0648 1B68     		ldr	r3, [r3, #0]
 813 064a 3A68     		ldr	r2, [r7, #0]
 814 064c D31A     		subs	r3, r2, r3
 815 064e 7B60     		str	r3, [r7, #4]
 816 0650 0AE0     		b	.L35
 817              	.L34:
 294:../src/events.c **** 		}
 295:../src/events.c **** 		else
 296:../src/events.c **** 		{
 297:../src/events.c **** 			result = (TIM8_PERIOD - TIM8_IC1_PreviousValue) + dataTemp;
 818              		.loc 1 297 0
 819 0652 40F20003 		movw	r3, #:lower16:TIM8_IC1_PreviousValue
 820 0656 C0F20003 		movt	r3, #:upper16:TIM8_IC1_PreviousValue
 821 065a 1B68     		ldr	r3, [r3, #0]
 822 065c 3A68     		ldr	r2, [r7, #0]
 823 065e D21A     		subs	r2, r2, r3
 824 0660 4FF6FF73 		movw	r3, #65535
 825 0664 D318     		adds	r3, r2, r3
 826 0666 7B60     		str	r3, [r7, #4]
 827              	.L35:
 298:../src/events.c **** 		}
 299:../src/events.c **** 		// Check input polarity
 300:../src/events.c **** 		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6) != 0)
 828              		.loc 1 300 0
 829 0668 4FF40060 		mov	r0, #2048
 830 066c C4F20200 		movt	r0, 16386
 831 0670 4FF04001 		mov	r1, #64
 832 0674 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 833 0678 0346     		mov	r3, r0
 834 067a 002B     		cmp	r3, #0
 835 067c 06D0     		beq	.L36
 301:../src/events.c **** 		{
 302:../src/events.c **** 			// Input is not 0, transition from low to high
 303:../src/events.c **** 			TIM8_IC1_LowWidth = result;
 836              		.loc 1 303 0
 837 067e 40F20003 		movw	r3, #:lower16:TIM8_IC1_LowWidth
 838 0682 C0F20003 		movt	r3, #:upper16:TIM8_IC1_LowWidth
 839 0686 7A68     		ldr	r2, [r7, #4]
 840 0688 1A60     		str	r2, [r3, #0]
 841 068a 34E0     		b	.L37
 842              	.L36:
 304:../src/events.c **** 		}
 305:../src/events.c **** 		else
 306:../src/events.c **** 		{
 307:../src/events.c **** 			// Else transition from high to low
 308:../src/events.c **** 			TIM8_IC1_HighWidth = result;
 843              		.loc 1 308 0
 844 068c 40F20003 		movw	r3, #:lower16:TIM8_IC1_HighWidth
 845 0690 C0F20003 		movt	r3, #:upper16:TIM8_IC1_HighWidth
 846 0694 7A68     		ldr	r2, [r7, #4]
 847 0696 1A60     		str	r2, [r3, #0]
 309:../src/events.c **** 			PWMIN_5 = (uint16_t)TIM8_IC1_HighWidth;
 848              		.loc 1 309 0
 849 0698 40F20003 		movw	r3, #:lower16:TIM8_IC1_HighWidth
 850 069c C0F20003 		movt	r3, #:upper16:TIM8_IC1_HighWidth
 851 06a0 1B68     		ldr	r3, [r3, #0]
 852 06a2 9AB2     		uxth	r2, r3
 853 06a4 40F20003 		movw	r3, #:lower16:MODBUSReg
 854 06a8 C0F20003 		movt	r3, #:upper16:MODBUSReg
 855 06ac A3F86220 		strh	r2, [r3, #98]	@ movhi
 310:../src/events.c **** 			if(PWM_PASSTHROUGH)
 856              		.loc 1 310 0
 857 06b0 40F20003 		movw	r3, #:lower16:flag0
 858 06b4 C0F20003 		movt	r3, #:upper16:flag0
 859 06b8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 860 06ba 23F07F03 		bic	r3, r3, #127
 861 06be DBB2     		uxtb	r3, r3
 862 06c0 002B     		cmp	r3, #0
 863 06c2 18D0     		beq	.L37
 311:../src/events.c **** 			{
 312:../src/events.c **** 				TIM_SetCompare1(TIM3, PWMIN_5);
 864              		.loc 1 312 0
 865 06c4 40F20003 		movw	r3, #:lower16:MODBUSReg
 866 06c8 C0F20003 		movt	r3, #:upper16:MODBUSReg
 867 06cc B3F86230 		ldrh	r3, [r3, #98]
 868 06d0 4FF48060 		mov	r0, #1024
 869 06d4 C4F20000 		movt	r0, 16384
 870 06d8 1946     		mov	r1, r3
 871 06da FFF7FEFF 		bl	TIM_SetCompare1
 313:../src/events.c **** 				PWMOUT_5 = PWMIN_5;
 872              		.loc 1 313 0
 873 06de 40F20003 		movw	r3, #:lower16:MODBUSReg
 874 06e2 C0F20003 		movt	r3, #:upper16:MODBUSReg
 875 06e6 B3F86220 		ldrh	r2, [r3, #98]
 876 06ea 40F20003 		movw	r3, #:lower16:MODBUSReg
 877 06ee C0F20003 		movt	r3, #:upper16:MODBUSReg
 878 06f2 A3F87420 		strh	r2, [r3, #116]	@ movhi
 879              	.L37:
 314:../src/events.c **** 			}
 315:../src/events.c **** 		}
 316:../src/events.c **** 		TIM8_IC1_PreviousValue = dataTemp;
 880              		.loc 1 316 0
 881 06f6 40F20003 		movw	r3, #:lower16:TIM8_IC1_PreviousValue
 882 06fa C0F20003 		movt	r3, #:upper16:TIM8_IC1_PreviousValue
 883 06fe 3A68     		ldr	r2, [r7, #0]
 884 0700 1A60     		str	r2, [r3, #0]
 885 0702 6FE1     		b	.L32
 886              	.L33:
 317:../src/events.c **** 	}
 318:../src/events.c **** 	else if((TIM8->SR & TIM_FLAG_CC2) != (u16)RESET)
 887              		.loc 1 318 0
 888 0704 4FF48063 		mov	r3, #1024
 889 0708 C4F20103 		movt	r3, 16385
 890 070c 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 891 070e 9BB2     		uxth	r3, r3
 892 0710 03F00403 		and	r3, r3, #4
 893 0714 002B     		cmp	r3, #0
 894 0716 70D0     		beq	.L39
 319:../src/events.c **** 	{
 320:../src/events.c **** 		// CC on channel 2
 321:../src/events.c **** 		dataTemp = TIM_GetCapture2(TIM8);
 895              		.loc 1 321 0
 896 0718 4FF48060 		mov	r0, #1024
 897 071c C4F20100 		movt	r0, 16385
 898 0720 FFF7FEFF 		bl	TIM_GetCapture2
 899 0724 3860     		str	r0, [r7, #0]
 322:../src/events.c **** 		// Calculate time
 323:../src/events.c **** 		// Check value
 324:../src/events.c **** 		if(dataTemp > TIM8_IC2_PreviousValue)
 900              		.loc 1 324 0
 901 0726 40F20003 		movw	r3, #:lower16:TIM8_IC2_PreviousValue
 902 072a C0F20003 		movt	r3, #:upper16:TIM8_IC2_PreviousValue
 903 072e 1B68     		ldr	r3, [r3, #0]
 904 0730 3A68     		ldr	r2, [r7, #0]
 905 0732 9A42     		cmp	r2, r3
 906 0734 08D9     		bls	.L40
 325:../src/events.c **** 		{
 326:../src/events.c **** 			result = dataTemp - TIM8_IC2_PreviousValue;
 907              		.loc 1 326 0
 908 0736 40F20003 		movw	r3, #:lower16:TIM8_IC2_PreviousValue
 909 073a C0F20003 		movt	r3, #:upper16:TIM8_IC2_PreviousValue
 910 073e 1B68     		ldr	r3, [r3, #0]
 911 0740 3A68     		ldr	r2, [r7, #0]
 912 0742 D31A     		subs	r3, r2, r3
 913 0744 7B60     		str	r3, [r7, #4]
 914 0746 0AE0     		b	.L41
 915              	.L40:
 327:../src/events.c **** 		}
 328:../src/events.c **** 		else
 329:../src/events.c **** 		{
 330:../src/events.c **** 			result = (TIM8_PERIOD - TIM8_IC2_PreviousValue) + dataTemp;
 916              		.loc 1 330 0
 917 0748 40F20003 		movw	r3, #:lower16:TIM8_IC2_PreviousValue
 918 074c C0F20003 		movt	r3, #:upper16:TIM8_IC2_PreviousValue
 919 0750 1B68     		ldr	r3, [r3, #0]
 920 0752 3A68     		ldr	r2, [r7, #0]
 921 0754 D21A     		subs	r2, r2, r3
 922 0756 4FF6FF73 		movw	r3, #65535
 923 075a D318     		adds	r3, r2, r3
 924 075c 7B60     		str	r3, [r7, #4]
 925              	.L41:
 331:../src/events.c **** 		}
 332:../src/events.c **** 		// Check input polarity
 333:../src/events.c **** 		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_7) != 0)
 926              		.loc 1 333 0
 927 075e 4FF40060 		mov	r0, #2048
 928 0762 C4F20200 		movt	r0, 16386
 929 0766 4FF08001 		mov	r1, #128
 930 076a FFF7FEFF 		bl	GPIO_ReadInputDataBit
 931 076e 0346     		mov	r3, r0
 932 0770 002B     		cmp	r3, #0
 933 0772 06D0     		beq	.L42
 334:../src/events.c **** 		{
 335:../src/events.c **** 			// Input is not 0, transition from low to high
 336:../src/events.c **** 			TIM8_IC2_LowWidth = result;
 934              		.loc 1 336 0
 935 0774 40F20003 		movw	r3, #:lower16:TIM8_IC2_LowWidth
 936 0778 C0F20003 		movt	r3, #:upper16:TIM8_IC2_LowWidth
 937 077c 7A68     		ldr	r2, [r7, #4]
 938 077e 1A60     		str	r2, [r3, #0]
 939 0780 34E0     		b	.L43
 940              	.L42:
 337:../src/events.c **** 		}
 338:../src/events.c **** 		else
 339:../src/events.c **** 		{
 340:../src/events.c **** 			// Else transition from high to low
 341:../src/events.c **** 			TIM8_IC2_HighWidth = result;
 941              		.loc 1 341 0
 942 0782 40F20003 		movw	r3, #:lower16:TIM8_IC2_HighWidth
 943 0786 C0F20003 		movt	r3, #:upper16:TIM8_IC2_HighWidth
 944 078a 7A68     		ldr	r2, [r7, #4]
 945 078c 1A60     		str	r2, [r3, #0]
 342:../src/events.c **** 			PWMIN_6 = (uint16_t)TIM8_IC2_HighWidth;
 946              		.loc 1 342 0
 947 078e 40F20003 		movw	r3, #:lower16:TIM8_IC2_HighWidth
 948 0792 C0F20003 		movt	r3, #:upper16:TIM8_IC2_HighWidth
 949 0796 1B68     		ldr	r3, [r3, #0]
 950 0798 9AB2     		uxth	r2, r3
 951 079a 40F20003 		movw	r3, #:lower16:MODBUSReg
 952 079e C0F20003 		movt	r3, #:upper16:MODBUSReg
 953 07a2 A3F86420 		strh	r2, [r3, #100]	@ movhi
 343:../src/events.c **** 			if(PWM_PASSTHROUGH)
 954              		.loc 1 343 0
 955 07a6 40F20003 		movw	r3, #:lower16:flag0
 956 07aa C0F20003 		movt	r3, #:upper16:flag0
 957 07ae 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 958 07b0 23F07F03 		bic	r3, r3, #127
 959 07b4 DBB2     		uxtb	r3, r3
 960 07b6 002B     		cmp	r3, #0
 961 07b8 18D0     		beq	.L43
 344:../src/events.c **** 			{
 345:../src/events.c **** 				TIM_SetCompare2(TIM3, PWMIN_6);
 962              		.loc 1 345 0
 963 07ba 40F20003 		movw	r3, #:lower16:MODBUSReg
 964 07be C0F20003 		movt	r3, #:upper16:MODBUSReg
 965 07c2 B3F86430 		ldrh	r3, [r3, #100]
 966 07c6 4FF48060 		mov	r0, #1024
 967 07ca C4F20000 		movt	r0, 16384
 968 07ce 1946     		mov	r1, r3
 969 07d0 FFF7FEFF 		bl	TIM_SetCompare2
 346:../src/events.c **** 				PWMOUT_6 = PWMIN_6;
 970              		.loc 1 346 0
 971 07d4 40F20003 		movw	r3, #:lower16:MODBUSReg
 972 07d8 C0F20003 		movt	r3, #:upper16:MODBUSReg
 973 07dc B3F86420 		ldrh	r2, [r3, #100]
 974 07e0 40F20003 		movw	r3, #:lower16:MODBUSReg
 975 07e4 C0F20003 		movt	r3, #:upper16:MODBUSReg
 976 07e8 A3F87620 		strh	r2, [r3, #118]	@ movhi
 977              	.L43:
 347:../src/events.c **** 			}
 348:../src/events.c **** 		}
 349:../src/events.c **** 		TIM8_IC2_PreviousValue = dataTemp;
 978              		.loc 1 349 0
 979 07ec 40F20003 		movw	r3, #:lower16:TIM8_IC2_PreviousValue
 980 07f0 C0F20003 		movt	r3, #:upper16:TIM8_IC2_PreviousValue
 981 07f4 3A68     		ldr	r2, [r7, #0]
 982 07f6 1A60     		str	r2, [r3, #0]
 983 07f8 F4E0     		b	.L32
 984              	.L39:
 350:../src/events.c **** 	}
 351:../src/events.c **** 
 352:../src/events.c **** 	else if((TIM8->SR & TIM_FLAG_CC3) != (u16)RESET)
 985              		.loc 1 352 0
 986 07fa 4FF48063 		mov	r3, #1024
 987 07fe C4F20103 		movt	r3, 16385
 988 0802 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 989 0804 9BB2     		uxth	r3, r3
 990 0806 03F00803 		and	r3, r3, #8
 991 080a 002B     		cmp	r3, #0
 992 080c 70D0     		beq	.L44
 353:../src/events.c **** 	{
 354:../src/events.c **** 		// CC on channel 3
 355:../src/events.c **** 		dataTemp = TIM_GetCapture3(TIM8);
 993              		.loc 1 355 0
 994 080e 4FF48060 		mov	r0, #1024
 995 0812 C4F20100 		movt	r0, 16385
 996 0816 FFF7FEFF 		bl	TIM_GetCapture3
 997 081a 3860     		str	r0, [r7, #0]
 356:../src/events.c **** 		// Calculate time
 357:../src/events.c **** 		// Check value
 358:../src/events.c **** 		if(dataTemp > TIM8_IC3_PreviousValue)
 998              		.loc 1 358 0
 999 081c 40F20003 		movw	r3, #:lower16:TIM8_IC3_PreviousValue
 1000 0820 C0F20003 		movt	r3, #:upper16:TIM8_IC3_PreviousValue
 1001 0824 1B68     		ldr	r3, [r3, #0]
 1002 0826 3A68     		ldr	r2, [r7, #0]
 1003 0828 9A42     		cmp	r2, r3
 1004 082a 08D9     		bls	.L45
 359:../src/events.c **** 		{
 360:../src/events.c **** 			result = dataTemp - TIM8_IC3_PreviousValue;
 1005              		.loc 1 360 0
 1006 082c 40F20003 		movw	r3, #:lower16:TIM8_IC3_PreviousValue
 1007 0830 C0F20003 		movt	r3, #:upper16:TIM8_IC3_PreviousValue
 1008 0834 1B68     		ldr	r3, [r3, #0]
 1009 0836 3A68     		ldr	r2, [r7, #0]
 1010 0838 D31A     		subs	r3, r2, r3
 1011 083a 7B60     		str	r3, [r7, #4]
 1012 083c 0AE0     		b	.L46
 1013              	.L45:
 361:../src/events.c **** 		}
 362:../src/events.c **** 		else
 363:../src/events.c **** 		{
 364:../src/events.c **** 			result = (TIM8_PERIOD - TIM8_IC3_PreviousValue) + dataTemp;
 1014              		.loc 1 364 0
 1015 083e 40F20003 		movw	r3, #:lower16:TIM8_IC3_PreviousValue
 1016 0842 C0F20003 		movt	r3, #:upper16:TIM8_IC3_PreviousValue
 1017 0846 1B68     		ldr	r3, [r3, #0]
 1018 0848 3A68     		ldr	r2, [r7, #0]
 1019 084a D21A     		subs	r2, r2, r3
 1020 084c 4FF6FF73 		movw	r3, #65535
 1021 0850 D318     		adds	r3, r2, r3
 1022 0852 7B60     		str	r3, [r7, #4]
 1023              	.L46:
 365:../src/events.c **** 		}
 366:../src/events.c **** 		// Check input polarity
 367:../src/events.c **** 		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_8) != 0)
 1024              		.loc 1 367 0
 1025 0854 4FF40060 		mov	r0, #2048
 1026 0858 C4F20200 		movt	r0, 16386
 1027 085c 4FF48071 		mov	r1, #256
 1028 0860 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 1029 0864 0346     		mov	r3, r0
 1030 0866 002B     		cmp	r3, #0
 1031 0868 06D0     		beq	.L47
 368:../src/events.c **** 		{
 369:../src/events.c **** 			// Input is not 0, transition from low to high
 370:../src/events.c **** 			TIM8_IC3_LowWidth = result;
 1032              		.loc 1 370 0
 1033 086a 40F20003 		movw	r3, #:lower16:TIM8_IC3_LowWidth
 1034 086e C0F20003 		movt	r3, #:upper16:TIM8_IC3_LowWidth
 1035 0872 7A68     		ldr	r2, [r7, #4]
 1036 0874 1A60     		str	r2, [r3, #0]
 1037 0876 34E0     		b	.L48
 1038              	.L47:
 371:../src/events.c **** 		}
 372:../src/events.c **** 		else
 373:../src/events.c **** 		{
 374:../src/events.c **** 			// Else transition from high to low
 375:../src/events.c **** 			TIM8_IC3_HighWidth = result;
 1039              		.loc 1 375 0
 1040 0878 40F20003 		movw	r3, #:lower16:TIM8_IC3_HighWidth
 1041 087c C0F20003 		movt	r3, #:upper16:TIM8_IC3_HighWidth
 1042 0880 7A68     		ldr	r2, [r7, #4]
 1043 0882 1A60     		str	r2, [r3, #0]
 376:../src/events.c **** 			PWMIN_7 = (uint16_t)TIM8_IC3_HighWidth;
 1044              		.loc 1 376 0
 1045 0884 40F20003 		movw	r3, #:lower16:TIM8_IC3_HighWidth
 1046 0888 C0F20003 		movt	r3, #:upper16:TIM8_IC3_HighWidth
 1047 088c 1B68     		ldr	r3, [r3, #0]
 1048 088e 9AB2     		uxth	r2, r3
 1049 0890 40F20003 		movw	r3, #:lower16:MODBUSReg
 1050 0894 C0F20003 		movt	r3, #:upper16:MODBUSReg
 1051 0898 A3F86620 		strh	r2, [r3, #102]	@ movhi
 377:../src/events.c **** 			if(PWM_PASSTHROUGH)
 1052              		.loc 1 377 0
 1053 089c 40F20003 		movw	r3, #:lower16:flag0
 1054 08a0 C0F20003 		movt	r3, #:upper16:flag0
 1055 08a4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1056 08a6 23F07F03 		bic	r3, r3, #127
 1057 08aa DBB2     		uxtb	r3, r3
 1058 08ac 002B     		cmp	r3, #0
 1059 08ae 18D0     		beq	.L48
 378:../src/events.c **** 			{
 379:../src/events.c **** 				TIM_SetCompare3(TIM3, PWMIN_7);
 1060              		.loc 1 379 0
 1061 08b0 40F20003 		movw	r3, #:lower16:MODBUSReg
 1062 08b4 C0F20003 		movt	r3, #:upper16:MODBUSReg
 1063 08b8 B3F86630 		ldrh	r3, [r3, #102]
 1064 08bc 4FF48060 		mov	r0, #1024
 1065 08c0 C4F20000 		movt	r0, 16384
 1066 08c4 1946     		mov	r1, r3
 1067 08c6 FFF7FEFF 		bl	TIM_SetCompare3
 380:../src/events.c **** 				PWMOUT_7 = PWMIN_7;
 1068              		.loc 1 380 0
 1069 08ca 40F20003 		movw	r3, #:lower16:MODBUSReg
 1070 08ce C0F20003 		movt	r3, #:upper16:MODBUSReg
 1071 08d2 B3F86620 		ldrh	r2, [r3, #102]
 1072 08d6 40F20003 		movw	r3, #:lower16:MODBUSReg
 1073 08da C0F20003 		movt	r3, #:upper16:MODBUSReg
 1074 08de A3F87820 		strh	r2, [r3, #120]	@ movhi
 1075              	.L48:
 381:../src/events.c **** 			}
 382:../src/events.c **** 		}
 383:../src/events.c **** 		TIM8_IC3_PreviousValue = dataTemp;
 1076              		.loc 1 383 0
 1077 08e2 40F20003 		movw	r3, #:lower16:TIM8_IC3_PreviousValue
 1078 08e6 C0F20003 		movt	r3, #:upper16:TIM8_IC3_PreviousValue
 1079 08ea 3A68     		ldr	r2, [r7, #0]
 1080 08ec 1A60     		str	r2, [r3, #0]
 1081 08ee 79E0     		b	.L32
 1082              	.L44:
 384:../src/events.c **** 	}
 385:../src/events.c **** 
 386:../src/events.c **** 	else if((TIM8->SR & TIM_FLAG_CC4) != (u16)RESET)
 1083              		.loc 1 386 0
 1084 08f0 4FF48063 		mov	r3, #1024
 1085 08f4 C4F20103 		movt	r3, 16385
 1086 08f8 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1087 08fa 9BB2     		uxth	r3, r3
 1088 08fc 03F01003 		and	r3, r3, #16
 1089 0900 002B     		cmp	r3, #0
 1090 0902 6FD0     		beq	.L32
 387:../src/events.c **** 	{
 388:../src/events.c **** 		// CC on channel 4
 389:../src/events.c **** 		dataTemp = TIM_GetCapture4(TIM8);
 1091              		.loc 1 389 0
 1092 0904 4FF48060 		mov	r0, #1024
 1093 0908 C4F20100 		movt	r0, 16385
 1094 090c FFF7FEFF 		bl	TIM_GetCapture4
 1095 0910 3860     		str	r0, [r7, #0]
 390:../src/events.c **** 		// Calculate time
 391:../src/events.c **** 		// Check value
 392:../src/events.c **** 		if(dataTemp > TIM8_IC4_PreviousValue)
 1096              		.loc 1 392 0
 1097 0912 40F20003 		movw	r3, #:lower16:TIM8_IC4_PreviousValue
 1098 0916 C0F20003 		movt	r3, #:upper16:TIM8_IC4_PreviousValue
 1099 091a 1B68     		ldr	r3, [r3, #0]
 1100 091c 3A68     		ldr	r2, [r7, #0]
 1101 091e 9A42     		cmp	r2, r3
 1102 0920 08D9     		bls	.L49
 393:../src/events.c **** 		{
 394:../src/events.c **** 			result = dataTemp - TIM8_IC4_PreviousValue;
 1103              		.loc 1 394 0
 1104 0922 40F20003 		movw	r3, #:lower16:TIM8_IC4_PreviousValue
 1105 0926 C0F20003 		movt	r3, #:upper16:TIM8_IC4_PreviousValue
 1106 092a 1B68     		ldr	r3, [r3, #0]
 1107 092c 3A68     		ldr	r2, [r7, #0]
 1108 092e D31A     		subs	r3, r2, r3
 1109 0930 7B60     		str	r3, [r7, #4]
 1110 0932 0AE0     		b	.L50
 1111              	.L49:
 395:../src/events.c **** 		}
 396:../src/events.c **** 		else
 397:../src/events.c **** 		{
 398:../src/events.c **** 			result = (TIM8_PERIOD - TIM8_IC4_PreviousValue) + dataTemp;
 1112              		.loc 1 398 0
 1113 0934 40F20003 		movw	r3, #:lower16:TIM8_IC4_PreviousValue
 1114 0938 C0F20003 		movt	r3, #:upper16:TIM8_IC4_PreviousValue
 1115 093c 1B68     		ldr	r3, [r3, #0]
 1116 093e 3A68     		ldr	r2, [r7, #0]
 1117 0940 D21A     		subs	r2, r2, r3
 1118 0942 4FF6FF73 		movw	r3, #65535
 1119 0946 D318     		adds	r3, r2, r3
 1120 0948 7B60     		str	r3, [r7, #4]
 1121              	.L50:
 399:../src/events.c **** 		}
 400:../src/events.c **** 		// Check input polarity
 401:../src/events.c **** 		if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_9) != 0)
 1122              		.loc 1 401 0
 1123 094a 4FF40060 		mov	r0, #2048
 1124 094e C4F20200 		movt	r0, 16386
 1125 0952 4FF40071 		mov	r1, #512
 1126 0956 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 1127 095a 0346     		mov	r3, r0
 1128 095c 002B     		cmp	r3, #0
 1129 095e 06D0     		beq	.L51
 402:../src/events.c **** 		{
 403:../src/events.c **** 			// Input is not 0, transition from low to high
 404:../src/events.c **** 			TIM8_IC4_LowWidth = result;
 1130              		.loc 1 404 0
 1131 0960 40F20003 		movw	r3, #:lower16:TIM8_IC4_LowWidth
 1132 0964 C0F20003 		movt	r3, #:upper16:TIM8_IC4_LowWidth
 1133 0968 7A68     		ldr	r2, [r7, #4]
 1134 096a 1A60     		str	r2, [r3, #0]
 1135 096c 34E0     		b	.L52
 1136              	.L51:
 405:../src/events.c **** 		}
 406:../src/events.c **** 		else
 407:../src/events.c **** 		{
 408:../src/events.c **** 			// Else transition from high to low
 409:../src/events.c **** 			TIM8_IC4_HighWidth = result;
 1137              		.loc 1 409 0
 1138 096e 40F20003 		movw	r3, #:lower16:TIM8_IC4_HighWidth
 1139 0972 C0F20003 		movt	r3, #:upper16:TIM8_IC4_HighWidth
 1140 0976 7A68     		ldr	r2, [r7, #4]
 1141 0978 1A60     		str	r2, [r3, #0]
 410:../src/events.c **** 			PWMIN_8 = (uint16_t)TIM8_IC4_HighWidth;
 1142              		.loc 1 410 0
 1143 097a 40F20003 		movw	r3, #:lower16:TIM8_IC4_HighWidth
 1144 097e C0F20003 		movt	r3, #:upper16:TIM8_IC4_HighWidth
 1145 0982 1B68     		ldr	r3, [r3, #0]
 1146 0984 9AB2     		uxth	r2, r3
 1147 0986 40F20003 		movw	r3, #:lower16:MODBUSReg
 1148 098a C0F20003 		movt	r3, #:upper16:MODBUSReg
 1149 098e A3F86820 		strh	r2, [r3, #104]	@ movhi
 411:../src/events.c **** 			if(PWM_PASSTHROUGH)
 1150              		.loc 1 411 0
 1151 0992 40F20003 		movw	r3, #:lower16:flag0
 1152 0996 C0F20003 		movt	r3, #:upper16:flag0
 1153 099a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1154 099c 23F07F03 		bic	r3, r3, #127
 1155 09a0 DBB2     		uxtb	r3, r3
 1156 09a2 002B     		cmp	r3, #0
 1157 09a4 18D0     		beq	.L52
 412:../src/events.c **** 			{
 413:../src/events.c **** 				TIM_SetCompare4(TIM3, PWMIN_8);
 1158              		.loc 1 413 0
 1159 09a6 40F20003 		movw	r3, #:lower16:MODBUSReg
 1160 09aa C0F20003 		movt	r3, #:upper16:MODBUSReg
 1161 09ae B3F86830 		ldrh	r3, [r3, #104]
 1162 09b2 4FF48060 		mov	r0, #1024
 1163 09b6 C4F20000 		movt	r0, 16384
 1164 09ba 1946     		mov	r1, r3
 1165 09bc FFF7FEFF 		bl	TIM_SetCompare4
 414:../src/events.c **** 				PWMOUT_8 = PWMIN_8;
 1166              		.loc 1 414 0
 1167 09c0 40F20003 		movw	r3, #:lower16:MODBUSReg
 1168 09c4 C0F20003 		movt	r3, #:upper16:MODBUSReg
 1169 09c8 B3F86820 		ldrh	r2, [r3, #104]
 1170 09cc 40F20003 		movw	r3, #:lower16:MODBUSReg
 1171 09d0 C0F20003 		movt	r3, #:upper16:MODBUSReg
 1172 09d4 A3F87A20 		strh	r2, [r3, #122]	@ movhi
 1173              	.L52:
 415:../src/events.c **** 			}
 416:../src/events.c **** 		}
 417:../src/events.c **** 		TIM8_IC4_PreviousValue = dataTemp;
 1174              		.loc 1 417 0
 1175 09d8 40F20003 		movw	r3, #:lower16:TIM8_IC4_PreviousValue
 1176 09dc C0F20003 		movt	r3, #:upper16:TIM8_IC4_PreviousValue
 1177 09e0 3A68     		ldr	r2, [r7, #0]
 1178 09e2 1A60     		str	r2, [r3, #0]
 1179              	.L32:
 418:../src/events.c **** 	}
 419:../src/events.c **** }
 1180              		.loc 1 419 0
 1181 09e4 07F10807 		add	r7, r7, #8
 1182 09e8 BD46     		mov	sp, r7
 1183 09ea 80BD     		pop	{r7, pc}
 1184              		.cfi_endproc
 1185              	.LFE117:
 1187              		.align	2
 1188              		.global	TIM8_TRG_COM_TIM14_IRQHandler
 1189              		.thumb
 1190              		.thumb_func
 1192              	TIM8_TRG_COM_TIM14_IRQHandler:
 1193              	.LFB118:
 420:../src/events.c **** 
 421:../src/events.c **** 
 422:../src/events.c **** /**
 423:../src/events.c ****   * @brief  This function handles Timer 14 event interrupt request.
 424:../src/events.c ****   * @param  None
 425:../src/events.c ****   * @retval None
 426:../src/events.c ****   * @services TIM14
 427:../src/events.c ****   */
 428:../src/events.c **** void TIM8_TRG_COM_TIM14_IRQHandler(void)
 429:../src/events.c **** {
 1194              		.loc 1 429 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
 1198 09ec 80B5     		push	{r7, lr}
 1199              	.LCFI19:
 1200              		.cfi_def_cfa_offset 8
 1201              		.cfi_offset 14, -4
 1202              		.cfi_offset 7, -8
 1203 09ee 00AF     		add	r7, sp, #0
 1204              	.LCFI20:
 1205              		.cfi_def_cfa_register 7
 430:../src/events.c **** 	//Check trigger event
 431:../src/events.c **** 	if((TIM14->SR & TIM_FLAG_Update) != (u16)RESET)
 1206              		.loc 1 431 0
 1207 09f0 4FF40053 		mov	r3, #8192
 1208 09f4 C4F20003 		movt	r3, 16384
 1209 09f8 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1210 09fa 9BB2     		uxth	r3, r3
 1211 09fc 03F00103 		and	r3, r3, #1
 1212 0a00 DBB2     		uxtb	r3, r3
 1213 0a02 002B     		cmp	r3, #0
 1214 0a04 00F0BC80 		beq	.L53
 432:../src/events.c **** 	{
 433:../src/events.c **** 		TIM_ClearFlag(TIM14, TIM_FLAG_Update);
 1215              		.loc 1 433 0
 1216 0a08 4FF40050 		mov	r0, #8192
 1217 0a0c C4F20000 		movt	r0, 16384
 1218 0a10 4FF00101 		mov	r1, #1
 1219 0a14 FFF7FEFF 		bl	TIM_ClearFlag
 434:../src/events.c **** 
 435:../src/events.c **** 		if(ADC_ENABLED)
 1220              		.loc 1 435 0
 1221 0a18 40F20003 		movw	r3, #:lower16:flag0
 1222 0a1c C0F20003 		movt	r3, #:upper16:flag0
 1223 0a20 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1224 0a22 03F00803 		and	r3, r3, #8
 1225 0a26 DBB2     		uxtb	r3, r3
 1226 0a28 002B     		cmp	r3, #0
 1227 0a2a 2BD0     		beq	.L55
 436:../src/events.c **** 		{
 437:../src/events.c **** 			ADC_TriggerTimer++;
 1228              		.loc 1 437 0
 1229 0a2c 40F20003 		movw	r3, #:lower16:ADC_TriggerTimer
 1230 0a30 C0F20003 		movt	r3, #:upper16:ADC_TriggerTimer
 1231 0a34 1B68     		ldr	r3, [r3, #0]
 1232 0a36 03F10102 		add	r2, r3, #1
 1233 0a3a 40F20003 		movw	r3, #:lower16:ADC_TriggerTimer
 1234 0a3e C0F20003 		movt	r3, #:upper16:ADC_TriggerTimer
 1235 0a42 1A60     		str	r2, [r3, #0]
 438:../src/events.c **** 			if(ADC_TriggerTimer > 100)
 1236              		.loc 1 438 0
 1237 0a44 40F20003 		movw	r3, #:lower16:ADC_TriggerTimer
 1238 0a48 C0F20003 		movt	r3, #:upper16:ADC_TriggerTimer
 1239 0a4c 1B68     		ldr	r3, [r3, #0]
 1240 0a4e 642B     		cmp	r3, #100
 1241 0a50 18D9     		bls	.L55
 439:../src/events.c **** 			{
 440:../src/events.c **** 				ADC_TriggerTimer = 0;
 1242              		.loc 1 440 0
 1243 0a52 40F20003 		movw	r3, #:lower16:ADC_TriggerTimer
 1244 0a56 C0F20003 		movt	r3, #:upper16:ADC_TriggerTimer
 1245 0a5a 4FF00002 		mov	r2, #0
 1246 0a5e 1A60     		str	r2, [r3, #0]
 441:../src/events.c **** 	        	ADC_SoftwareStartConv(ADC1);
 1247              		.loc 1 441 0
 1248 0a60 4FF40050 		mov	r0, #8192
 1249 0a64 C4F20100 		movt	r0, 16385
 1250 0a68 FFF7FEFF 		bl	ADC_SoftwareStartConv
 442:../src/events.c **** 	        	ADC_SoftwareStartConv(ADC2);
 1251              		.loc 1 442 0
 1252 0a6c 4FF40450 		mov	r0, #8448
 1253 0a70 C4F20100 		movt	r0, 16385
 1254 0a74 FFF7FEFF 		bl	ADC_SoftwareStartConv
 443:../src/events.c **** 	        	ADC_SoftwareStartConv(ADC3);
 1255              		.loc 1 443 0
 1256 0a78 4FF40850 		mov	r0, #8704
 1257 0a7c C4F20100 		movt	r0, 16385
 1258 0a80 FFF7FEFF 		bl	ADC_SoftwareStartConv
 1259              	.L55:
 444:../src/events.c **** 			}
 445:../src/events.c **** 		}
 446:../src/events.c **** 
 447:../src/events.c **** 		if(EXTSENS_INIT_DONE)
 1260              		.loc 1 447 0
 1261 0a84 40F20003 		movw	r3, #:lower16:flag0
 1262 0a88 C0F20003 		movt	r3, #:upper16:flag0
 1263 0a8c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1264 0a8e 03F00103 		and	r3, r3, #1
 1265 0a92 DBB2     		uxtb	r3, r3
 1266 0a94 002B     		cmp	r3, #0
 1267 0a96 67D0     		beq	.L56
 448:../src/events.c **** 		{
 449:../src/events.c **** 			// Check power sensor
 450:../src/events.c **** 			PS_PollTimer++;
 1268              		.loc 1 450 0
 1269 0a98 40F20003 		movw	r3, #:lower16:PS_PollTimer
 1270 0a9c C0F20003 		movt	r3, #:upper16:PS_PollTimer
 1271 0aa0 1B68     		ldr	r3, [r3, #0]
 1272 0aa2 03F10102 		add	r2, r3, #1
 1273 0aa6 40F20003 		movw	r3, #:lower16:PS_PollTimer
 1274 0aaa C0F20003 		movt	r3, #:upper16:PS_PollTimer
 1275 0aae 1A60     		str	r2, [r3, #0]
 451:../src/events.c **** 			if(PS_PollTimer > PS_POLLTIME)
 1276              		.loc 1 451 0
 1277 0ab0 40F20003 		movw	r3, #:lower16:PS_PollTimer
 1278 0ab4 C0F20003 		movt	r3, #:upper16:PS_PollTimer
 1279 0ab8 1B68     		ldr	r3, [r3, #0]
 1280 0aba B3F5FA7F 		cmp	r3, #500
 1281 0abe 12DD     		ble	.L57
 452:../src/events.c **** 			{
 453:../src/events.c **** 				PS_PollTimer = 0;
 1282              		.loc 1 453 0
 1283 0ac0 40F20003 		movw	r3, #:lower16:PS_PollTimer
 1284 0ac4 C0F20003 		movt	r3, #:upper16:PS_PollTimer
 1285 0ac8 4FF00002 		mov	r2, #0
 1286 0acc 1A60     		str	r2, [r3, #0]
 454:../src/events.c **** 				if(!PSBUSY)
 1287              		.loc 1 454 0
 1288 0ace 40F20003 		movw	r3, #:lower16:flag0
 1289 0ad2 C0F20003 		movt	r3, #:upper16:flag0
 1290 0ad6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1291 0ad8 03F00203 		and	r3, r3, #2
 1292 0adc DBB2     		uxtb	r3, r3
 1293 0ade 002B     		cmp	r3, #0
 1294 0ae0 01D1     		bne	.L57
 455:../src/events.c **** 				{
 456:../src/events.c **** 					PSRequestData();
 1295              		.loc 1 456 0
 1296 0ae2 FFF7FEFF 		bl	PSRequestData
 1297              	.L57:
 457:../src/events.c **** 				}
 458:../src/events.c **** 			}
 459:../src/events.c **** 			// Check I2C sensors
 460:../src/events.c **** 			I2C2_PollTimer++;
 1298              		.loc 1 460 0
 1299 0ae6 40F20003 		movw	r3, #:lower16:I2C2_PollTimer
 1300 0aea C0F20003 		movt	r3, #:upper16:I2C2_PollTimer
 1301 0aee 1B68     		ldr	r3, [r3, #0]
 1302 0af0 03F10102 		add	r2, r3, #1
 1303 0af4 40F20003 		movw	r3, #:lower16:I2C2_PollTimer
 1304 0af8 C0F20003 		movt	r3, #:upper16:I2C2_PollTimer
 1305 0afc 1A60     		str	r2, [r3, #0]
 461:../src/events.c **** 			if(I2C2_PollTimer > I2C2_POLLTIME)
 1306              		.loc 1 461 0
 1307 0afe 40F20003 		movw	r3, #:lower16:I2C2_PollTimer
 1308 0b02 C0F20003 		movt	r3, #:upper16:I2C2_PollTimer
 1309 0b06 1B68     		ldr	r3, [r3, #0]
 1310 0b08 642B     		cmp	r3, #100
 1311 0b0a 2DDD     		ble	.L56
 462:../src/events.c **** 			{
 463:../src/events.c **** 				I2C2_PollTimer = I2C2_POLLTIME;
 1312              		.loc 1 463 0
 1313 0b0c 40F20003 		movw	r3, #:lower16:I2C2_PollTimer
 1314 0b10 C0F20003 		movt	r3, #:upper16:I2C2_PollTimer
 1315 0b14 4FF06402 		mov	r2, #100
 1316 0b18 1A60     		str	r2, [r3, #0]
 464:../src/events.c **** 				if(!I2C2_WAITINGDATA && I2C2_INITDONE)
 1317              		.loc 1 464 0
 1318 0b1a 40F20003 		movw	r3, #:lower16:flag0
 1319 0b1e C0F20003 		movt	r3, #:upper16:flag0
 1320 0b22 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1321 0b24 03F00803 		and	r3, r3, #8
 1322 0b28 DBB2     		uxtb	r3, r3
 1323 0b2a 002B     		cmp	r3, #0
 1324 0b2c 1CD1     		bne	.L56
 1325              		.loc 1 464 0 is_stmt 0 discriminator 1
 1326 0b2e 40F20003 		movw	r3, #:lower16:flag0
 1327 0b32 C0F20003 		movt	r3, #:upper16:flag0
 1328 0b36 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1329 0b38 03F01003 		and	r3, r3, #16
 1330 0b3c DBB2     		uxtb	r3, r3
 1331 0b3e 002B     		cmp	r3, #0
 1332 0b40 12D0     		beq	.L56
 465:../src/events.c **** 				{
 466:../src/events.c **** 					I2C2_PollTimer = 0;
 1333              		.loc 1 466 0 is_stmt 1
 1334 0b42 40F20003 		movw	r3, #:lower16:I2C2_PollTimer
 1335 0b46 C0F20003 		movt	r3, #:upper16:I2C2_PollTimer
 1336 0b4a 4FF00002 		mov	r2, #0
 1337 0b4e 1A60     		str	r2, [r3, #0]
 467:../src/events.c **** 					masterReceive_beginDMA(MPU6000_ADDRESS, 59, I2C2_DMABufRX, 22);
 1338              		.loc 1 467 0
 1339 0b50 4FF0D000 		mov	r0, #208
 1340 0b54 4FF03B01 		mov	r1, #59
 1341 0b58 40F20002 		movw	r2, #:lower16:I2C2_DMABufRX
 1342 0b5c C0F20002 		movt	r2, #:upper16:I2C2_DMABufRX
 1343 0b60 4FF01603 		mov	r3, #22
 1344 0b64 FFF7FEFF 		bl	masterReceive_beginDMA
 1345              	.L56:
 468:../src/events.c **** 				}
 469:../src/events.c **** 			}
 470:../src/events.c **** 		}
 471:../src/events.c **** 		// Toggle LED
 472:../src/events.c **** 		LED_RUN_TOGGLE;
 1346              		.loc 1 472 0
 1347 0b68 4FF44060 		mov	r0, #3072
 1348 0b6c C4F20200 		movt	r0, 16386
 1349 0b70 4FF48061 		mov	r1, #1024
 1350 0b74 FFF7FEFF 		bl	GPIO_ToggleBits
 473:../src/events.c **** 		// Call MODBUS timer function
 474:../src/events.c **** 		MODBUS_Timer();
 1351              		.loc 1 474 0
 1352 0b78 FFF7FEFF 		bl	MODBUS_Timer
 475:../src/events.c **** 		// Call PS timer
 476:../src/events.c **** 		PS_Timer();
 1353              		.loc 1 476 0
 1354 0b7c FFF7FEFF 		bl	PS_Timer
 1355              	.L53:
 477:../src/events.c **** 	}
 478:../src/events.c **** }
 1356              		.loc 1 478 0
 1357 0b80 80BD     		pop	{r7, pc}
 1358              		.cfi_endproc
 1359              	.LFE118:
 1361 0b82 00BF     		.align	2
 1362              		.global	TIM1_CC_IRQHandler
 1363              		.thumb
 1364              		.thumb_func
 1366              	TIM1_CC_IRQHandler:
 1367              	.LFB119:
 479:../src/events.c **** 
 480:../src/events.c **** /**
 481:../src/events.c ****   * @brief  This function handles TIM1 capture compare interrupt request.
 482:../src/events.c ****   * @param  None
 483:../src/events.c ****   * @retval None
 484:../src/events.c ****   */
 485:../src/events.c **** void TIM1_CC_IRQHandler(void)
 486:../src/events.c **** {
 1368              		.loc 1 486 0
 1369              		.cfi_startproc
 1370              		@ args = 0, pretend = 0, frame = 0
 1371              		@ frame_needed = 1, uses_anonymous_args = 0
 1372 0b84 80B5     		push	{r7, lr}
 1373              	.LCFI21:
 1374              		.cfi_def_cfa_offset 8
 1375              		.cfi_offset 14, -4
 1376              		.cfi_offset 7, -8
 1377 0b86 00AF     		add	r7, sp, #0
 1378              	.LCFI22:
 1379              		.cfi_def_cfa_register 7
 487:../src/events.c **** 	//check what triggered event
 488:../src/events.c **** 	if((TIM1->SR & TIM_FLAG_CC1) != (u16)RESET)
 1380              		.loc 1 488 0
 1381 0b88 4FF00003 		mov	r3, #0
 1382 0b8c C4F20103 		movt	r3, 16385
 1383 0b90 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1384 0b92 9BB2     		uxth	r3, r3
 1385 0b94 03F00203 		and	r3, r3, #2
 1386 0b98 002B     		cmp	r3, #0
 1387 0b9a 0CD0     		beq	.L59
 489:../src/events.c **** 	{
 490:../src/events.c **** 		//read IC1 value
 491:../src/events.c **** 		TIM1CaptureValue1 = TIM_GetCapture1(TIM1);
 1388              		.loc 1 491 0
 1389 0b9c 4FF00000 		mov	r0, #0
 1390 0ba0 C4F20100 		movt	r0, 16385
 1391 0ba4 FFF7FEFF 		bl	TIM_GetCapture1
 1392 0ba8 0346     		mov	r3, r0
 1393 0baa 1A46     		mov	r2, r3
 1394 0bac 40F20003 		movw	r3, #:lower16:TIM1CaptureValue1
 1395 0bb0 C0F20003 		movt	r3, #:upper16:TIM1CaptureValue1
 1396 0bb4 1A60     		str	r2, [r3, #0]
 1397              	.L59:
 492:../src/events.c **** 	}
 493:../src/events.c **** 	if((TIM1->SR & TIM_FLAG_CC2) != (u16)RESET)
 1398              		.loc 1 493 0
 1399 0bb6 4FF00003 		mov	r3, #0
 1400 0bba C4F20103 		movt	r3, 16385
 1401 0bbe 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1402 0bc0 9BB2     		uxth	r3, r3
 1403 0bc2 03F00403 		and	r3, r3, #4
 1404 0bc6 002B     		cmp	r3, #0
 1405 0bc8 0CD0     		beq	.L60
 494:../src/events.c **** 	{
 495:../src/events.c **** 		//read IC2 value
 496:../src/events.c **** 		TIM1CaptureValue2 = TIM_GetCapture2(TIM1);
 1406              		.loc 1 496 0
 1407 0bca 4FF00000 		mov	r0, #0
 1408 0bce C4F20100 		movt	r0, 16385
 1409 0bd2 FFF7FEFF 		bl	TIM_GetCapture2
 1410 0bd6 0346     		mov	r3, r0
 1411 0bd8 1A46     		mov	r2, r3
 1412 0bda 40F20003 		movw	r3, #:lower16:TIM1CaptureValue2
 1413 0bde C0F20003 		movt	r3, #:upper16:TIM1CaptureValue2
 1414 0be2 1A60     		str	r2, [r3, #0]
 1415              	.L60:
 497:../src/events.c **** 	}
 498:../src/events.c **** 	if((TIM1->SR & TIM_FLAG_CC3) != (u16)RESET)
 1416              		.loc 1 498 0
 1417 0be4 4FF00003 		mov	r3, #0
 1418 0be8 C4F20103 		movt	r3, 16385
 1419 0bec 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1420 0bee 9BB2     		uxth	r3, r3
 1421 0bf0 03F00803 		and	r3, r3, #8
 1422 0bf4 002B     		cmp	r3, #0
 1423 0bf6 0CD0     		beq	.L61
 499:../src/events.c **** 	{
 500:../src/events.c **** 		//read IC3 value
 501:../src/events.c **** 		TIM1CaptureValue3 = TIM_GetCapture3(TIM1);
 1424              		.loc 1 501 0
 1425 0bf8 4FF00000 		mov	r0, #0
 1426 0bfc C4F20100 		movt	r0, 16385
 1427 0c00 FFF7FEFF 		bl	TIM_GetCapture3
 1428 0c04 0346     		mov	r3, r0
 1429 0c06 1A46     		mov	r2, r3
 1430 0c08 40F20003 		movw	r3, #:lower16:TIM1CaptureValue3
 1431 0c0c C0F20003 		movt	r3, #:upper16:TIM1CaptureValue3
 1432 0c10 1A60     		str	r2, [r3, #0]
 1433              	.L61:
 502:../src/events.c **** 	}
 503:../src/events.c **** 	if((TIM1->SR & TIM_FLAG_CC4) != (u16)RESET)
 1434              		.loc 1 503 0
 1435 0c12 4FF00003 		mov	r3, #0
 1436 0c16 C4F20103 		movt	r3, 16385
 1437 0c1a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1438 0c1c 9BB2     		uxth	r3, r3
 1439 0c1e 03F01003 		and	r3, r3, #16
 1440 0c22 002B     		cmp	r3, #0
 1441 0c24 0CD0     		beq	.L58
 504:../src/events.c **** 	{
 505:../src/events.c **** 		//read IC4 value
 506:../src/events.c **** 		TIM1CaptureValue4 = TIM_GetCapture4(TIM1);
 1442              		.loc 1 506 0
 1443 0c26 4FF00000 		mov	r0, #0
 1444 0c2a C4F20100 		movt	r0, 16385
 1445 0c2e FFF7FEFF 		bl	TIM_GetCapture4
 1446 0c32 0346     		mov	r3, r0
 1447 0c34 1A46     		mov	r2, r3
 1448 0c36 40F20003 		movw	r3, #:lower16:TIM1CaptureValue4
 1449 0c3a C0F20003 		movt	r3, #:upper16:TIM1CaptureValue4
 1450 0c3e 1A60     		str	r2, [r3, #0]
 1451              	.L58:
 507:../src/events.c **** 	}
 508:../src/events.c **** 
 509:../src/events.c **** }
 1452              		.loc 1 509 0
 1453 0c40 80BD     		pop	{r7, pc}
 1454              		.cfi_endproc
 1455              	.LFE119:
 1457 0c42 00BF     		.align	2
 1458              		.global	USART1_IRQHandler
 1459              		.thumb
 1460              		.thumb_func
 1462              	USART1_IRQHandler:
 1463              	.LFB120:
 510:../src/events.c **** 
 511:../src/events.c **** /**
 512:../src/events.c ****   * @brief  This function handles USART1 interrupt request.
 513:../src/events.c ****   * @param  None
 514:../src/events.c ****   * @retval None
 515:../src/events.c ****   */
 516:../src/events.c **** void USART1_IRQHandler(void)
 517:../src/events.c **** {
 1464              		.loc 1 517 0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 0
 1467              		@ frame_needed = 1, uses_anonymous_args = 0
 1468 0c44 80B5     		push	{r7, lr}
 1469              	.LCFI23:
 1470              		.cfi_def_cfa_offset 8
 1471              		.cfi_offset 14, -4
 1472              		.cfi_offset 7, -8
 1473 0c46 00AF     		add	r7, sp, #0
 1474              	.LCFI24:
 1475              		.cfi_def_cfa_register 7
 518:../src/events.c **** //	int iData = 0;
 519:../src/events.c **** 	if ((USART1->SR & USART_FLAG_RXNE) != (u16)RESET)	//if new data in
 1476              		.loc 1 519 0
 1477 0c48 4FF48053 		mov	r3, #4096
 1478 0c4c C4F20103 		movt	r3, 16385
 1479 0c50 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1480 0c52 9BB2     		uxth	r3, r3
 1481 0c54 03F02003 		and	r3, r3, #32
 1482 0c58 002B     		cmp	r3, #0
 1483 0c5a 0AD0     		beq	.L64
 520:../src/events.c **** 	{
 521:../src/events.c **** 		PowerSensorCommProcess((uint8_t) USART_ReceiveData(USART1));
 1484              		.loc 1 521 0
 1485 0c5c 4FF48050 		mov	r0, #4096
 1486 0c60 C4F20100 		movt	r0, 16385
 1487 0c64 FFF7FEFF 		bl	USART_ReceiveData
 1488 0c68 0346     		mov	r3, r0
 1489 0c6a DBB2     		uxtb	r3, r3
 1490 0c6c 1846     		mov	r0, r3
 1491 0c6e FFF7FEFF 		bl	PowerSensorCommProcess
 1492              	.L64:
 522:../src/events.c **** 	}
 523:../src/events.c **** 
 524:../src/events.c **** 	if((USART1->SR & USART_FLAG_TC) != (u16)RESET)	//if transfer complete
 1493              		.loc 1 524 0
 1494 0c72 4FF48053 		mov	r3, #4096
 1495 0c76 C4F20103 		movt	r3, 16385
 1496 0c7a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1497 0c7c 9BB2     		uxth	r3, r3
 1498 0c7e 03F04003 		and	r3, r3, #64
 1499 0c82 002B     		cmp	r3, #0
 1500 0c84 19D0     		beq	.L63
 525:../src/events.c **** 	{
 526:../src/events.c **** 		// Disable transfer complete interrupt
 527:../src/events.c **** 		USART_ITConfig(USART1, USART_IT_TC, DISABLE);
 1501              		.loc 1 527 0
 1502 0c86 4FF48050 		mov	r0, #4096
 1503 0c8a C4F20100 		movt	r0, 16385
 1504 0c8e 40F22661 		movw	r1, #1574
 1505 0c92 4FF00002 		mov	r2, #0
 1506 0c96 FFF7FEFF 		bl	USART_ITConfig
 528:../src/events.c **** 		// Send CRC
 529:../src/events.c **** 		USART_SendData(USART1, 0x6d);
 1507              		.loc 1 529 0
 1508 0c9a 4FF48050 		mov	r0, #4096
 1509 0c9e C4F20100 		movt	r0, 16385
 1510 0ca2 4FF06D01 		mov	r1, #109
 1511 0ca6 FFF7FEFF 		bl	USART_SendData
 530:../src/events.c **** 		// Clear interrupt flag
 531:../src/events.c **** 		USART_ClearFlag(USART1, USART_FLAG_TC);
 1512              		.loc 1 531 0
 1513 0caa 4FF48050 		mov	r0, #4096
 1514 0cae C4F20100 		movt	r0, 16385
 1515 0cb2 4FF04001 		mov	r1, #64
 1516 0cb6 FFF7FEFF 		bl	USART_ClearFlag
 1517              	.L63:
 532:../src/events.c **** 	}
 533:../src/events.c **** }
 1518              		.loc 1 533 0
 1519 0cba 80BD     		pop	{r7, pc}
 1520              		.cfi_endproc
 1521              	.LFE120:
 1523              		.align	2
 1524              		.global	USART2_IRQHandler
 1525              		.thumb
 1526              		.thumb_func
 1528              	USART2_IRQHandler:
 1529              	.LFB121:
 534:../src/events.c **** 
 535:../src/events.c **** 
 536:../src/events.c **** /**
 537:../src/events.c ****   * @brief  This function handles USART2 interrupt request.
 538:../src/events.c ****   * @param  None
 539:../src/events.c ****   * @retval None
 540:../src/events.c ****   */
 541:../src/events.c **** void USART2_IRQHandler(void)
 542:../src/events.c **** {
 1530              		.loc 1 542 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 8
 1533              		@ frame_needed = 1, uses_anonymous_args = 0
 1534 0cbc 80B5     		push	{r7, lr}
 1535              	.LCFI25:
 1536              		.cfi_def_cfa_offset 8
 1537              		.cfi_offset 14, -4
 1538              		.cfi_offset 7, -8
 1539 0cbe 82B0     		sub	sp, sp, #8
 1540              	.LCFI26:
 1541              		.cfi_def_cfa_offset 16
 1542 0cc0 00AF     		add	r7, sp, #0
 1543              	.LCFI27:
 1544              		.cfi_def_cfa_register 7
 543:../src/events.c **** 	unsigned int i = 0;
 1545              		.loc 1 543 0
 1546 0cc2 4FF00003 		mov	r3, #0
 1547 0cc6 7B60     		str	r3, [r7, #4]
 544:../src/events.c **** 	if ((USART2->SR & USART_FLAG_RXNE) != (u16)RESET)	//if new data in
 1548              		.loc 1 544 0
 1549 0cc8 4FF48843 		mov	r3, #17408
 1550 0ccc C4F20003 		movt	r3, 16384
 1551 0cd0 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1552 0cd2 9BB2     		uxth	r3, r3
 1553 0cd4 03F02003 		and	r3, r3, #32
 1554 0cd8 002B     		cmp	r3, #0
 1555 0cda 0AD0     		beq	.L67
 545:../src/events.c **** 	{
 546:../src/events.c **** 		i = USART_ReceiveData(USART2);
 1556              		.loc 1 546 0
 1557 0cdc 4FF48840 		mov	r0, #17408
 1558 0ce0 C4F20000 		movt	r0, 16384
 1559 0ce4 FFF7FEFF 		bl	USART_ReceiveData
 1560 0ce8 0346     		mov	r3, r0
 1561 0cea 7B60     		str	r3, [r7, #4]
 547:../src/events.c **** 		// Call MODBUS receive function
 548:../src/events.c **** 		MODBUS_ProcessData(i);
 1562              		.loc 1 548 0
 1563 0cec 7868     		ldr	r0, [r7, #4]
 1564 0cee FFF7FEFF 		bl	MODBUS_ProcessData
 1565              	.L67:
 549:../src/events.c **** 
 550:../src/events.c **** 		//transferDMA(UART2DMAbuffer);
 551:../src/events.c **** 	}
 552:../src/events.c **** 
 553:../src/events.c **** 	if((USART2->SR & USART_FLAG_TC) != (u16)RESET)	//if transfer complete
 1566              		.loc 1 553 0
 1567 0cf2 4FF48843 		mov	r3, #17408
 1568 0cf6 C4F20003 		movt	r3, 16384
 1569 0cfa 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1570 0cfc 9BB2     		uxth	r3, r3
 1571 0cfe 03F04003 		and	r3, r3, #64
 1572 0d02 002B     		cmp	r3, #0
 1573 0d04 0BD0     		beq	.L66
 554:../src/events.c **** 	{
 555:../src/events.c **** 		// Clear TC
 556:../src/events.c **** 		USART2->SR = USART2->SR & !USART_FLAG_TC;
 1574              		.loc 1 556 0
 1575 0d06 4FF48843 		mov	r3, #17408
 1576 0d0a C4F20003 		movt	r3, 16384
 1577 0d0e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1578 0d10 4FF48843 		mov	r3, #17408
 1579 0d14 C4F20003 		movt	r3, 16384
 1580 0d18 4FF00002 		mov	r2, #0
 1581 0d1c 1A80     		strh	r2, [r3, #0]	@ movhi
 1582              	.L66:
 557:../src/events.c **** 	}
 558:../src/events.c **** }
 1583              		.loc 1 558 0
 1584 0d1e 07F10807 		add	r7, r7, #8
 1585 0d22 BD46     		mov	sp, r7
 1586 0d24 80BD     		pop	{r7, pc}
 1587              		.cfi_endproc
 1588              	.LFE121:
 1590 0d26 00BF     		.align	2
 1591              		.global	USART3_IRQHandler
 1592              		.thumb
 1593              		.thumb_func
 1595              	USART3_IRQHandler:
 1596              	.LFB122:
 559:../src/events.c **** 
 560:../src/events.c **** /**
 561:../src/events.c ****   * @brief  This function handles USART3 interrupt request.
 562:../src/events.c ****   * @param  None
 563:../src/events.c ****   * @retval None
 564:../src/events.c ****   */
 565:../src/events.c **** void USART3_IRQHandler(void)
 566:../src/events.c **** {
 1597              		.loc 1 566 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 8
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
 1601 0d28 80B5     		push	{r7, lr}
 1602              	.LCFI28:
 1603              		.cfi_def_cfa_offset 8
 1604              		.cfi_offset 14, -4
 1605              		.cfi_offset 7, -8
 1606 0d2a 82B0     		sub	sp, sp, #8
 1607              	.LCFI29:
 1608              		.cfi_def_cfa_offset 16
 1609 0d2c 00AF     		add	r7, sp, #0
 1610              	.LCFI30:
 1611              		.cfi_def_cfa_register 7
 567:../src/events.c **** 	int iData = 0;
 1612              		.loc 1 567 0
 1613 0d2e 4FF00003 		mov	r3, #0
 1614 0d32 7B60     		str	r3, [r7, #4]
 568:../src/events.c **** 	if ((USART3->SR & USART_FLAG_RXNE) != (u16)RESET)	//if new data in
 1615              		.loc 1 568 0
 1616 0d34 4FF49043 		mov	r3, #18432
 1617 0d38 C4F20003 		movt	r3, 16384
 1618 0d3c 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1619 0d3e 9BB2     		uxth	r3, r3
 1620 0d40 03F02003 		and	r3, r3, #32
 1621 0d44 002B     		cmp	r3, #0
 1622 0d46 0CD0     		beq	.L70
 569:../src/events.c **** 	{
 570:../src/events.c **** 		iData = USART_ReceiveData(USART3);
 1623              		.loc 1 570 0
 1624 0d48 4FF49040 		mov	r0, #18432
 1625 0d4c C4F20000 		movt	r0, 16384
 1626 0d50 FFF7FEFF 		bl	USART_ReceiveData
 1627 0d54 0346     		mov	r3, r0
 1628 0d56 7B60     		str	r3, [r7, #4]
 571:../src/events.c **** 		GPS_ReceiveProcess((uint8_t)iData);
 1629              		.loc 1 571 0
 1630 0d58 7B68     		ldr	r3, [r7, #4]
 1631 0d5a DBB2     		uxtb	r3, r3
 1632 0d5c 1846     		mov	r0, r3
 1633 0d5e FFF7FEFF 		bl	GPS_ReceiveProcess
 1634              	.L70:
 572:../src/events.c **** 		//USART_SendData(USART2, iData);
 573:../src/events.c **** 	}
 574:../src/events.c **** 
 575:../src/events.c **** 	if((USART3->SR & USART_FLAG_TC) != (u16)RESET)	//if transfer complete
 1635              		.loc 1 575 0
 1636 0d62 4FF49043 		mov	r3, #18432
 1637 0d66 C4F20003 		movt	r3, 16384
 1638 0d6a 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1639 0d6c 9BB2     		uxth	r3, r3
 1640 0d6e 03F04003 		and	r3, r3, #64
 1641 0d72 002B     		cmp	r3, #0
 1642 0d74 0BD0     		beq	.L69
 576:../src/events.c **** 	{
 577:../src/events.c **** 		//if more data to transmit
 578:../src/events.c **** 		/*
 579:../src/events.c **** 		if(USART_TXIndex < USART_TXCount)
 580:../src/events.c **** 		{
 581:../src/events.c **** 			USART_SendData(USART3, USART_TXBuffer[USART_TXIndex]);
 582:../src/events.c **** 			USART_TXIndex++;
 583:../src/events.c **** 		}
 584:../src/events.c **** 		*/
 585:../src/events.c **** 		//else clear TC
 586:../src/events.c **** 		//else
 587:../src/events.c **** 		{
 588:../src/events.c **** 			USART3->SR = USART3->SR & !USART_FLAG_TC;
 1643              		.loc 1 588 0
 1644 0d76 4FF49043 		mov	r3, #18432
 1645 0d7a C4F20003 		movt	r3, 16384
 1646 0d7e 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1647 0d80 4FF49043 		mov	r3, #18432
 1648 0d84 C4F20003 		movt	r3, 16384
 1649 0d88 4FF00002 		mov	r2, #0
 1650 0d8c 1A80     		strh	r2, [r3, #0]	@ movhi
 1651              	.L69:
 589:../src/events.c **** 		}
 590:../src/events.c **** 	}
 591:../src/events.c **** }
 1652              		.loc 1 591 0
 1653 0d8e 07F10807 		add	r7, r7, #8
 1654 0d92 BD46     		mov	sp, r7
 1655 0d94 80BD     		pop	{r7, pc}
 1656              		.cfi_endproc
 1657              	.LFE122:
 1659              	.Letext0:
 1660              		.file 2 "c:\\program files (x86)\\codesourcery\\eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../..
 1661              		.file 3 "D:\\Jure\\Projekti\\Git\\AutoPilot\\autopilot_sw\\Libraries\\Device\\STM32F4xx\\Include/s
 1662              		.file 4 "../src/var.h"
 1663              		.file 5 "D:\\Jure\\Projekti\\Git\\AutoPilot\\autopilot_sw\\Libraries\\CMSIS\\Include/core_cm4.h"
 1664              		.file 6 "../src/modbus.h"
 1665              		.file 7 "../src/powerSensor.h"
 1666              		.file 8 "../src/sensors.h"
DEFINED SYMBOLS
                            *ABS*:00000000 events.c
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:18     .text:00000000 $t
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:23     .text:00000000 ADC_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:146    .text:00000110 I2C2_EV_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:172    .text:0000011c I2C2_ER_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:202    .text:00000138 DMA1_Stream6_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:231    .text:00000150 DMA1_Stream4_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:272    .text:0000018c DMA1_Stream3_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:344    .text:0000021c TIM4_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:766    .text:000005fc TIM8_CC_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:1192   .text:000009ec TIM8_TRG_COM_TIM14_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:1366   .text:00000b84 TIM1_CC_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:1462   .text:00000c44 USART1_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:1528   .text:00000cbc USART2_IRQHandler
C:\Users\Jure\AppData\Local\Temp\ccfTT1Aw.s:1595   .text:00000d28 USART3_IRQHandler
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ADC_GetITStatus
ADC_GetConversionValue
MODBUSReg
ADC_ClearFlag
ADC_ClearITPendingBit
I2C_ClearFlag
DMA_ClearITPendingBit
flag0
DMA_ITConfig
I2C_GenerateSTOP
DMA_Cmd
DMA_GetCmdStatus
I2C_DMACmd
TIM_GetCapture1
TIM4_IC1_PreviousValue
GPIO_ReadInputDataBit
TIM4_IC1_LowWidth
TIM4_IC1_HighWidth
TIM_SetCompare1
TIM_GetCapture2
TIM4_IC2_PreviousValue
TIM4_IC2_LowWidth
TIM4_IC2_HighWidth
TIM_SetCompare2
TIM_GetCapture3
TIM4_IC3_PreviousValue
TIM4_IC3_LowWidth
TIM4_IC3_HighWidth
TIM_SetCompare4
TIM_GetCapture4
TIM4_IC4_PreviousValue
TIM4_IC4_LowWidth
TIM4_IC4_HighWidth
TIM_SetCompare3
TIM8_IC1_PreviousValue
TIM8_IC1_LowWidth
TIM8_IC1_HighWidth
TIM8_IC2_PreviousValue
TIM8_IC2_LowWidth
TIM8_IC2_HighWidth
TIM8_IC3_PreviousValue
TIM8_IC3_LowWidth
TIM8_IC3_HighWidth
TIM8_IC4_PreviousValue
TIM8_IC4_LowWidth
TIM8_IC4_HighWidth
TIM_ClearFlag
ADC_TriggerTimer
ADC_SoftwareStartConv
PS_PollTimer
PSRequestData
I2C2_PollTimer
I2C2_DMABufRX
masterReceive_beginDMA
GPIO_ToggleBits
MODBUS_Timer
PS_Timer
TIM1CaptureValue1
TIM1CaptureValue2
TIM1CaptureValue3
TIM1CaptureValue4
USART_ReceiveData
PowerSensorCommProcess
USART_ITConfig
USART_SendData
USART_ClearFlag
MODBUS_ProcessData
GPS_ReceiveProcess
